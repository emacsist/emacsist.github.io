<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacsist</title>
    <link>https://emacsist.github.io/</link>
    <description>Recent content on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Jul 2019 17:26:17 +0800</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>&lt;TCP IP协议&gt;笔记</title>
      <link>https://emacsist.github.io/2019/07/11/tcp-ip%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 11 Jul 2019 17:26:17 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/07/11/tcp-ip%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0/</guid>
      <description>概念 协议族 一系列相关的协议的集合 体系结构或参考模型 指定一个协议族中的各种协议之间的相互关系并划分需要完成的任务的设计 面向连接 对于虚电路抽象和</description>
    </item>
    
    <item>
      <title>Mysql 死锁</title>
      <link>https://emacsist.github.io/2019/06/12/mysql-%E6%AD%BB%E9%94%81/</link>
      <pubDate>Wed, 12 Jun 2019 14:46:53 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/06/12/mysql-%E6%AD%BB%E9%94%81/</guid>
      <description>官方文档 原文 可以通过以下技术来减少死锁的出现 在任何时候, 使用 SHOW ENGINE INNODB STATUS 命令来判断最近的死锁问题. 这可帮助你排查应用避免死锁. 如果担心频繁死锁预</description>
    </item>
    
    <item>
      <title>前后端断点续传思路及简单实现</title>
      <link>https://emacsist.github.io/2019/05/17/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E6%80%9D%E8%B7%AF%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 17 May 2019 11:37:31 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/05/17/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E6%80%9D%E8%B7%AF%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>Github 示例代码 前端 主要是利用 FileAPI 来进行按块大小分割, 然后一个一个上传. 主要就是利用 File 对象的 slice 方法进行按字节范围分割(一块), 然后一块一块地上传 还要</description>
    </item>
    
    <item>
      <title>&lt;简单的逻辑学&gt;笔记</title>
      <link>https://emacsist.github.io/2019/04/02/%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%BB%E8%BE%91%E5%AD%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 02 Apr 2019 17:06:31 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/04/02/%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%BB%E8%BE%91%E5%AD%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>逻辑学的主题是清晰高效地思考. 它既是一门科学, 也是一门艺术. 逻辑学的思想准备 全神贯注 确认事实 如果某个事物是我们可以亲身体验的, 最可靠的方法就</description>
    </item>
    
    <item>
      <title>&lt;重新定义 SpringCloud 实战&gt;笔记</title>
      <link>https://emacsist.github.io/2019/03/13/%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89-springcloud-%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 13 Mar 2019 16:51:51 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/03/13/%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89-springcloud-%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</guid>
      <description>组件 github spring-cloud 组件 项目 分类 eureka spring-cloud-netflix 注册中心 zuul spring-cloud-netflix 第一代网关 sidecar spring-cloud-netflix 多语言 ribbon spring-cloud-netflix 负载均衡 hystrix spring-cloud-netflix 熔断器 turbine spring-cloud-netflix 集群监控器 feign spring-cloud-openfeign 声明式 http 客户端 consul spring-cloud-sonsul 注册中心 gateway spring-cloud-gateway 第二代网关 sleuth spring-cloud-sleuth</description>
    </item>
    
    <item>
      <title>OKR笔记</title>
      <link>https://emacsist.github.io/2019/02/18/okr%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 18 Feb 2019 14:07:55 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/02/18/okr%E7%AC%94%E8%AE%B0/</guid>
      <description>无法达成目标的五个关键因素 没有给目标设置优先级 缺乏充分沟通, 导致没能准确理解目标 没有做好计划 没有把时间花在重要的事情上 轻易放弃 OKR 的基本原理 原</description>
    </item>
    
    <item>
      <title>读 &lt;Latex入门&gt; 的笔记</title>
      <link>https://emacsist.github.io/2019/01/06/%E8%AF%BB-latex%E5%85%A5%E9%97%A8-%E7%9A%84%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 06 Jan 2019 14:05:49 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/01/06/%E8%AF%BB-latex%E5%85%A5%E9%97%A8-%E7%9A%84%E7%AC%94%E8%AE%B0/</guid>
      <description>读 的笔记 安装 http://tug.org/texlive/ 中文 \documentclass[UTF8,nofonts]{ctexart} \setCJKmainfont[BoldFont=STHeiti,ItalicFont=STKaiti]{STSong} \setCJKsansfont[BoldFont=STHeiti]{STXihei} \setCJKmonofont{STFangsong} \begin{document} 文章内容。 \end{document} 简单版 \documentclass[UTF8]{ctexart} \begin{document} 中文 \end{document} 输入字母 这表示左边的字母, 可以用右边的 \X 来生成. 同时输入多种语言的字母 \usepackage[greek, english]{babel} 然后就可以</description>
    </item>
    
    <item>
      <title>GnuPG2使用指北</title>
      <link>https://emacsist.github.io/2019/01/01/gnupg2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</link>
      <pubDate>Tue, 01 Jan 2019 12:03:37 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/01/01/gnupg2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</guid>
      <description>测试环境为 mac gpg &amp;ndash;version gpg (GnuPG) 2.2.11 libgcrypt 1.8.4 Copyright &amp;copy; 2018 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later https://gnu.org/licenses/gpl.html This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /tmp/gnupg Supported algorithms: Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,</description>
    </item>
    
    <item>
      <title>浮点数在计算机内部表示原理</title>
      <link>https://emacsist.github.io/2018/12/30/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E9%83%A8%E8%A1%A8%E7%A4%BA%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 30 Dec 2018 20:12:58 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/12/30/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E9%83%A8%E8%A1%A8%E7%A4%BA%E5%8E%9F%E7%90%86/</guid>
      <description>科学计数法 浮点数在计算机表示中, 是以科学计数法来表示的. $$ -4.86 * 10^{11} \text { } = -4.86 * e11 $$ $$ 即 \text { } A * 10^N \text { } 等同于 \text { }AeN $$ 其中 A 满足 1&amp;lt;=|a|&amp;lt;10 一个科学计数</description>
    </item>
    
    <item>
      <title>&lt;Apache Kafka实践&gt;读书笔记</title>
      <link>https://emacsist.github.io/2018/12/27/apache-kafka%E5%AE%9E%E8%B7%B5%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 27 Dec 2018 11:26:50 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/12/27/apache-kafka%E5%AE%9E%E8%B7%B5%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>Kafka 版本 kafka_2.11-1.0.0.tar.gz 2.11 : 表示的是 Scala 语言版本 1.0.0 : 表示的是 Kafka 的版本 下载安装及使用 Download cd ~/Downloads tar -xvf kafka_2.11-1.0.0.tgz cd kafka_2.11-1.0.0 启动 要先安装好 Java 环境. 至少 JDK 1.7 及以上版本 zookeeper bin/zookeeper-server-start.sh config/zookeeper.properties 后台运行的话:</description>
    </item>
    
    <item>
      <title>&lt;Druid实时大数据分析原理实践&gt;读书笔记</title>
      <link>https://emacsist.github.io/2018/12/25/druid%E5%AE%9E%E6%97%B6%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%8E%9F%E7%90%86%E5%AE%9E%E8%B7%B5%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 25 Dec 2018 11:38:14 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/12/25/druid%E5%AE%9E%E6%97%B6%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%8E%9F%E7%90%86%E5%AE%9E%E8%B7%B5%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>数据导入 定义数据源 数据格式 时间列( timestamp ) 每个数据集合都必须有时间列. 这个列是数据聚合的重要维度. 所有的查询都需要指定查询时间范围 维度列( dimension) 用来</description>
    </item>
    
    <item>
      <title>MySQL JDBC中字符集设置简要分析</title>
      <link>https://emacsist.github.io/2018/12/03/mysql-jdbc%E4%B8%AD%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AE%BE%E7%BD%AE%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 03 Dec 2018 17:27:52 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/12/03/mysql-jdbc%E4%B8%AD%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AE%BE%E7%BD%AE%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/</guid>
      <description>起因 公司的MySQL服务器编译的时候使用的是 UTF-8(即 utf8mb3), 在需要使用 utf8mb4 的字段上, 才显式设置为 utf8mb4. 环境 MySQL 5.6.21, 端口 3308 Ubuntu 14.04 64位 JDBC使用的连接字</description>
    </item>
    
    <item>
      <title>Spring中XML与JavaBean相互转换</title>
      <link>https://emacsist.github.io/2018/11/09/spring%E4%B8%ADxml%E4%B8%8Ejavabean%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 09 Nov 2018 16:55:48 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/11/09/spring%E4%B8%ADxml%E4%B8%8Ejavabean%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</guid>
      <description>private static final ObjectMapper objectMapper = new XmlMapper(); public static &amp;lt;T&amp;gt; T xmlToObj(final String data, Class&amp;lt;T&amp;gt; clazz) { try { return objectMapper.readValue(data, clazz); } catch (Exception e) { log.error(&amp;quot;{}&amp;quot;, data); log.error(e.getMessage(), e); } return null; } public static String objToXML(final Object object) { try { return objectMapper.writeValueAsString(object); } catch (JsonProcessingException e) { log.error(e.getMessage(), e); } return &amp;quot;&amp;quot;; } //这个虽然是写着 JsonIgnoreProperties , 但</description>
    </item>
    
    <item>
      <title>[翻译]calibre中的recipes的API文档</title>
      <link>https://emacsist.github.io/2018/10/31/%E7%BF%BB%E8%AF%91calibre%E4%B8%AD%E7%9A%84recipes%E7%9A%84api%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 31 Oct 2018 10:49:44 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/10/31/%E7%BF%BB%E8%AF%91calibre%E4%B8%AD%E7%9A%84recipes%E7%9A%84api%E6%96%87%E6%A1%A3/</guid>
      <description>原文 class calibre.web.feeds.news.BasicNewsRecipe(options, log, progress_reporter)[source] 包含所有 recipe 所需逻辑的基类. 通过逐步覆盖此类中的更多功能, 你可以逐步实现更多自定义/强大的 recipe . 有关创建 recipe 的教程, 可参考 添加你喜欢的</description>
    </item>
    
    <item>
      <title>Java中的文件锁</title>
      <link>https://emacsist.github.io/2018/10/30/java%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E9%94%81/</link>
      <pubDate>Tue, 30 Oct 2018 12:02:21 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/10/30/java%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E9%94%81/</guid>
      <description>假设这情况情况, 同一台服务器上有个服务有两个进程(一般用作负载均衡, 以及在更新时切换使用). 有个定时任务, 但只需要其中之一执行就可以了. 添加</description>
    </item>
    
    <item>
      <title>Python数据可视化demo</title>
      <link>https://emacsist.github.io/2018/10/26/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96demo/</link>
      <pubDate>Fri, 26 Oct 2018 16:50:39 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/10/26/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96demo/</guid>
      <description>要安装好以下依赖 pyecharts + panda + sqlite3 import sqlite3 import pandas as pd from pyecharts import Line with sqlite3.connect(&#39;csi_indices.db&#39;) as con: # read_sql_query和read_sql都能通过SQL语句从数据库文件中获取数</description>
    </item>
    
    <item>
      <title>为100亿内的数字建立md5彩虹表的数据仓库</title>
      <link>https://emacsist.github.io/2018/10/22/%E4%B8%BA100%E4%BA%BF%E5%86%85%E7%9A%84%E6%95%B0%E5%AD%97%E5%BB%BA%E7%AB%8Bmd5%E5%BD%A9%E8%99%B9%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 22 Oct 2018 16:13:18 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/10/22/%E4%B8%BA100%E4%BA%BF%E5%86%85%E7%9A%84%E6%95%B0%E5%AD%97%E5%BB%BA%E7%AB%8Bmd5%E5%BD%A9%E8%99%B9%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</guid>
      <description>思路 创建多张表, 规则如下(节省存储) 取 md5 的前2位作为后缀, 创建表名为 uid_${md5前2位字符} . 表结构如下 CREATE TABLE uid_xx ( uid UInt64, md5hash String ) ENGINE = MergeTree PARTITION BY substring(md5hash,</description>
    </item>
    
    <item>
      <title>Java中读取ClassPath中的资源</title>
      <link>https://emacsist.github.io/2018/10/17/java%E4%B8%AD%E8%AF%BB%E5%8F%96classpath%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90/</link>
      <pubDate>Wed, 17 Oct 2018 14:58:09 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/10/17/java%E4%B8%AD%E8%AF%BB%E5%8F%96classpath%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90/</guid>
      <description>假设有个代码目录结构为 java ├── hello │ └── world │ ├── Test.java │ └── hello.txt └── hello1.txt 则可以这样子读取 hello.txt 和 hello1.txt 的资源 class 方式 package hello.world; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.stream.Collectors; public class Test { public static</description>
    </item>
    
    <item>
      <title>&lt;Java 9模块化开发&gt;读书笔记</title>
      <link>https://emacsist.github.io/2018/10/12/java-9%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 12 Oct 2018 16:00:28 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/10/12/java-9%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>模块描述符 module-info.java module your.module.name { //表示依赖某个模块. 即没有传递性的依赖. requires other.module.name; //表示依赖某个模块. 具有传递性的依赖 requires transitive other.module.name; //从当前模块中导出某些包, 以提</description>
    </item>
    
    <item>
      <title>SpringBoot自定义starter</title>
      <link>https://emacsist.github.io/2018/08/14/springboot%E8%87%AA%E5%AE%9A%E4%B9%89starter/</link>
      <pubDate>Tue, 14 Aug 2018 19:00:44 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/08/14/springboot%E8%87%AA%E5%AE%9A%E4%B9%89starter/</guid>
      <description>pom.xml &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.3.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-autoconfigure&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.25&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.code.gson&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;gson&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${guava.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;distributionManagement&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;uniweibo&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;uniweibo&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://10.0.0.40:8081/repository/uniweibo/&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/distributionManagement&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt; &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; 上面的,</description>
    </item>
    
    <item>
      <title>ThreadPoolExecutor中的异常捕获</title>
      <link>https://emacsist.github.io/2018/08/08/threadpoolexecutor%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</link>
      <pubDate>Wed, 08 Aug 2018 15:52:27 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/08/08/threadpoolexecutor%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</guid>
      <description>现象 线上服务日志发现有中断(即日志前面有打印, 但后面的日志没打印), 并且又没有异常信息输出. 原因 代码示例 private static final ThreadPoolTaskExecutor THREAD_POOL_TASK_EXECUTOR = new ThreadPoolTaskExecutor(); static { THREAD_POOL_TASK_EXECUTOR.setQueueCapacity(10000); THREAD_POOL_TASK_EXECUTOR.setDaemon(true); THREAD_POOL_TASK_EXECUTOR.setThreadNamePrefix(&amp;quot;global-%d&amp;quot;); THREAD_POOL_TASK_EXECUTOR.setRejectedExecutionHandler((r, executor) -&amp;gt; { L</description>
    </item>
    
    <item>
      <title>SpringBoot结合InfluxDB收集监控统计信息</title>
      <link>https://emacsist.github.io/2018/08/07/springboot%E7%BB%93%E5%90%88influxdb%E6%94%B6%E9%9B%86%E7%9B%91%E6%8E%A7%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Tue, 07 Aug 2018 15:37:42 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/08/07/springboot%E7%BB%93%E5%90%88influxdb%E6%94%B6%E9%9B%86%E7%9B%91%E6%8E%A7%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF/</guid>
      <description>pom.xml &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 统计信息输出到 influxdb --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.micrometer&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;micrometer-registry-influx&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; application.properties #### Spring Boot 监控 management.metrics.export.influx.enabled=true management.metrics.export.influx.auto-create-db=true management.metrics.export.influx.db=app_met</description>
    </item>
    
    <item>
      <title>SpringBoot结合MyBatis配置多数据源</title>
      <link>https://emacsist.github.io/2018/08/07/springboot%E7%BB%93%E5%90%88mybatis%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</link>
      <pubDate>Tue, 07 Aug 2018 15:15:49 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/08/07/springboot%E7%BB%93%E5%90%88mybatis%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</guid>
      <description>application.properties # mysql spring.datasource.jdbc-url=@config.jdbc.url@ spring.datasource.driver-class-name=com.mysql.jdbc.Driver spring.datasource.username=@config.jdbc.username@ spring.datasource.password=@config.jdbc.password@ # clickhouse ## clickhouse spring.clickhouse.jdbc-url=@config.clickhouse.url@ spring.clickhouse.driver-class-name=ru.yandex.clickhouse.ClickHouseDriver spring.clickhouse.username= spring.clickhouse.password= Java 代码配置 主 datasource package com.uniweibo.config; import org.apache.ibatis.session.SqlSessionFactory; import org.mybatis.spring.SqlSessionFactoryBean; import org.mybatis.spring.annotation.MapperScan; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.boot.jdbc.DataSourceBuilder; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Primary; import org.springframework.core.io.ClassPathResource; import javax.sql.DataSource; @Configuration @MapperScan(basePackages = {&amp;quot;com.uniweibo.dao.mapper&amp;quot;, &amp;quot;com.uniweibo.meitu.dao.mapper&amp;quot;, &amp;quot;com.uniweibo.xiaomi.dao.mapper&amp;quot;}, sqlSessionFactoryRef = &amp;quot;sqlSessionFactory&amp;quot; ) public class AppDataSourceConfig { /** 配置文件名, 放在 classpath</description>
    </item>
    
    <item>
      <title>从传统SpringMVC迁移到SpringBoot</title>
      <link>https://emacsist.github.io/2018/07/27/%E4%BB%8E%E4%BC%A0%E7%BB%9Fspringmvc%E8%BF%81%E7%A7%BB%E5%88%B0springboot/</link>
      <pubDate>Fri, 27 Jul 2018 16:57:33 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/07/27/%E4%BB%8E%E4%BC%A0%E7%BB%9Fspringmvc%E8%BF%81%E7%A7%BB%E5%88%B0springboot/</guid>
      <description>本文的迁移背景是: JDK7 + SpringMVC + 传统的 web.xml + 外部Tomcat 迁移到 JDK8 + SpringBoot2 + 嵌入式的Tomcat pom 注意事项 &amp;lt;build&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;**/*.*&amp;lt;/include&amp;gt; &amp;lt;!--&amp;lt;include&amp;gt;**/*.json&amp;lt;/include&amp;gt;--&amp;gt; &amp;lt;!--&amp;lt;include&amp;gt;**/*.properties&amp;lt;/include&amp;gt;--&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;**/*.*&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt; &amp;lt;/build&amp;gt; 改造 web.xml</description>
    </item>
    
    <item>
      <title>Java Metrics&#43;Grafana&#43;InfluxDB搭建监控系统</title>
      <link>https://emacsist.github.io/2018/07/09/java-metrics-grafana-influxdb%E6%90%AD%E5%BB%BA%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 09 Jul 2018 18:10:02 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/07/09/java-metrics-grafana-influxdb%E6%90%AD%E5%BB%BA%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</guid>
      <description>以下的测试, 都是基于 Ubuntu 14.04.2 LTS + Java 8 + SpringBoot Grafana 安装 sudo echo &amp;quot;deb https://packagecloud.io/grafana/stable/debian/ stretch main&amp;quot; &amp;gt; /etc/apt/sources.list.d/grafana.list curl https://packagecloud.io/gpg.key | sudo apt-key add - sudo apt-get update -y ; sudo apt-get install grafana 启动/停止 sudo service grafana-server start sudo service grafana-server stop 登录: http://127.0.0.1:3000 默认的用户名和密</description>
    </item>
    
    <item>
      <title>ClickHouse入门记录</title>
      <link>https://emacsist.github.io/2018/06/22/clickhouse%E5%85%A5%E9%97%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 22 Jun 2018 11:24:13 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/22/clickhouse%E5%85%A5%E9%97%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>安装 我写了个脚本放在 gist 可以执行以下命令来自动安装: curl -L https://gist.githubusercontent.com/emacsist/ebb98839c814cdb2f16e20efcef9474e/raw/aa8e035ad2e61fa74f4c904a7953806c62155fa3/install-clickhouse.sh | bash 下面是脚本的完整内容: #!/usr/bin/env bash grep -q sse4_2 /proc/cpuinfo &amp;amp;&amp;amp; echo &amp;quot;SSE 4.2 supported&amp;quot; || echo &amp;quot;SSE 4.2 not supported&amp;quot; grep -q sse4_2 /proc/cpuinfo || exit 1 sudo echo &amp;quot;deb http://repo.yandex.ru/clickhouse/deb/stable/ main/&amp;quot;</description>
    </item>
    
    <item>
      <title>Netty与epoll资料收集</title>
      <link>https://emacsist.github.io/2018/06/20/netty%E4%B8%8Eepoll%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</link>
      <pubDate>Wed, 20 Jun 2018 16:04:14 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/20/netty%E4%B8%8Eepoll%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</guid>
      <description>为什么 Netty 支持 native epoll ? stackoverflow.com Netty 的 epoll transport 使用 epoll edge-triggered , 而 java 的 NIO 库珍的是 level-triggered. 除此之外, epoll transport 暴露了一些在 Java NIO 中没出现的配置项, 例如: TCP_CORK, SO_REUSEPORT 等等. 什么是 edge-triggered 和 level-triggered? stackexchange 我没有</description>
    </item>
    
    <item>
      <title>[翻译]The Unspoken   the Why of GC Ergonomics</title>
      <link>https://emacsist.github.io/2018/06/13/%E7%BF%BB%E8%AF%91the-unspoken-the-why-of-gc-ergonomics/</link>
      <pubDate>Wed, 13 Jun 2018 12:23:53 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/13/%E7%BF%BB%E8%AF%91the-unspoken-the-why-of-gc-ergonomics/</guid>
      <description>你有使用GC工效学(即:让GC自动调整), 使用带有 -XX:+UseAdaptiveSizePolicy 选项的 UseParallelGC 收集器? 该 GC 的工效学的杰出之处在于它试图增大或缩小堆以达到指定的目标. 你可以选择</description>
    </item>
    
    <item>
      <title>[翻译]The Unspoken Application Time</title>
      <link>https://emacsist.github.io/2018/06/13/%E7%BF%BB%E8%AF%91the-unspoken-application-time/</link>
      <pubDate>Wed, 13 Jun 2018 11:48:24 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/13/%E7%BF%BB%E8%AF%91the-unspoken-application-time/</guid>
      <description>原文 有时, 你会对你的应用程序会在GC之间执行执行多久感兴趣. 这可从GC日志中计算出来, 但一个方便的方式来查看这个信息是通过命令行选项 -XX:+PrintGCApplicationStoppedTime 以及 -XX:+PrintGCApplicationConcurrentTime</description>
    </item>
    
    <item>
      <title>[翻译]Oracle JDK 1.7.0_04 及之后可用的GC</title>
      <link>https://emacsist.github.io/2018/06/12/%E7%BF%BB%E8%AF%91oracle-jdk-1.7.0_04-%E5%8F%8A%E4%B9%8B%E5%90%8E%E5%8F%AF%E7%94%A8%E7%9A%84gc/</link>
      <pubDate>Tue, 12 Jun 2018 17:37:14 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/12/%E7%BF%BB%E8%AF%91oracle-jdk-1.7.0_04-%E5%8F%8A%E4%B9%8B%E5%90%8E%E5%8F%AF%E7%94%A8%E7%9A%84gc/</guid>
      <description>原文 Jack Shirazi 告诉你 Oracle Java 7 update 4 及更高版本可以使用哪些GC和GC的组合, 包括Java 8 和Java9 发布日期: June 2012, 更新日期: September 2015, 作者 Jack Shirazi 注意, 这已经更</description>
    </item>
    
    <item>
      <title>[翻译]GC 调优指南(简要翻译)</title>
      <link>https://emacsist.github.io/2018/06/08/%E7%BF%BB%E8%AF%91gc-%E8%B0%83%E4%BC%98%E6%8C%87%E5%8D%97%E7%AE%80%E8%A6%81%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Fri, 08 Jun 2018 11:35:10 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/08/%E7%BF%BB%E8%AF%91gc-%E8%B0%83%E4%BC%98%E6%8C%87%E5%8D%97%E7%AE%80%E8%A6%81%E7%BF%BB%E8%AF%91/</guid>
      <description>GC, heap 和 Runtime Compiler 的默认选项 服务器级的典型机器是被定义为以下的条件: 2 个或更多的物理CPU 2 GB或更多的物理内存 在一个服务器级的机器中, 默认的选项是</description>
    </item>
    
    <item>
      <title>Java中多线程环境使用Random</title>
      <link>https://emacsist.github.io/2018/06/04/java%E4%B8%AD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8random/</link>
      <pubDate>Mon, 04 Jun 2018 17:13:26 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/04/java%E4%B8%AD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8random/</guid>
      <description>Random 根据 JDK 文档介绍, 它是线程安全的. Instances of {@code java.util.Random} are threadsafe. 但文档中说, 在跨线程使用 Random 时, 它的性能比较低下. ThreadLocalRandom 这个是在 JDK &amp;gt;= 1.7 时出现的, 当在多线程环境中使用</description>
    </item>
    
    <item>
      <title>Java开启远程VisualVM中的VisualGC</title>
      <link>https://emacsist.github.io/2018/06/01/java%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8Bvisualvm%E4%B8%AD%E7%9A%84visualgc/</link>
      <pubDate>Fri, 01 Jun 2018 14:44:19 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/01/java%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8Bvisualvm%E4%B8%AD%E7%9A%84visualgc/</guid>
      <description>开启远程Debug # jdk &amp;lt; java9 之前(默认监听所有) -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=n # jdk &amp;gt;= java9(默认只监听本地, 所以要 *:端口, 开启远程) -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=*:4000,suspend=n 开启 JMX -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false 开启 Jstatd 只有</description>
    </item>
    
    <item>
      <title>&lt;高手&gt;读书笔记之科学决策</title>
      <link>https://emacsist.github.io/2018/05/26/%E9%AB%98%E6%89%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%A7%91%E5%AD%A6%E5%86%B3%E7%AD%96/</link>
      <pubDate>Sat, 26 May 2018 18:10:20 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/26/%E9%AB%98%E6%89%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%A7%91%E5%AD%A6%E5%86%B3%E7%AD%96/</guid>
      <description>一: 扩充你的选项 一般人的做法是从现有选项里选, 而正确的做法是想想你能不能给自己增加几个选项 二: 用现实检验你的观点 这一步, 人们常犯的错误是 确认</description>
    </item>
    
    <item>
      <title>Nginx 在 DSP 广告系统中的优化</title>
      <link>https://emacsist.github.io/2018/05/26/nginx-%E5%9C%A8-dsp-%E5%B9%BF%E5%91%8A%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 26 May 2018 16:26:05 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/26/nginx-%E5%9C%A8-dsp-%E5%B9%BF%E5%91%8A%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>环境: Distributor ID: Ubuntu Description: Ubuntu 16.04.2 LTS Release: 16.04 Codename: xenial nginx version: openresty/1.11.2.5 8核心 Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz 16GB 物理内存 limit $ulimit -a core file size (blocks, -c) 0 data seg size (kbytes, -d) unlimited scheduling priority (-e) 0 file size (blocks, -f) unlimited pending signals (-i) 64045 max locked memory (kbytes, -l) 64 max memory size (kbytes,</description>
    </item>
    
    <item>
      <title>Java 8 中流式API性能基准测试</title>
      <link>https://emacsist.github.io/2018/05/23/java-8-%E4%B8%AD%E6%B5%81%E5%BC%8Fapi%E6%80%A7%E8%83%BD%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 23 May 2018 12:24:02 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/23/java-8-%E4%B8%AD%E6%B5%81%E5%BC%8Fapi%E6%80%A7%E8%83%BD%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</guid>
      <description>测试代码 package hello.test; import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder; import java.util.Arrays; import java.util.concurrent.TimeUnit; @BenchmarkMode(Mode.Throughput) @OutputTimeUnit(TimeUnit.MILLISECONDS) @State(Scope.Thread) public class BenchmarkTest { public static final String[] BRAND_ARRAY = {&amp;quot;iphone&amp;quot;, &amp;quot;huawei&amp;quot;, &amp;quot;xiaomi&amp;quot;, &amp;quot;samsung&amp;quot;, &amp;quot;vivo&amp;quot;, &amp;quot;bbk&amp;quot;, &amp;quot;oppo&amp;quot;, &amp;quot;meizu&amp;quot;, &amp;quot;sony&amp;quot;, &amp;quot;xperia&amp;quot;, &amp;quot;htc&amp;quot;, &amp;quot;oneplus&amp;quot;, &amp;quot;smartisan&amp;quot;, &amp;quot;lenovo&amp;quot;, &amp;quot;gionee&amp;quot;, &amp;quot;nubia&amp;quot;, &amp;quot;letv&amp;quot;, &amp;quot;vertu&amp;quot;}; private static final String bidRequestModel = &amp;quot;oneplus&amp;quot;; @Benchmark public static String findBidrequstBrandByStream() { final String lowBidRequestModel = bidRequestModel.toLowerCase(); return</description>
    </item>
    
    <item>
      <title>Java 8 指南</title>
      <link>https://emacsist.github.io/2018/05/21/java-8-%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 21 May 2018 18:02:45 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/21/java-8-%E6%8C%87%E5%8D%97/</guid>
      <description>参考资料 比较器 以前的用法: Comparator&amp;lt;Developer&amp;gt; byName = new Comparator&amp;lt;Developer&amp;gt;() { @Override public int compare(Developer o1, Developer o2) { return o1.getName().compareTo(o2.getName()); } }; lambda: Comparator&amp;lt;Developer&amp;gt; byName = (Developer o1, Developer o2)-&amp;gt;o1.getName().compareTo(o2.getName()); Map, List 中的 forEach Map Map&amp;lt;String, Integer&amp;gt; items = new HashMap&amp;lt;&amp;gt;(); items.forEach((k,v)-&amp;gt;System.out.println(&amp;quot;Item : &amp;quot; + k + &amp;quot; Count : &amp;quot; + v)); List List&amp;lt;String&amp;gt; items = new ArrayList&amp;lt;&amp;gt;(); items.forEach(item-&amp;gt;System.out.println(item));</description>
    </item>
    
    <item>
      <title>基于Netty的简单HTTP服务例子</title>
      <link>https://emacsist.github.io/2018/05/18/%E5%9F%BA%E4%BA%8Enetty%E7%9A%84%E7%AE%80%E5%8D%95http%E6%9C%8D%E5%8A%A1%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Fri, 18 May 2018 16:54:08 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/18/%E5%9F%BA%E4%BA%8Enetty%E7%9A%84%E7%AE%80%E5%8D%95http%E6%9C%8D%E5%8A%A1%E4%BE%8B%E5%AD%90/</guid>
      <description>例子是基于 Netty 4.1.25.Final + Spring Boot 2 + JDK 1.8 + Maven github netty http demo AppInitializer.java package io.github.emacsist.netty.httpdemo.config; import io.github.emacsist.netty.httpdemo.handler.AppHandler; import io.netty.channel.Channel; import io.netty.channel.ChannelHandler; import io.netty.channel.ChannelInitializer; import io.netty.channel.ChannelPipeline; import io.netty.handler.codec.http.HttpObjectAggregator; import io.netty.handler.codec.http.HttpServerCodec; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; /** * @author emacsist */ @Component @ChannelHandler.Sharable public class AppInitializer extends ChannelInitializer { private static final int MB = 1024 * 1024; @Autowired private AppHandler appHandler; @Override protected void</description>
    </item>
    
    <item>
      <title>Java8 日期时间API</title>
      <link>https://emacsist.github.io/2018/05/18/java8-%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4api/</link>
      <pubDate>Fri, 18 May 2018 13:45:36 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/18/java8-%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4api/</guid>
      <description>Java 8 中, 将日期和时间, 以及日期时间可以分别处理的 获取当前日期 LocalDate.now(); //2018-05-18 获取当前时间 LocalTime.now(); //13:48:37.127 去掉纳秒: LocalTime.now().withNano(0); //13:49:03 格式化日期 DateTimeFormatter 对象是不可变的, 也就是线程安全的~</description>
    </item>
    
    <item>
      <title>[翻译]gRPC与deadlines</title>
      <link>https://emacsist.github.io/2018/05/16/%E7%BF%BB%E8%AF%91grpc%E4%B8%8Edeadlines/</link>
      <pubDate>Wed, 16 May 2018 15:09:00 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/16/%E7%BF%BB%E8%AF%91grpc%E4%B8%8Edeadlines/</guid>
      <description>原文: gRPC and Deadlines gRPC 与 Deadlines TL;DR(Too long, Don&amp;rsquo;t read 的首字母缩写, 也用于句首的消息摘要): 总是设置 deadline . 这篇文章解释了为什么我们建议要有意设置 deadlines, 以及展示了一些代码片断来</description>
    </item>
    
    <item>
      <title>Java生成词云</title>
      <link>https://emacsist.github.io/2018/05/15/java%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/</link>
      <pubDate>Tue, 15 May 2018 11:32:31 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/15/java%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/</guid>
      <description>github kumo 遇到Linux环境下, 中文显示不正常, 这是因为Linux环境中, 字体设置不正确导致的.这个可以参考 issue Java中安装字体 全局VM 将字体文件</description>
    </item>
    
    <item>
      <title>Netty粘包和拆包资料收集</title>
      <link>https://emacsist.github.io/2018/05/03/netty%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</link>
      <pubDate>Thu, 03 May 2018 12:28:35 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/03/netty%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</guid>
      <description>维基百科对 TCP 的定义为: 传输控制协议（英语：Transmission Control Protocol，缩写为 TCP）是一种面向连接的、可靠的、基于字节流的传</description>
    </item>
    
    <item>
      <title>Netty中常见的IllegalReferenceCountException异常原因及解决</title>
      <link>https://emacsist.github.io/2018/04/28/netty%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84illegalreferencecountexception%E5%BC%82%E5%B8%B8%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Sat, 28 Apr 2018 17:52:30 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/28/netty%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84illegalreferencecountexception%E5%BC%82%E5%B8%B8%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3/</guid>
      <description>问题代码 package hello.in; import io.netty.buffer.ByteBuf; import io.netty.buffer.ByteBufUtil; import io.netty.channel.ChannelHandlerContext; import io.netty.channel.SimpleChannelInboundHandler; import io.netty.handler.codec.http.DefaultFullHttpResponse; import io.netty.handler.codec.http.HttpContent; import io.netty.handler.codec.http.HttpResponseStatus; import io.netty.handler.codec.http.HttpVersion; public class EchoHandler extends SimpleChannelInboundHandler&amp;lt;HttpContent&amp;gt; { @Override protected void channelRead0(final ChannelHandlerContext ctx, final HttpContent msg) { System.out.println(&amp;quot;收到&amp;quot</description>
    </item>
    
    <item>
      <title>[翻译]Netty中的引用计数对象</title>
      <link>https://emacsist.github.io/2018/04/28/%E7%BF%BB%E8%AF%91netty%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 28 Apr 2018 12:38:50 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/28/%E7%BF%BB%E8%AF%91netty%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%AF%B9%E8%B1%A1/</guid>
      <description>原文 http://netty.io/wiki/reference-counted-objects.html 从 Netty 4 版本开始, 某些对象的生命周期是通过它们的引用计数来进行管理, 当它不再被使用时, 方便 Netty 尽可能快地可以回收它们(或者它们共享的资源)</description>
    </item>
    
    <item>
      <title>Jackson序列化没有get, Set方法的POJO</title>
      <link>https://emacsist.github.io/2018/04/28/jackson%E5%BA%8F%E5%88%97%E5%8C%96%E6%B2%A1%E6%9C%89get-set%E6%96%B9%E6%B3%95%E7%9A%84pojo/</link>
      <pubDate>Sat, 28 Apr 2018 10:58:11 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/28/jackson%E5%BA%8F%E5%88%97%E5%8C%96%E6%B2%A1%E6%9C%89get-set%E6%96%B9%E6%B3%95%E7%9A%84pojo/</guid>
      <description>异常 重现代码 @Test public void testObjectMapper() throws JsonProcessingException { ObjectMapper objectMapper = new ObjectMapper(); Man man = new Man(); System.out.println(objectMapper.writeValueAsString(man)); } public static class Man { private int age; private String name; } 当 Jackson 遇到没有 getter, setter 方法的 POJO 时, 会抛出这个异常: com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class JUnitTest$Man and no properties discovered</description>
    </item>
    
    <item>
      <title>[翻译]Netty4中 Ctx.close 与 Ctx.channel.close 的区别</title>
      <link>https://emacsist.github.io/2018/04/27/%E7%BF%BB%E8%AF%91netty4%E4%B8%AD-ctx.close-%E4%B8%8E-ctx.channel.close-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 27 Apr 2018 16:48:32 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/27/%E7%BF%BB%E8%AF%91netty4%E4%B8%AD-ctx.close-%E4%B8%8E-ctx.channel.close-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>翻译 原文 stackoverflow 让我们假设在 pipeline 里有三个 handlers , 它们都都拦截 close() 方法操作, 并且在面里调用 ctx.close() ChannelPipeline p = ...; p.addLast(&amp;quot;A&amp;quot;, new SomeHandler()); p.addLast(&amp;quot;B&amp;quot;, new SomeHandler()); p.addLast(&amp;quot;C&amp;quot;, new SomeHandler()); ... public class SomeHandler extends ChannelOutboundHandlerAdapter { @Override public void close(ChannelHandlerContext ctx, ChannelPromise promise) { ctx.close(promise); } } Channel.close()</description>
    </item>
    
    <item>
      <title>从Hexo到Hugo</title>
      <link>https://emacsist.github.io/2018/04/26/%E4%BB%8Ehexo%E5%88%B0hugo/</link>
      <pubDate>Thu, 26 Apr 2018 22:25:08 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/26/%E4%BB%8Ehexo%E5%88%B0hugo/</guid>
      <description>缘起 用了好几年 Hexo , 但发现它生成站点的速度和性能是越来越慢, 我的博客生成一次要10多分钟, 作为一名程序员, 真的是受不了还有比Java项目打包耗</description>
    </item>
    
    <item>
      <title>Netty 中的流控与统计</title>
      <link>https://emacsist.github.io/2018/04/26/netty-%E4%B8%AD%E7%9A%84%E6%B5%81%E6%8E%A7%E4%B8%8E%E7%BB%9F%E8%AE%A1/</link>
      <pubDate>Thu, 26 Apr 2018 14:22:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/26/netty-%E4%B8%AD%E7%9A%84%E6%B5%81%E6%8E%A7%E4%B8%8E%E7%BB%9F%E8%AE%A1/</guid>
      <description>Netty 流量相关的包 io.netty.handler.traffic ChannelTrafficShapingHandler : Channel 级别的 GlobalChannelTrafficShapingHandler : 全局级别的(无论打开多少Channel) 以及 每条 Channel 级别的 GlobalTrafficShapingHandler : 全局级别的 具体构造, 可以参考它们的相关构造函数和</description>
    </item>
    
    <item>
      <title>Netty资料收集与整理</title>
      <link>https://emacsist.github.io/2018/04/24/netty%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 24 Apr 2018 15:57:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/24/netty%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</guid>
      <description>ChannelInitializer 它每次在 Channel 初始化时都会进行调用.一般会在这里, 初始化相应的编码器和解码器以及相应的 Handler. 例如 @Override protected void initChannel(final Channel ch) { ChannelPipeline p = ch.pipeline(); p.addLast(new HttpRequestDecoder()); p.addLast(new HttpResponseEncoder()); p.addLast(new HelloHandler()); } 为了调试, 我这</description>
    </item>
    
    <item>
      <title>Socket参数资料收集与整理</title>
      <link>https://emacsist.github.io/2018/04/24/socket%E5%8F%82%E6%95%B0%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 24 Apr 2018 09:51:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/24/socket%E5%8F%82%E6%95%B0%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</guid>
      <description>最近在看 &amp;lt;Unix 网络编程&amp;gt; 这本书, 发现好多关于网络编程的细节参数, 所以这里做个整理和总结. socket 状态转换图 TCP 标志位解释 维基百科 Flags (9 bits) (aka Control bits) . Contains 9</description>
    </item>
    
    <item>
      <title>tcpdump使用</title>
      <link>https://emacsist.github.io/2018/04/23/tcpdump%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 23 Apr 2018 17:00:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/23/tcpdump%E4%BD%BF%E7%94%A8/</guid>
      <description>以下所有示例都是在 macbook 下测试. 局域网地址为: 10.0.0.68 查看哪个网卡可以被监听 sudo tcpdump -D 输出结果: 1.en0 [Up, Running] 2.p2p0 [Up, Running] 3.awdl0 [Up, Running] 4.bridge0 [Up, Running] 5.utun0 [Up, Running] 6.en1 [Up, Running] 7.utun1 [Up, Running] 8.en2 [Up, Running] 9.lo0 [Up, Running, Loopback] 10.gif0</description>
    </item>
    
    <item>
      <title>位操作总结</title>
      <link>https://emacsist.github.io/2018/04/19/%E4%BD%8D%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 19 Apr 2018 14:20:52 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/19/%E4%BD%8D%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</guid>
      <description>注意 位, 是从最右边的位数开始的, 最右边的位为第0位. 位移 左移 int a = 1 &amp;lt;&amp;lt; 0 int b = 1 &amp;lt;&amp;lt; 1 右移 int a = 1 &amp;gt;&amp;gt; 0; int b = 1 &amp;gt;&amp;gt; 1; 设置第 x 位 number |= (1 &amp;lt;&amp;lt; x) 例如: int</description>
    </item>
    
    <item>
      <title>Guava 常用代码片段</title>
      <link>https://emacsist.github.io/2018/04/17/guava-%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</link>
      <pubDate>Tue, 17 Apr 2018 17:54:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/17/guava-%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</guid>
      <description>构建不可变的 Map ImmutableMap&amp;lt;String, Integer&amp;gt; immutableMap = ImmutableMap.of(&amp;quot;k1&amp;quot;, 1, &amp;quot;k2&amp;quot;, 2); ImmutableMap&amp;lt;String, Integer&amp;gt; immutableMap2 = new ImmutableMap.Builder&amp;lt;String, Integer&amp;gt;().put(&amp;quot;k1&amp;quot;, 1).put(&amp;quot;k2&amp;quot;, 2).build(); List 转换为 List 或 List final Iterable&amp;lt;Integer&amp;gt; ages = Ints.stringConverter().convertAll(Splitter.on(&#39;,&#39;).trimResults().omitEmptyStrings().splitToList(ageArr)); Longs.stringConverter()... Floats.stringConverter()... Shorts.stringConverter()... Doubles.stringConverter()... 获取 list 的前 N 个元素 List&amp;lt;Integer&amp;gt; list = FluentIterable.from(p.getList()).limit(2).toList(); 分割 string Splitter.on(&#39;,&#39;).trimResults().omitEmptyStrings().splitToList(&amp;quot;your string&amp;quot;) 或 Splitter.on(CharMatcher.anyOf(&amp;quot;,;&amp;quot;)).trimResults().splitToList(&amp;quot;your string&amp;quot;); List to String Joiner.on(&amp;quot;,&amp;quot;).skipNulls().join(your list) Cache public static final</description>
    </item>
    
    <item>
      <title>GoReplay gor 学习和使用笔记</title>
      <link>https://emacsist.github.io/2018/04/12/goreplay-gor-%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 12 Apr 2018 14:16:35 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/12/goreplay-gor-%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>依赖 要使用 gor , 你需要先有一个 web server. 当然, 也可以使用 gor 自带的文件服务器, 启动如下: gor file-server :8000 表示将当前目录作为文件服务器的根目录, 监听端口为 8000 安装 下</description>
    </item>
    
    <item>
      <title>Guava与Spring集成时使用的注意事项</title>
      <link>https://emacsist.github.io/2018/04/08/guava%E4%B8%8Espring%E9%9B%86%E6%88%90%E6%97%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Sun, 08 Apr 2018 18:30:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/08/guava%E4%B8%8Espring%E9%9B%86%E6%88%90%E6%97%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>Bug 的起因 项目代码里, 利用了 Guava 缓存库作为本地缓存来使用, 但是构造时, 用了 Spring 注入的 properties . 示例代码如下: private static final Cache&amp;lt;Integer, Boolean&amp;gt; checkFlagCache = CacheBuilder.newBuilder().maximumSize(1000).expireAfterWrite(moneyNoCheckSec, TimeUnit.SECONDS).build(); 其中 moneyNoCheckSec 为 @Value(&amp;quot;${money.no.check.sec}&amp;quot;) private int moneyNoCheckSec; 因为这个 cache</description>
    </item>
    
    <item>
      <title>&lt;HTTP2 基础教程&gt;读书笔记</title>
      <link>https://emacsist.github.io/2018/04/07/http2-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 07 Apr 2018 12:12:01 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/07/http2-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>HTTP 进化史 HTTP/0.9 它只有一个 GET 方法, 没有首部, 设计目标是获取HTML(没有图片, 只有文本) HTTP/1.0 1996 年通过 RFC 1945 制定为 HTTP/1.0 规范(在 HTTP/0.9 版本的基础上) 首部 响应码 重</description>
    </item>
    
    <item>
      <title>Golang 中HTTP请求头 Accept-Encoding 注意事项</title>
      <link>https://emacsist.github.io/2018/04/04/golang-%E4%B8%ADhttp%E8%AF%B7%E6%B1%82%E5%A4%B4-accept-encoding-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Wed, 04 Apr 2018 11:26:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/04/golang-%E4%B8%ADhttp%E8%AF%B7%E6%B1%82%E5%A4%B4-accept-encoding-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>平时自己写了个抓取网页内容分析的小工具, 通过 Chrome 的 copy as curl 功能复制出 curl , 然后再将 curl 通过工具自动转换为 golang 的 http 请求代码, 但是HTTP response 一直返回乱码.</description>
    </item>
    
    <item>
      <title>RabbitMQ 中队列与消息持久化属性组合说明</title>
      <link>https://emacsist.github.io/2018/04/01/rabbitmq-%E4%B8%AD%E9%98%9F%E5%88%97%E4%B8%8E%E6%B6%88%E6%81%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%B1%9E%E6%80%A7%E7%BB%84%E5%90%88%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Sun, 01 Apr 2018 16:31:55 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/01/rabbitmq-%E4%B8%AD%E9%98%9F%E5%88%97%E4%B8%8E%E6%B6%88%E6%81%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%B1%9E%E6%80%A7%E7%BB%84%E5%90%88%E8%AF%B4%E6%98%8E/</guid>
      <description>Queue 队列的持久化 声明队列时, Durability 的属性值, 可以为 durable (持久的) 和 transient (短暂的). durable : 表示 RabbitMQ 重启后, 依然会存在的队列(MQ 会自动重新声明这个队列, 即有</description>
    </item>
    
    <item>
      <title>Go 的 项目依赖管理工具 dep 学习</title>
      <link>https://emacsist.github.io/2018/03/26/go-%E7%9A%84-%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-dep-%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 26 Mar 2018 16:21:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/03/26/go-%E7%9A%84-%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-dep-%E5%AD%A6%E4%B9%A0/</guid>
      <description>安装 curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh 或 mac: brew install dep brew upgrade dep 使用 参考: Go 的标准项目目录结构示例 golang-standards/project-layout 创建一个项目在 $GOPATH/src/io/emacsist/weixin (假设你的项目类似java的包 io.emacsist.weixin) 然后初始化: cd $GOPATH/src/io/emacsist/weixin dep init 然后你可</description>
    </item>
    
    <item>
      <title>[翻译]Jackson 的性能描述</title>
      <link>https://emacsist.github.io/2018/03/19/%E7%BF%BB%E8%AF%91jackson-%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%8F%E8%BF%B0/</link>
      <pubDate>Mon, 19 Mar 2018 14:16:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/03/19/%E7%BF%BB%E8%AF%91jackson-%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%8F%E8%BF%B0/</guid>
      <description>原文 项目中要测一下 jackson vs gson 的性能对比, 所以就查找了下 jackson 的性能方面的资料.发现官方文档就有很好的介绍了.特此翻译, 以备下次再查用. Jackson 的涡轮增压 尽</description>
    </item>
    
    <item>
      <title>Rust 学习笔记</title>
      <link>https://emacsist.github.io/2018/03/12/rust-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 12 Mar 2018 18:59:38 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/03/12/rust-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>安装 curl https://sh.rustup.rs -sSf | sh 成功后, 将下面代码加到 ~/.bash_profile export PATH=&amp;quot;$HOME/.cargo/bin:$PATH&amp;quot; 更新: rustup update 卸载 rustup self uninstall 创建项目 可执行项目 cargo new project_name --bin 构建项目 cargo build 它会打包到 target/debug 构建并运行项目 cargo run 发布项目 cargo</description>
    </item>
    
    <item>
      <title>Kotlin lang 学习笔记</title>
      <link>https://emacsist.github.io/2018/03/01/kotlin-lang-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 01 Mar 2018 11:25:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/03/01/kotlin-lang-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>基本语法 定义 package 不要求目录与包相匹配~: 源文件可以放在文件系统的任意位置 源文件中的所有内容, 都是通过包声明来包含的. 即: 名包.方法名 等 特别地,</description>
    </item>
    
    <item>
      <title>我的Java开发环境</title>
      <link>https://emacsist.github.io/2018/02/28/%E6%88%91%E7%9A%84java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 28 Feb 2018 15:24:31 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/02/28/%E6%88%91%E7%9A%84java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>IDEA 插件 alibaba code style CamelCase JVM Debugger Memory View Bytecode Viewer FindBugs Maven, Gradle Gradle 的性能快的一逼~ 如果能选 Gradle 则尽可能选 Gradle Maven 性能加速 开启多线程以及分层编译(加快启动) set MAVEN_OPTS=&amp;quot;-XX:+TieredCompilation -XX:TieredStopAtLevel=1&amp;quot; mvn -T 1C package [--offline] 代码质量</description>
    </item>
    
    <item>
      <title>Java logback 中的 SocketAppender 的使用及与 RabbitMQ 的性能对比</title>
      <link>https://emacsist.github.io/2018/02/23/java-logback-%E4%B8%AD%E7%9A%84-socketappender-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%B8%8E-rabbitmq-%E7%9A%84%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Fri, 23 Feb 2018 17:06:12 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/02/23/java-logback-%E4%B8%AD%E7%9A%84-socketappender-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%B8%8E-rabbitmq-%E7%9A%84%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</guid>
      <description>loback 中的 socketAppender 的配置及使用 配置文件都是用官网的示例 server &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt; &amp;lt;!-- ==================================================================== --&amp;gt; &amp;lt;!-- This config file is intended to be used by a SocketServer that logs --&amp;gt; &amp;lt;!-- events received from various clients on the console and to a file --&amp;gt; &amp;lt;!-- that is rolled over when appropriate. The interesting point to</description>
    </item>
    
    <item>
      <title>Java 中的线程池创建规则</title>
      <link>https://emacsist.github.io/2018/02/23/java-%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9B%E5%BB%BA%E8%A7%84%E5%88%99/</link>
      <pubDate>Fri, 23 Feb 2018 11:46:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/02/23/java-%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9B%E5%BB%BA%E8%A7%84%E5%88%99/</guid>
      <description></description>
    </item>
    
    <item>
      <title>RabbitMQ 批量处理时神奇的数据丢失及处理办法</title>
      <link>https://emacsist.github.io/2018/02/08/rabbitmq-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%97%B6%E7%A5%9E%E5%A5%87%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E5%8F%8A%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Thu, 08 Feb 2018 11:31:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/02/08/rabbitmq-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%97%B6%E7%A5%9E%E5%A5%87%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E5%8F%8A%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/</guid>
      <description>起因 线上DSP系统, 使用 RabbitMQ 作为竞价日志的中转站, 然后出队插入到MySQL. 于是就需要进行批量出队插入DB, 这样子性能和效率更高点. 但 RabbitMQ 自身,</description>
    </item>
    
    <item>
      <title>EK &#43; filebeat 平台搭建及使用</title>
      <link>https://emacsist.github.io/2018/02/05/ek-filebeat-%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 05 Feb 2018 12:18:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/02/05/ek-filebeat-%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>ES 依赖: &amp;gt;=JDK8 下载完直接解压即可. 开启外网IP访问 vim config/elasticsearch.yml 修改 network.host 为 network.host: 0.0.0.0 一般不直接使用外网配置, 可以使用 nginx 代理, 然后在Nginx 加个简单的认证配置即可</description>
    </item>
    
    <item>
      <title>ThreadLocal 中的内存泄漏</title>
      <link>https://emacsist.github.io/2018/01/29/threadlocal-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</link>
      <pubDate>Mon, 29 Jan 2018 11:42:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/29/threadlocal-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</guid>
      <description>缘起 发现线上项目, 在 Tomcat shutdown 时会报告可能的内存泄漏问题 日志如下 Sep 20, 2016 12:41:33 PM org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc SEVERE: The web application [] registered the JDBC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered. Sep</description>
    </item>
    
    <item>
      <title>Spring 中 AOP 使用</title>
      <link>https://emacsist.github.io/2018/01/26/spring-%E4%B8%AD-aop-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 26 Jan 2018 16:30:12 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/26/spring-%E4%B8%AD-aop-%E4%BD%BF%E7%94%A8/</guid>
      <description>开启 @Configuration @EnableAspectJAutoProxy public class AppConfig { } 或xml中配置 &amp;lt;aop:aspectj-autoproxy/&amp;gt; 声明一个 Aspect @Aspect @Component public class NotVeryUsefulAspect { } 声明一个切点 @Pointcut(&amp;quot;execution(* transfer(..))&amp;quot;)// the pointcut expression private void anyOldTransfer() {}// the pointcut signature 支持的切点类型 execution within this target args @target @args @within @annotation 组合切点 @Pointcut(&amp;quot;execution(public * *(..))&amp;quot;)</description>
    </item>
    
    <item>
      <title>Spring框架中注解整理</title>
      <link>https://emacsist.github.io/2018/01/26/spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%B3%A8%E8%A7%A3%E6%95%B4%E7%90%86/</link>
      <pubDate>Fri, 26 Jan 2018 12:07:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/26/spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%B3%A8%E8%A7%A3%E6%95%B4%E7%90%86/</guid>
      <description>这里引用一下图片, 实在太赞了. 以下是自己的整理 下载PDF版</description>
    </item>
    
    <item>
      <title>Swagger2 &#43; SpringMVC 配置及使用</title>
      <link>https://emacsist.github.io/2018/01/25/swagger2-springmvc-%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 25 Jan 2018 14:08:01 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/25/swagger2-springmvc-%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>配置 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springfox-swagger-ui&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 注意, 是没有 @Configuration . 加了的话可能会报以下错误 NoSuchBeanDefinitionException: No qualifying bean of type [java.util.List] found for dependency [java.util.List&amp;lt;org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping&amp;gt; @EnableSwagger2 @Configuration @EnableWebMvc public class SwaggerConfig { @Bean public Docket api() { return new Docket(DocumentationType.SWAGGER_2) .select() .apis(RequestHandlerSelectors.any()) .paths(PathSelectors.any()) .build(); } } &amp;lt;mvc:annotation-driven/&amp;gt; &amp;lt;mvc:resources mapping=&amp;quot;swagger-ui.html&amp;quot; location=&amp;quot;classpath:/META-INF/resources/&amp;quot;/&amp;gt; &amp;lt;mvc:resources mapping=&amp;quot;/webjars/**&amp;quot;</description>
    </item>
    
    <item>
      <title>Spring IoC杂项</title>
      <link>https://emacsist.github.io/2018/01/24/spring-ioc%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Wed, 24 Jan 2018 15:15:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/24/spring-ioc%E6%9D%82%E9%A1%B9/</guid>
      <description>@Autowired 与 @Value , @Inject 这三个注解, 都是通过 AutowiredAnnotationBeanPostProcessor 类来处理的. 通过它的默认构造器可知 public AutowiredAnnotationBeanPostProcessor() { this.autowiredAnnotationTypes.add(Autowired.class); this.autowiredAnnotationTypes.add(Value.class); try { this.autowiredAnnotationTypes.add((Class&amp;lt;? extends Annotation&amp;gt;) ClassUtils.forName(&amp;quot;javax.inject.Inject&amp;quot;, AutowiredAnnotationBeanPostProcessor.class.getClassLoader())); logger.info(&amp;quot;JSR-330 &#39;javax.inject.Inject&#39; annotation found and supported for autowiring&amp;quot;); } catch (ClassNotFoundException ex) { // JSR-330 API not available - simply skip. } } 通过</description>
    </item>
    
    <item>
      <title>Spring中是如何为 @Value 注入的</title>
      <link>https://emacsist.github.io/2018/01/22/spring%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E4%B8%BA-value-%E6%B3%A8%E5%85%A5%E7%9A%84/</link>
      <pubDate>Mon, 22 Jan 2018 12:17:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/22/spring%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E4%B8%BA-value-%E6%B3%A8%E5%85%A5%E7%9A%84/</guid>
      <description>本文讨论的 Spring 版本为 4.3.13-RELEASE 加载 PropertySourcesPlaceholderConfigurer 这个是当前Spring环境的所有 properties 的抽象. 可以看到它在 postProcessBeanFactory 时开始初始化整个 properties 输入源 每个输入源, 都保存在 org.spr</description>
    </item>
    
    <item>
      <title>IntelliJ 中按条件进行断点调试</title>
      <link>https://emacsist.github.io/2018/01/22/intellij-%E4%B8%AD%E6%8C%89%E6%9D%A1%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</link>
      <pubDate>Mon, 22 Jan 2018 12:05:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/22/intellij-%E4%B8%AD%E6%8C%89%E6%9D%A1%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</guid>
      <description>在我们调试程序的时候, 往往会遇到在循环中要打断点, 然后进行过滤调试的情况, 这时就可以用上按条件来进行打断点调试了. 比如在 Spring 源码中有如下代码 protected</description>
    </item>
    
    <item>
      <title>MyBatis中使用 like 及注意事项</title>
      <link>https://emacsist.github.io/2018/01/19/mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8-like-%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Fri, 19 Jan 2018 17:16:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/19/mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8-like-%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>常见错误用法 select * from tbl where title like &#39;%#{title}%&#39; 这种写法, 会报以下类似错: Error setting non null for parameter #5 with JdbcType null . Try setting a different JdbcType for this parameter or a different configuration property. Cause: java.sql.SQLException: Parameter index out of range (5 &amp;gt; number of parameters, which is 4). 正确用法</description>
    </item>
    
    <item>
      <title>&lt;图解算法&gt;读书笔记</title>
      <link>https://emacsist.github.io/2018/01/19/%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 19 Jan 2018 11:24:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/19/%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>大O表示法 讨论运行时间时, log 指的都是 以2为底的log. 作用: 仅知道算法运行需要多长时间才能运行完毕还不够, 还需知道运行时间如何随着列表增长而</description>
    </item>
    
    <item>
      <title>Spring Data Redis 发布订阅</title>
      <link>https://emacsist.github.io/2018/01/17/spring-data-redis-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</link>
      <pubDate>Wed, 17 Jan 2018 17:32:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/17/spring-data-redis-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</guid>
      <description>因为线上项目因为 RabbitMQ 连接数过多(代码不良导致), 而导致 Redis 的 pub/sub 机制失效, 所以才有了这篇排查问题的文章. 记于 2018-1-17 事故日期: 2017-1-15 Spring Data Redis 中的 pub/sub @Bean RedisMessageListenerContainer container(RedisConnectionFactory connectionFactory, MessageListenerAdapter listenerAdapter)</description>
    </item>
    
    <item>
      <title>&lt;Java多线程编程实践指南-核心篇&gt;读书笔记</title>
      <link>https://emacsist.github.io/2018/01/16/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97-%E6%A0%B8%E5%BF%83%E7%AF%87%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 16 Jan 2018 21:48:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/16/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97-%E6%A0%B8%E5%BF%83%E7%AF%87%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>用户线程VS守护线程 用户线程 它会阻止 Java 虚拟机的正常停止, 即一个 Java 虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止 正常停止 指不是通过 System.exit</description>
    </item>
    
    <item>
      <title>Spring中使用中间件服务注意事项</title>
      <link>https://emacsist.github.io/2018/01/15/spring%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9C%8D%E5%8A%A1%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 15 Jan 2018 14:47:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/15/spring%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9C%8D%E5%8A%A1%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>千万不要在Spring中手动来处理各种中间件的资源. 例如 redis connection 这些最好使用 Framework 自身带的连接池, 以及相应的模板类. 例如 RedisTemplate rabbitmq connection 以及 channel 最好使用 RabbitTemplate 原因 发</description>
    </item>
    
    <item>
      <title>&lt;Python从入门到实践&gt;读书笔记</title>
      <link>https://emacsist.github.io/2018/01/14/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 14 Jan 2018 22:52:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/14/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>退出 Ctrl-D 或 exit() 基础 字符串 有引号括起来的都是字符串, 引号既可以是单绰号, 也可以是双引号. 字符串拼接: 使用 + 将数字转换为字符串, 使用函数: str() 乘方 &amp;gt;&amp;gt;&amp;gt; 3</description>
    </item>
    
    <item>
      <title>Elisp 中读取交互式调用的参数</title>
      <link>https://emacsist.github.io/2018/01/04/elisp-%E4%B8%AD%E8%AF%BB%E5%8F%96%E4%BA%A4%E4%BA%92%E5%BC%8F%E8%B0%83%E7%94%A8%E7%9A%84%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 04 Jan 2018 17:38:55 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/04/elisp-%E4%B8%AD%E8%AF%BB%E5%8F%96%E4%BA%A4%E4%BA%92%E5%BC%8F%E8%B0%83%E7%94%A8%E7%9A%84%E5%8F%82%E6%95%B0/</guid>
      <description>interactive 当使用 interactive 时, 可以使一个 lisp 函数变成一个可交互式调用的命令. 它的形式为 interactive arg-descriptor arg-descriptor 参数标识及意义 为空 或 nil 表示该命令是通过无参数来调用的. 这会导致快速</description>
    </item>
    
    <item>
      <title>李杀的Elisp学习笔记</title>
      <link>https://emacsist.github.io/2018/01/03/%E6%9D%8E%E6%9D%80%E7%9A%84elisp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 03 Jan 2018 15:56:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/03/%E6%9D%8E%E6%9D%80%E7%9A%84elisp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>http://ergoemacs.org/emacs/elisp_basics.html Emacs Lisp 基础 eval 代码 (+ 3 4) 方法有: 将光标移到闭括号外, 然后调用 eval-last-sexp (C-x C-e) , 然后 emacs 就会计算与该右括号匹配的左括号及之间的表达式了. 你也可以选择某一段代</description>
    </item>
    
    <item>
      <title>&lt;Linux Shell 脚本攻略&gt;学习笔记</title>
      <link>https://emacsist.github.io/2017/12/31/linux-shell-%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 31 Dec 2017 21:59:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/31/linux-shell-%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>shebang wiki 在计算机科学中，Shebang（也称为 Hashbang ）是一个由井号和叹号构成的字符序列 #! ，其出现在文本文件的第一行的前两个字符 bash 的配置文件执行顺序 这</description>
    </item>
    
    <item>
      <title>Java Web 中动态修改配置文件属性值</title>
      <link>https://emacsist.github.io/2017/12/29/java-web-%E4%B8%AD%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E5%80%BC/</link>
      <pubDate>Fri, 29 Dec 2017 10:42:37 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/29/java-web-%E4%B8%AD%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E5%80%BC/</guid>
      <description>缘起 由于项目复杂起来, 导致平时部署的时候常常会有多个Tomcat实例来运行支撑. 比如我们公司里有个 DSP 项目, 分为三个大类的 Tomcat(Web 处理用户请求, Task 定</description>
    </item>
    
    <item>
      <title>GNU Parallel 学习笔记</title>
      <link>https://emacsist.github.io/2017/12/24/gnu-parallel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 24 Dec 2017 23:10:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/24/gnu-parallel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>安装 brew install parallel 官方文档指南 man parallel_tutorial 输入源 直接在命令行传递参数 ::: 参数1 ::: 参数2 $ echo ::: a b c e b a c e $ parallel echo ::: a b c e ::: f g j i a g a j a i b f b j b i</description>
    </item>
    
    <item>
      <title>&lt;Java 8 实战&gt; 学习笔记</title>
      <link>https://emacsist.github.io/2017/12/21/java-8-%E5%AE%9E%E6%88%98-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 21 Dec 2017 12:27:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/21/java-8-%E5%AE%9E%E6%88%98-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>流处理 流, 是一系列数据项, 一次只生成一项. 程序可以从输入流中一个一个读取数据项, 然后以同样的方式将数据项写入输出流. 一个程序的输出流, 很可能</description>
    </item>
    
    <item>
      <title>Spring 的 RestTemplate 使用</title>
      <link>https://emacsist.github.io/2017/12/21/spring-%E7%9A%84-resttemplate-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 21 Dec 2017 12:25:12 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/21/spring-%E7%9A%84-resttemplate-%E4%BD%BF%E7%94%A8/</guid>
      <description>设置各种 timeout @Bean public RestTemplate restTemplate() { RestTemplate restTemplate = new RestTemplate(getClientHttpRequestFactory()); restTemplate.getMessageConverters().add(new FormHttpMessageConverter()); restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter()); log.info(&amp;quot;message converters {}&amp;quot;, restTemplate.getMessageConverters()); return restTemplate; } private ClientHttpRequestFactory getClientHttpRequestFactory() { int timeout = 5000; HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory(); clientHttpRequestFactory.setConnectTimeout(timeout); return clientHttpRequestFactory; } GET String body; if (value != null) { body = value.toString(); } else { body = restTemplate.getForObject(&amp;quot;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid={ID}&amp;amp;corpsecret={SECRECT}&amp;quot;, String.class, request.getCorpid(), request.getCorpsecret()); log.info(&amp;quot;send token http response {}&amp;quot;, body); }</description>
    </item>
    
    <item>
      <title>巧用位运算来实现状态处理逻辑</title>
      <link>https://emacsist.github.io/2017/12/16/%E5%B7%A7%E7%94%A8%E4%BD%8D%E8%BF%90%E7%AE%97%E6%9D%A5%E5%AE%9E%E7%8E%B0%E7%8A%B6%E6%80%81%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91/</link>
      <pubDate>Sat, 16 Dec 2017 22:22:38 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/16/%E5%B7%A7%E7%94%A8%E4%BD%8D%E8%BF%90%E7%AE%97%E6%9D%A5%E5%AE%9E%E7%8E%B0%E7%8A%B6%E6%80%81%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91/</guid>
      <description>我们写程序的时候, 常常会遇到状态标志位的处理. 例如, 在一个系统中, 我们要发各种类型的通知, 而这种通知是用户可以设置是否接收的; 又或者是各种权</description>
    </item>
    
    <item>
      <title>gRPC 学习笔记</title>
      <link>https://emacsist.github.io/2017/12/11/grpc-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 11 Dec 2017 14:46:50 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/11/grpc-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>概念 定义服务 默认情况下, gRPC 使用 protocol buffers 作为接口定义语言. 例如 service HelloService { rpc SayHello (HelloRequest) returns (HelloResponse); } message HelloRequest { string greeting = 1; } message HelloResponse { string reply = 1; } 单个请求, 单个响应 rpc SayHello(HelloRequest) returns (HelloResponse){ } 单个请</description>
    </item>
    
    <item>
      <title>Google Protol buffers  学习笔记</title>
      <link>https://emacsist.github.io/2017/12/11/google-protol-buffers-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 11 Dec 2017 14:45:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/11/google-protol-buffers-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>什么是 protocol buffers? Google 官方文档是这样子介绍的 Protocol buffers 是 Google 的语言中立的, 平台中立的, 可扩展的序列化结构的数据机制, 类似 XML, 但是更小, 更快, 更简单. 你可以一次性</description>
    </item>
    
    <item>
      <title>SpringMVC 的大概流程整理</title>
      <link>https://emacsist.github.io/2017/12/05/springmvc-%E7%9A%84%E5%A4%A7%E6%A6%82%E6%B5%81%E7%A8%8B%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 05 Dec 2017 16:44:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/05/springmvc-%E7%9A%84%E5%A4%A7%E6%A6%82%E6%B5%81%E7%A8%8B%E6%95%B4%E7%90%86/</guid>
      <description>入口: 从 Tomcat 到 SpringMVC 的 DispatcherServlet org.apache.catalina.core.StandardWrapperValve: 第一步: 获取 wrapper 容器 StandardWrapper wrapper = (StandardWrapper) getContainer(); 第二步: 根据容器 wrapper 获取相应的 servlet if (!unavailable) { servlet = wrapper.allocate(); } 第三步: 获取 filter 调用链 ApplicationFilterFactory 可以获取当前 Web 应用的所有 Filter</description>
    </item>
    
    <item>
      <title>SpringMVC 中 request.getInputStream() 为空解惑</title>
      <link>https://emacsist.github.io/2017/12/04/springmvc-%E4%B8%AD-request.getinputstream-%E4%B8%BA%E7%A9%BA%E8%A7%A3%E6%83%91/</link>
      <pubDate>Mon, 04 Dec 2017 17:31:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/04/springmvc-%E4%B8%AD-request.getinputstream-%E4%B8%BA%E7%A9%BA%E8%A7%A3%E6%83%91/</guid>
      <description>起缘 最近公司跟美图对接DSP系统, 我们公司使用的是Java语言的 Spring Boot 框架, 美图给的是一个 Google 的 proto 文件. 对接的时候, 我们在Spring的 Controller 里使用</description>
    </item>
    
    <item>
      <title>Swift 学习笔记</title>
      <link>https://emacsist.github.io/2017/11/09/swift-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 09 Nov 2017 11:43:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/11/09/swift-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>基础 常量和变量 let : 声明常量 var : 声明变量 let 常量名: 常量类型 var 变量名: 变量类型 类型是可选的, 如果不给出, Swift 会自动推导. 分号 只有在同一行内写多条语</description>
    </item>
    
    <item>
      <title>[翻译] Network 与 RabbitMQ</title>
      <link>https://emacsist.github.io/2017/10/27/%E7%BF%BB%E8%AF%91-network-%E4%B8%8E-rabbitmq/</link>
      <pubDate>Fri, 27 Oct 2017 17:59:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/10/27/%E7%BF%BB%E8%AF%91-network-%E4%B8%8E-rabbitmq/</guid>
      <description>原文 Networking and RabbitMQ 简介 Clients 是通过 network 与 RabbitMQ 通信的。所有 Broker （译注：即RabbitMQ服务器）支持的协议，都是基于 TCP 的。RabbitMQ与操作系统都提供了许多</description>
    </item>
    
    <item>
      <title>HashMap Vs. ConcurrentHashMap Vs. SynchronizedMap – 如何在Java中同步HashMap</title>
      <link>https://emacsist.github.io/2017/10/10/hashmap-vs.-concurrenthashmap-vs.-synchronizedmap-%E5%A6%82%E4%BD%95%E5%9C%A8java%E4%B8%AD%E5%90%8C%E6%AD%A5hashmap/</link>
      <pubDate>Tue, 10 Oct 2017 15:05:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/10/10/hashmap-vs.-concurrenthashmap-vs.-synchronizedmap-%E5%A6%82%E4%BD%95%E5%9C%A8java%E4%B8%AD%E5%90%8C%E6%AD%A5hashmap/</guid>
      <description>原文 HashMap 在Java中是一种非常强大的数据结构。我们会经常使用它并且在绝大多数的应用中都会使用到它。这里有一些我之前写的例子: 如何实现线程安全的</description>
    </item>
    
    <item>
      <title>Java 中假泛型导致的一个坑</title>
      <link>https://emacsist.github.io/2017/09/21/java-%E4%B8%AD%E5%81%87%E6%B3%9B%E5%9E%8B%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</link>
      <pubDate>Thu, 21 Sep 2017 17:22:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/09/21/java-%E4%B8%AD%E5%81%87%E6%B3%9B%E5%9E%8B%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</guid>
      <description>情景 公司里一位程序员，写了段代码: @Override public Set&amp;lt;Integer&amp;gt; getUserId() { Set&amp;lt;Integer&amp;gt; userIdSet; Object value = LocalCache.getValue(CacheConstants.USERID_KEY); if (value != null) { userIdSet = (Set&amp;lt;Integer&amp;gt;) value; } else { userIdSet = redisTemplate.opsForSet().members(CacheConstants.USERID_KEY); LocalCache.putValue(CacheConstants.USERID_KEY, userIdSet, 300); } return userIdSet; } 然后判断 Set&amp;lt;Integer&amp;gt; userIdSet = taskService.getUserId(); if (task != null &amp;amp;&amp;amp; userIdSet.contains(task.getUserId())) { //do somehting } else {</description>
    </item>
    
    <item>
      <title>《Erlang趣学指南》读书笔记</title>
      <link>https://emacsist.github.io/2017/08/26/erlang%E8%B6%A3%E5%AD%A6%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 26 Aug 2017 13:26:25 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/08/26/erlang%E8%B6%A3%E5%AD%A6%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>第一章 查找帮助 erl -man 模块名 变量名 Erlang 中，变量名不能以小写字符开头。 原子 原子是字面量，这意味着原子是常量，唯一的值就是自己的名字。换句话说，你看到</description>
    </item>
    
    <item>
      <title>RabbitMQ 高负载CPU排查</title>
      <link>https://emacsist.github.io/2017/08/24/rabbitmq-%E9%AB%98%E8%B4%9F%E8%BD%BDcpu%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Thu, 24 Aug 2017 12:10:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/08/24/rabbitmq-%E9%AB%98%E8%B4%9F%E8%BD%BDcpu%E6%8E%92%E6%9F%A5/</guid>
      <description>问题 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 16285 user 20 0 6188812 1.465g 5992 S 197.7 9.3 4418:21 beam.smp 线上的 DSP 系统要用到 RabbitMQ 作为进程间消息通信的中间件，但是发现它的CPU使用率时很高，时而又比</description>
    </item>
    
    <item>
      <title>Alfred3 自定义 workflow</title>
      <link>https://emacsist.github.io/2017/08/21/alfred3-%E8%87%AA%E5%AE%9A%E4%B9%89-workflow/</link>
      <pubDate>Mon, 21 Aug 2017 17:15:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/08/21/alfred3-%E8%87%AA%E5%AE%9A%E4%B9%89-workflow/</guid>
      <description>本人习惯用 Golang 来写些小工具什么的，所以，这里以 Golang 为例子 方式 Alfred 的 workflow ，个人的理解就是在 Alfred 中输入，然后它会调用其他程序，将你的输入作为程序的输入，然</description>
    </item>
    
    <item>
      <title>MyBatis 源码分析及学习</title>
      <link>https://emacsist.github.io/2017/07/21/mybatis-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 21 Jul 2017 15:32:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/21/mybatis-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E5%AD%A6%E4%B9%A0/</guid>
      <description>搭建环境 本要将相应的工程，放在 github 了，这个是最小的 MyBatis 应用了，导入工程到自己喜欢的IDE里，就可以开始一步一步调试了。 github emacsist mybatis-hello-world 概要 public static void main(String[] args) throws IOException {</description>
    </item>
    
    <item>
      <title>Java中的 finally 与 return</title>
      <link>https://emacsist.github.io/2017/07/17/java%E4%B8%AD%E7%9A%84-finally-%E4%B8%8E-return/</link>
      <pubDate>Mon, 17 Jul 2017 18:20:09 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/17/java%E4%B8%AD%E7%9A%84-finally-%E4%B8%8E-return/</guid>
      <description>实验代码 package org.agoncal.sample.jmh; /** * Created by emacsist on 2017/7/14. */ public class TestFinallyClass { public static void main(String[] args) { System.out.println(testFinally(10)); } public static int testFinally(int i) { try { return i + 1; } finally { i+=10; return i + 2; } } } 字节码 Code: stack=2, locals=3, args_size=1 0: iload_0 将 LocalVariableTable 中 slot 为 0 的变量压入栈</description>
    </item>
    
    <item>
      <title>[翻译]Cookie 中的 domain 是如何工作的？</title>
      <link>https://emacsist.github.io/2017/07/11/%E7%BF%BB%E8%AF%91cookie-%E4%B8%AD%E7%9A%84-domain-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</link>
      <pubDate>Tue, 11 Jul 2017 12:10:16 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/11/%E7%BF%BB%E8%AF%91cookie-%E4%B8%AD%E7%9A%84-domain-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</guid>
      <description>原文 虽然现在有 RFC 2965 规范（Set-Cookie2，已经废弃了 RFC 2109），但大多数浏览器并不完全支持，只是遵守 Netscape 的原始规范 Domain 属性值和有效域之间</description>
    </item>
    
    <item>
      <title>Java 中私有字段的继承问题</title>
      <link>https://emacsist.github.io/2017/07/11/java-%E4%B8%AD%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5%E7%9A%84%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 11 Jul 2017 11:24:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/11/java-%E4%B8%AD%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5%E7%9A%84%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/</guid>
      <description>父类中的私有字段会不会被子类继承？ 父类(没有 get , set) package org.agoncal.sample.jmh; public class Test { private int age; } 子类: package org.agoncal.sample.jmh; /** * Created by emacsist on 2017/7/10. */ public class Test2 extends Test { private String name; } 反射获取 age getField package org.agoncal.sample.jmh; import java.lang.reflect.Field; /** *</description>
    </item>
    
    <item>
      <title>Java 中关于局部变量位置及其对应的字节码</title>
      <link>https://emacsist.github.io/2017/07/07/java-%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BD%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AD%97%E8%8A%82%E7%A0%81/</link>
      <pubDate>Fri, 07 Jul 2017 16:09:38 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/07/java-%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BD%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AD%97%E8%8A%82%E7%A0%81/</guid>
      <description>局部变量位置 package org.agoncal.sample.jmh; public class Test { public void t1() { Object a; for (int i = 0; i &amp;lt; 100; i++) { a = new Object(); System.out.println(a.getClass()); } } public void t2() { for (int i = 0; i &amp;lt; 100; i++) { Object a = new Object(); System.out.println(a.getClass()); } } } 看资料网上大多说倾向 t1 更</description>
    </item>
    
    <item>
      <title>Java 中 的 synchronized 与 Atomic</title>
      <link>https://emacsist.github.io/2017/07/04/java-%E4%B8%AD-%E7%9A%84-synchronized-%E4%B8%8E-atomic/</link>
      <pubDate>Tue, 04 Jul 2017 16:34:58 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/04/java-%E4%B8%AD-%E7%9A%84-synchronized-%E4%B8%8E-atomic/</guid>
      <description>// 代码1 public class Sample { private static int count = 0; synchronized public static void increment() { count++; } } // 代码2 public class Sample { private static AtomicInteger count = new AtomicInteger(0); public static void increment() { count.getAndIncrement(); } } 虽然它们都可以实现相同的功能，那它们的区别到底是</description>
    </item>
    
    <item>
      <title>JDK 之 ArrayList 和 LinkedList 源码阅读笔记</title>
      <link>https://emacsist.github.io/2017/07/04/jdk-%E4%B9%8B-arraylist-%E5%92%8C-linkedlist-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 04 Jul 2017 14:50:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/04/jdk-%E4%B9%8B-arraylist-%E5%92%8C-linkedlist-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>类声明 public class ArrayList&amp;lt;E&amp;gt; extends AbstractList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable public class LinkedList&amp;lt;E&amp;gt; extends AbstractSequentialList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, Deque&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable 其中 public abstract class AbstractSequentialList&amp;lt;E&amp;gt; extends AbstractList&amp;lt;E&amp;gt; 可以看到，它们的共同点是 都继承 AbstractList 类 都实现了 List 接口 都实现了 Cloneable 接口 都实现了 Serializable 接口 区</description>
    </item>
    
    <item>
      <title>JDK 之 ThreadLocal 源码阅读笔记</title>
      <link>https://emacsist.github.io/2017/07/04/jdk-%E4%B9%8B-threadlocal-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 04 Jul 2017 11:17:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/04/jdk-%E4%B9%8B-threadlocal-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>ThreadLocal 类声明 public class ThreadLocal&amp;lt;T&amp;gt; 可以看到，它只是单纯的一个泛型类，没有其他特别的修饰符。 看注释可以看到，它通常的使用方式是在类字段添加: private static final ThreadLocal... 属性 private final int threadLocalHashCode =</description>
    </item>
    
    <item>
      <title>JDK 之 Enum 源码阅读笔记</title>
      <link>https://emacsist.github.io/2017/07/03/jdk-%E4%B9%8B-enum-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 03 Jul 2017 15:10:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/03/jdk-%E4%B9%8B-enum-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>Enum 类声明 public abstract class Enum&amp;lt;E extends Enum&amp;lt;E&amp;gt;&amp;gt; implements Comparable&amp;lt;E&amp;gt;, Serializable 可以看到，它是一个抽象类，实现的 Comparable 和 Serializable 接口 Enum 类的属性 private final String name; 所代表的名称（即 enum 的名称,也即是枚举字段的变量的字面量</description>
    </item>
    
    <item>
      <title>JDK 之 Integer 源码阅读笔记</title>
      <link>https://emacsist.github.io/2017/07/03/jdk-%E4%B9%8B-integer-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 03 Jul 2017 11:37:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/03/jdk-%E4%B9%8B-integer-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>虽然这里只是以 Integer 为例，但是其他的 primitive 包装类，原理也是一样的，就不再多解释了。 Integer 类声明 public final class Integer extends Number implements Comparable&amp;lt;Integer&amp;gt; 其中, Number 类的修饰: public abstract class Number implements java.io.Serializable 通过源码可以</description>
    </item>
    
    <item>
      <title>JDK 之 String 源码阅读笔记</title>
      <link>https://emacsist.github.io/2017/07/01/jdk-%E4%B9%8B-string-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 01 Jul 2017 11:15:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/01/jdk-%E4%B9%8B-string-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>本文基于 JDK 1.8 ，所有代码都有 Mac 环境下， JDK 1.8 中测试 String 类的修饰 public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence 首先，它是一个 final 类，这表明：该类是不能被继承的。 Why is String class declared final in Java? 实现</description>
    </item>
    
    <item>
      <title>Java程序员的自我修养</title>
      <link>https://emacsist.github.io/2017/06/28/java%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</link>
      <pubDate>Wed, 28 Jun 2017 17:34:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/28/java%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</guid>
      <description>Java 内存模型及规范 ifeve-Java内存模型FAQ-中译版 The Java Memory Model The JSR-133 Cookbook for Compiler Writers JVM 架构 https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html 根据规范可知, 运行时的数据区域有 PC 寄存器(progra</description>
    </item>
    
    <item>
      <title>Tomcat脚本 catalina.sh 注释</title>
      <link>https://emacsist.github.io/2017/06/27/tomcat%E8%84%9A%E6%9C%AC-catalina.sh-%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Tue, 27 Jun 2017 16:32:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/27/tomcat%E8%84%9A%E6%9C%AC-catalina.sh-%E6%B3%A8%E9%87%8A/</guid>
      <description>解释器 #!/bin/sh 为什么用 sh 而不是 bash ？因为它要兼容其他的OS环境。 sh vs bash 协议 使用的是 apache licenses2 环境变量 脚本里也说明了，它建议你不要在该脚本(catalina</description>
    </item>
    
    <item>
      <title>《Netty实战》读书笔记</title>
      <link>https://emacsist.github.io/2017/06/25/netty%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 25 Jun 2017 12:30:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/25/netty%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>Netty 核心组件 Channel : 传入或传出数据的载体 回调 : 一个被提供给另一个方法的方法引用 Future : 提供了另一种在完成时通知应用程序的方式. Netty 的出站I/O 操作都将返</description>
    </item>
    
    <item>
      <title>I/O模型知识收集整理</title>
      <link>https://emacsist.github.io/2017/06/23/i/o%E6%A8%A1%E5%9E%8B%E7%9F%A5%E8%AF%86%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86/</link>
      <pubDate>Fri, 23 Jun 2017 16:15:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/23/i/o%E6%A8%A1%E5%9E%8B%E7%9F%A5%E8%AF%86%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86/</guid>
      <description>同步、异步 与 阻塞、非阻塞 What&amp;rsquo;s the differences between blocking with synchronous, nonblocking and asynchronous? stackoverflow 里的是线程的同步与阻塞，我翻译了一下: 阻塞的意思可能与同步相同，也可能是不同，这取决于上下文。</description>
    </item>
    
    <item>
      <title>HTTP 1.x 协议笔记整理</title>
      <link>https://emacsist.github.io/2017/06/22/http-1.x-%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 22 Jun 2017 15:21:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/22/http-1.x-%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</guid>
      <description>请求报文 请求方法(GET,POST等) 空格 URL 空格 协议版本\r\n 字段名: 字段值\r\n ... 字段名: 字段值\r\n \r\n 请求体的内容 比如: GET /2017/06/02/Golang-%E6%B1%87%E7%BC%96%E6%9D%82%E9%A1%B9/ HTTP/1.1 Host: emacsist.github.io</description>
    </item>
    
    <item>
      <title>JVM字节码学习与理解</title>
      <link>https://emacsist.github.io/2017/06/19/jvm%E5%AD%97%E8%8A%82%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3/</link>
      <pubDate>Mon, 19 Jun 2017 14:19:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/19/jvm%E5%AD%97%E8%8A%82%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3/</guid>
      <description>aconst_null 压特殊的 null 对象引用入栈。 iconst_ 作用压整型数字0，1，2，3，4，5 入栈 注意 压入栈的指令还有： bipush 0; sipush 0; idc 0; 但这些指令相对于等同的 iconst_ 指令，效率更低</description>
    </item>
    
    <item>
      <title>Golang中关于逃逸分析以及变量与堆栈的分配问题</title>
      <link>https://emacsist.github.io/2017/06/18/golang%E4%B8%AD%E5%85%B3%E4%BA%8E%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%A0%86%E6%A0%88%E7%9A%84%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 18 Jun 2017 12:30:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/18/golang%E4%B8%AD%E5%85%B3%E4%BA%8E%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%A0%86%E6%A0%88%E7%9A%84%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/</guid>
      <description>变量是如何分配 今天看到 《Go程序设计语言&amp;ndash; 艾伦 A. A. 多诺万 》 （看的是中译版，P26, P27)有句话： 编译器可以选择使用堆或栈上的空</description>
    </item>
    
    <item>
      <title>关于StringBuilder中设置初始容量对性能的测试</title>
      <link>https://emacsist.github.io/2017/06/16/%E5%85%B3%E4%BA%8Estringbuilder%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%AE%B9%E9%87%8F%E5%AF%B9%E6%80%A7%E8%83%BD%E7%9A%84%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 16 Jun 2017 16:09:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/16/%E5%85%B3%E4%BA%8Estringbuilder%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%AE%B9%E9%87%8F%E5%AF%B9%E6%80%A7%E8%83%BD%E7%9A%84%E6%B5%8B%E8%AF%95/</guid>
      <description>被测试代码 package org.agoncal.sample.jmh; /** * Created by emacsist on 2017/6/16. */ public class StringAppend { public static String defaultBuilder(int len) { StringBuilder sb = new StringBuilder(); for (int i = 0; i &amp;lt; len; i++) { sb.append(i); } return sb.toString(); } public static String bufferBuilder(int len) { StringBuilder sb = new StringBuilder(len); for (int i = 0; i &amp;lt; len; i++) { sb.append(i); } return sb.toString();</description>
    </item>
    
    <item>
      <title>请不要再说Java中final方法比非final性能更好了</title>
      <link>https://emacsist.github.io/2017/06/16/%E8%AF%B7%E4%B8%8D%E8%A6%81%E5%86%8D%E8%AF%B4java%E4%B8%ADfinal%E6%96%B9%E6%B3%95%E6%AF%94%E9%9D%9Efinal%E6%80%A7%E8%83%BD%E6%9B%B4%E5%A5%BD%E4%BA%86/</link>
      <pubDate>Fri, 16 Jun 2017 12:07:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/16/%E8%AF%B7%E4%B8%8D%E8%A6%81%E5%86%8D%E8%AF%B4java%E4%B8%ADfinal%E6%96%B9%E6%B3%95%E6%AF%94%E9%9D%9Efinal%E6%80%A7%E8%83%BD%E6%9B%B4%E5%A5%BD%E4%BA%86/</guid>
      <description>无继承 有 static 修饰 static final // 生成随机数字和字母, public static final String getStringRandomFinal(int length) { String val = &amp;quot;&amp;quot;; Random random = new Random(); // 参数length，表示生成几位随机数 for (int i = 0; i &amp;lt; length; i++) { String charOrNum = random.nextInt(2) %</description>
    </item>
    
    <item>
      <title>Java中的基准测试JMH简单使用</title>
      <link>https://emacsist.github.io/2017/06/12/java%E4%B8%AD%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95jmh%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 12 Jun 2017 16:37:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/12/java%E4%B8%AD%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95jmh%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>使用 命令行 请参考官方网站: openjdk jmh Maven pom.xml &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.openjdk.jmh&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jmh-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.15&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.openjdk.jmh&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jmh-generator-annprocess&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.15&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 使用示例: import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder; import java.util.concurrent.TimeUnit; /** * Created by emacsist on 2017/6/12. */ @BenchmarkMode(Mode.Throughput) @OutputTimeUnit(TimeUnit.MICROSECONDS) @State(Scope.Thread) public class BenchmarkTest { @Benchmark public void testJSON(){ add(1, 3); } public static int add(int</description>
    </item>
    
    <item>
      <title>DSP系统中JSON解析性能对比Java 与 Golang</title>
      <link>https://emacsist.github.io/2017/06/12/dsp%E7%B3%BB%E7%BB%9F%E4%B8%ADjson%E8%A7%A3%E6%9E%90%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94java-%E4%B8%8E-golang/</link>
      <pubDate>Mon, 12 Jun 2017 16:21:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/12/dsp%E7%B3%BB%E7%BB%9F%E4%B8%ADjson%E8%A7%A3%E6%9E%90%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94java-%E4%B8%8E-golang/</guid>
      <description>Java中的性能 测试代码: ```bash package com.company.benchmark; import com.fasterxml.jackson.databind.JsonNode; import com.company.util.JsonUtil; import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder; import java.util.concurrent.TimeUnit; /** * Created by emacsist on 2017/6/12. */ @BenchmarkMode(Mode.SingleShotTime) @OutputTimeUnit(TimeUnit.NANOSECONDS) @State(Scope.Thread) public class BenchmarkJSON { @Benchmark public void testJSON(){ String json = &amp;quot;{\&amp;quot;id\&amp;quot;:\&amp;quot;1\&amp;quot;,\&amp;quot;user\&amp;quot;:{\&amp;quot;id\&amp;quot;:\&amp;quot;426b466fe00e698a2b718079afff962f\&amp;quot;},\&amp;quot;rule\&amp;quot;:[\&amp;quot;50284\&amp;quot;,\&amp;quot;56415\&amp;quot;,\&amp;quot;56416\&amp;quot;,\&amp;quot;56417\&amp;quot;,\&amp;quot;56418\&amp;quot;,\&amp;quot;56419\&amp;quot;,\&amp;quot;56420\&amp;quot;,\&amp;quot;56421\&amp;quot;,\&amp;quot;56422\&amp;quot;,\&amp;quot;56423\&amp;quot;,\&amp;quot;57034\&amp;quot;,\&amp;quot;57036\&amp;quot;,\&amp;quot;9078\&amp;quot;],\&amp;quot;imp\&amp;quot;:[{\&amp;quot;bidfloor\&amp;quot;:800,\&amp;quot;ext\&amp;quot;:{\&amp;quot;repeat\&amp;quot;:1},\&amp;quot;feed\&amp;quot;:{\&amp;quot;type\&amp;quot;:0},\&amp;quot;id\&amp;quot;:\&amp;quot;25263317556521\&amp;quot;,\&amp;quot;bidfloorcur\&amp;quot;:\&amp;quot;RMB\&amp;quot;,\&amp;quot;tagid\&amp;quot;:\&amp;quot;1000000002\&amp;quot;},{\&amp;quot;bidfloor\&amp;quot;:100000,\&amp;quot;ext\&amp;quot;:{\&amp;quot;repeat\&amp;quot;:1},\&amp;quot;feed\&amp;quot;:{\&amp;quot;type\&amp;quot;:0},\&amp;quot;id\&amp;quot;:\&amp;quot;25263317556522\&amp;quot;,\&amp;quot;bidfloorcur\&amp;quot;:\&amp;quot;RMB\&amp;quot;,\&amp;quot;tagid\&amp;quot;:\&amp;quot;1000000002\&amp;quot;}],\&amp;quot;app\&amp;quot;:{\&amp;quot;name\&amp;quot;:\&amp;quot;weibo\&amp;quot;,\&amp;quot;id\&amp;quot;:\&amp;quot;iamappidinwax\&amp;quot;},\&amp;quot;device\&amp;quot;:{\&amp;quot;geo\&amp;quot;:{},\&amp;quot;carrier\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;model\&amp;quot;:\&amp;quot;OPPO_OPPO A37t\&amp;quot;,\&amp;quot;ua\&amp;quot;:\&amp;quot;OPPO-OPPO A37t__weibo__6.11.1__android__android5.1\&amp;quot;,\&amp;quot;ip\&amp;quot;:\&amp;quot;113.227.98.236\&amp;quot;,\&amp;quot;ext\&amp;quot;:{},\&amp;quot;connectiontype\&amp;quot;:2,\&amp;quot;os\&amp;quot;:\&amp;quot;android\&amp;quot;,\&amp;quot;osv\&amp;quot;:\&amp;quot;5.1\&amp;quot;},\&amp;quot;dealid\&amp;quot;:\&amp;quot;47cd7e122ade3d12e312c5eb6e68bc6e\&amp;quot;,\&amp;quot;at\&amp;quot;:2}&amp;quot;; JsonNode node = JsonUtil.readTree(json); } public static void main(String[] args) throws RunnerException {</description>
    </item>
    
    <item>
      <title>Golang优化DSP系统一例</title>
      <link>https://emacsist.github.io/2017/06/08/golang%E4%BC%98%E5%8C%96dsp%E7%B3%BB%E7%BB%9F%E4%B8%80%E4%BE%8B/</link>
      <pubDate>Thu, 08 Jun 2017 10:51:25 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/08/golang%E4%BC%98%E5%8C%96dsp%E7%B3%BB%E7%BB%9F%E4%B8%80%E4%BE%8B/</guid>
      <description>JSON 解析 更新：2017-6-12 ！！这里有问题，参考下文 因为是与微博WAX那边对接，使用的是JSON序列化协议，但偏偏Golang的标准库里的</description>
    </item>
    
    <item>
      <title>Mac下源码调试Redis</title>
      <link>https://emacsist.github.io/2017/06/05/mac%E4%B8%8B%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95redis/</link>
      <pubDate>Mon, 05 Jun 2017 15:39:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/05/mac%E4%B8%8B%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95redis/</guid>
      <description>安装和配置好GDB权限 参考下面安装GNU工具集 Mac下安装GNU工具集 然后还要进行 GDB 签名 codesign GDB 重新编译 redis redis 官方文档Debug指南</description>
    </item>
    
    <item>
      <title>Golang 汇编杂项</title>
      <link>https://emacsist.github.io/2017/06/02/golang-%E6%B1%87%E7%BC%96%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Fri, 02 Jun 2017 18:08:31 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/02/golang-%E6%B1%87%E7%BC%96%E6%9D%82%E9%A1%B9/</guid>
      <description>查看Go源码输出的汇编代码 go tool compile -S hello.go 或 go tool objdump -s &amp;quot;main\.main&amp;quot; hello 或 go tool compile -N -S hello.go 最好用这个，这种是禁止优化的 小例子 只有一个返回值 [22:58:38] emacsist:Desktop $ cat hello.go package main func main() { a, b := 3,</description>
    </item>
    
    <item>
      <title>《汇编语言》学习笔记</title>
      <link>https://emacsist.github.io/2017/05/26/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 26 May 2017 11:28:44 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/26/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第一章：基础知识 汇编语言的组成 汇编指令：机器码助记符，有对应的机器码 伪指令：没有对应的机器码，由编译器执行，计算机并不执行 其他符号：如 +, -, *,</description>
    </item>
    
    <item>
      <title>Golang中遇到的[坑]</title>
      <link>https://emacsist.github.io/2017/05/21/golang%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</link>
      <pubDate>Sun, 21 May 2017 12:36:58 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/21/golang%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</guid>
      <description>匿名函数 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func main() { for i := 0; i &amp;lt; 10; i++ { go show(i) } for i := 0; i &amp;lt; 10; i++ { go func() { fmt.Printf(&amp;quot;go x =&amp;gt; %v\n&amp;quot;, i) }() } time.Sleep(5 * time.Second) } func show(x int) { fmt.Printf(&amp;quot;x =&amp;gt; %v\n&amp;quot;, x) } 输出的结果: [Running] go run &amp;quot;/Users/emacsist/Documents/go/test/src/t1/main.go&amp;quot; x =&amp;gt;</description>
    </item>
    
    <item>
      <title>[翻译]RabbitMQ 心跳</title>
      <link>https://emacsist.github.io/2017/05/16/%E7%BF%BB%E8%AF%91rabbitmq-%E5%BF%83%E8%B7%B3/</link>
      <pubDate>Tue, 16 May 2017 11:53:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/16/%E7%BF%BB%E8%AF%91rabbitmq-%E5%BF%83%E8%B7%B3/</guid>
      <description>用心跳检测死TCP连接 介绍 网络可能会以许多方式失败，有时会很细微（例如高比率的数据包丢失）。中断的TCP连接需要比较长时间（例如，在Linu</description>
    </item>
    
    <item>
      <title>[翻译]RabbitMQ 生产环境检查列表</title>
      <link>https://emacsist.github.io/2017/05/15/%E7%BF%BB%E8%AF%91rabbitmq-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%A3%80%E6%9F%A5%E5%88%97%E8%A1%A8/</link>
      <pubDate>Mon, 15 May 2017 16:55:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/15/%E7%BF%BB%E8%AF%91rabbitmq-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%A3%80%E6%9F%A5%E5%88%97%E8%A1%A8/</guid>
      <description>原文 介绍 数据服务，比如 RabbitMQ，通常有许多可调参数。一些配置对开发环境比较有意义的，但并不真正地适用生产环境。没有单一的配置可以适用</description>
    </item>
    
    <item>
      <title>TCPCopy的使用</title>
      <link>https://emacsist.github.io/2017/05/15/tcpcopy%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 15 May 2017 15:25:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/15/tcpcopy%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>今天由于某些原因，DSP系统的测试环境不能用了，所以想复制一些正式环境的流量到测试服务器上。查找资料，发现了个 tcpcopy 项目，发现不错。 Github</description>
    </item>
    
    <item>
      <title>[翻译]How to Interpret the Erlang Crash Dumps</title>
      <link>https://emacsist.github.io/2017/05/13/%E7%BF%BB%E8%AF%91how-to-interpret-the-erlang-crash-dumps/</link>
      <pubDate>Sat, 13 May 2017 12:54:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/13/%E7%BF%BB%E8%AF%91how-to-interpret-the-erlang-crash-dumps/</guid>
      <description>原文 如何解释 Erlang Crash Dumps 本节介绍 Erlang 运行时系统在异常退出时生成的 erl_crash.dump 文件 注意： 在 Erlang/OTP R9C 中， Erlang crash dump 有大幅的改变。在本节中的信息不能直接应用到旧的 dumps 文件中。</description>
    </item>
    
    <item>
      <title>[翻译]RabbitMQ中 immediate 和 mandatory 的用法</title>
      <link>https://emacsist.github.io/2017/05/11/%E7%BF%BB%E8%AF%91rabbitmq%E4%B8%AD-immediate-%E5%92%8C-mandatory-%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 11 May 2017 19:17:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/11/%E7%BF%BB%E8%AF%91rabbitmq%E4%B8%AD-immediate-%E5%92%8C-mandatory-%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>原文 immediate 和 mandatory 字段是 AMQP 规范的一部分，并且还包含在 RabbitMQ FAQ 中指出实现者如何解释它们的含义的。 Mandatory 如果消息无法路由到队列，则此标志告诉服务器如何执行。具体</description>
    </item>
    
    <item>
      <title>[翻译]RabbitMQ 的 Management Plugin 插件</title>
      <link>https://emacsist.github.io/2017/05/11/%E7%BF%BB%E8%AF%91rabbitmq-%E7%9A%84-management-plugin-%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Thu, 11 May 2017 14:52:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/11/%E7%BF%BB%E8%AF%91rabbitmq-%E7%9A%84-management-plugin-%E6%8F%92%E4%BB%B6/</guid>
      <description>介绍 rabbitmq-management 插件提供了基于 HTTP 的API来管理及监控你的 RabbitMQ 服务器，以及基于浏览器的UI和命令工具 rabbitmqadmin 。功能包括： 声明，列出和删除交换机、队列、绑定、用户</description>
    </item>
    
    <item>
      <title>[翻译]RabbitMQ中的消费者确认和发布者确认</title>
      <link>https://emacsist.github.io/2017/05/10/%E7%BF%BB%E8%AF%91rabbitmq%E4%B8%AD%E7%9A%84%E6%B6%88%E8%B4%B9%E8%80%85%E7%A1%AE%E8%AE%A4%E5%92%8C%E5%8F%91%E5%B8%83%E8%80%85%E7%A1%AE%E8%AE%A4/</link>
      <pubDate>Wed, 10 May 2017 14:21:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/10/%E7%BF%BB%E8%AF%91rabbitmq%E4%B8%AD%E7%9A%84%E6%B6%88%E8%B4%B9%E8%80%85%E7%A1%AE%E8%AE%A4%E5%92%8C%E5%8F%91%E5%B8%83%E8%80%85%E7%A1%AE%E8%AE%A4/</guid>
      <description>原文 介绍 使用消息 Broker 的系统，例如 RabbitMQ 是被定义为分布式的。由于协议的方法（消息）的发送并不能保证到达对应目的地或者被成功地处理掉这些消息，因此，发</description>
    </item>
    
    <item>
      <title>Erlang杂项</title>
      <link>https://emacsist.github.io/2017/05/10/erlang%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Wed, 10 May 2017 11:00:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/10/erlang%E6%9D%82%E9%A1%B9/</guid>
      <description>erlang 启动参数说明 + : 它是 emulator flag 它控制模拟器的行为(即虚拟机)。(emulator flag).可以通过 erlang:system_info(&amp;hellip;) 来获取。所有选项名有: system_info - : 这种参数是传递</description>
    </item>
    
    <item>
      <title>IDA pro 杂项</title>
      <link>https://emacsist.github.io/2017/05/08/ida-pro-%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Mon, 08 May 2017 23:38:28 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/08/ida-pro-%E6%9D%82%E9%A1%B9/</guid>
      <description>常用工具 分类工具 file 命令 PE Tools PEiD 摘要工具 nm ldd objdump otool dumpbin c++filt 深度检测工具 strings 反汇编器（ndisasm, diStorm)</description>
    </item>
    
    <item>
      <title>《Erlang程序设计》学习笔记</title>
      <link>https://emacsist.github.io/2017/05/07/erlang%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 07 May 2017 11:06:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/07/erlang%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>动态代码载入 每当调用 someModule:someFunction(&amp;hellip;) 时，调用的总是最新模块里的最新版函数，哪怕当代码在模块里运行时重新编译了该模块也是如此。 在任一时刻，Erlang允许一</description>
    </item>
    
    <item>
      <title>《Erlang/OTP 并发编程实战》读书笔记</title>
      <link>https://emacsist.github.io/2017/04/30/erlang/otp-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 30 Apr 2017 12:55:25 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/04/30/erlang/otp-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>第一章：Erlang/OTP 平台 Erlang 中，并发的基本单位是进程。每个进程代表一个持续的活动，它是某段程序代码的执行代理，与其他按各自的节奏执行自</description>
    </item>
    
    <item>
      <title>[翻译]清楚地理解JavaScript中的this并且掌握它</title>
      <link>https://emacsist.github.io/2017/04/29/%E7%BF%BB%E8%AF%91%E6%B8%85%E6%A5%9A%E5%9C%B0%E7%90%86%E8%A7%A3javascript%E4%B8%AD%E7%9A%84this%E5%B9%B6%E4%B8%94%E6%8E%8C%E6%8F%A1%E5%AE%83/</link>
      <pubDate>Sat, 29 Apr 2017 21:27:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/04/29/%E7%BF%BB%E8%AF%91%E6%B8%85%E6%A5%9A%E5%9C%B0%E7%90%86%E8%A7%A3javascript%E4%B8%AD%E7%9A%84this%E5%B9%B6%E4%B8%94%E6%8E%8C%E6%8F%A1%E5%AE%83/</guid>
      <description>清楚地理解 JavaScript 中的 this, 并且掌握它 原文：Understand JavaScript’s “this” With Clarity, and Master It （当this让最你棘手时，可以学习以下所</description>
    </item>
    
    <item>
      <title>[翻译]RabbitMQ 持久化配置</title>
      <link>https://emacsist.github.io/2017/04/27/%E7%BF%BB%E8%AF%91rabbitmq-%E6%8C%81%E4%B9%85%E5%8C%96%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 27 Apr 2017 15:41:50 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/04/27/%E7%BF%BB%E8%AF%91rabbitmq-%E6%8C%81%E4%B9%85%E5%8C%96%E9%85%8D%E7%BD%AE/</guid>
      <description>原文 RabbitMQ 持久层旨在在没有配置的情况下在大多数主要场景中给出一个好的结果。然而，一些配置有时比较有用。这篇文章会解释你可以怎样配置它。建议你在开</description>
    </item>
    
    <item>
      <title>[翻译]理解 RabbitMQ 3.4 中内存的使用</title>
      <link>https://emacsist.github.io/2017/04/27/%E7%BF%BB%E8%AF%91%E7%90%86%E8%A7%A3-rabbitmq-3.4-%E4%B8%AD%E5%86%85%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 27 Apr 2017 12:47:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/04/27/%E7%BF%BB%E8%AF%91%E7%90%86%E8%A7%A3-rabbitmq-3.4-%E4%B8%AD%E5%86%85%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>原文 我的队列使用了多少内存？这是一个容易问的问题，并且回答起来比较困难。RabbitMQ 3.4 给你一个清晰的视图来显示你的队列使用了多少内存。这</description>
    </item>
    
    <item>
      <title>RabbitMQ 资料收集</title>
      <link>https://emacsist.github.io/2017/04/27/rabbitmq-%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</link>
      <pubDate>Thu, 27 Apr 2017 10:46:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/04/27/rabbitmq-%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</guid>
      <description>关于性能及优化 http://stackoverflow.com/questions/10030227/maximize-throughput-with-rabbitmq https://www.cloudamqp.com/blog/index.html 负载测试: https://www.cloudamqp.com/blog/2016-11-18-load-testing-and-performance-measurements-rabbitmq.html Java 工具: https://www.rabbitmq.com/java-tools.html RabbitMQ 持久化 默认情况下，重启 Broker 时，那些非持久化(not durable and persistent)的 Messages 、 Exchanges 和 Queues 会丢失。 如果</description>
    </item>
    
    <item>
      <title>https.protocols在Java中的使用</title>
      <link>https://emacsist.github.io/2017/03/02/https.protocols%E5%9C%A8java%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 02 Mar 2017 13:46:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/03/02/https.protocols%E5%9C%A8java%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>Caused by: java.io.EOFException: SSL peer shut down incorrectly 在服务器上，发现一个微博爬虫系统偶尔会报这种异常。Google 了下，在 Stackoverflow 上看到相关的回答。所以决定详细了解下这原理。 上面说，</description>
    </item>
    
    <item>
      <title>RabbitMQ 出队发送邮件注意事项</title>
      <link>https://emacsist.github.io/2017/02/22/rabbitmq-%E5%87%BA%E9%98%9F%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Wed, 22 Feb 2017 14:21:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/22/rabbitmq-%E5%87%BA%E9%98%9F%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>线上一个发送邮件的系统，通过 RabbitMQ 出队发送系统中的邮件时，发现虽然 consumer 连接在那里，但是日志中却没有任何输出相关的成功或失败或抛出异常的信息。 这种情</description>
    </item>
    
    <item>
      <title>Spring Boot 多模块开发</title>
      <link>https://emacsist.github.io/2017/02/20/spring-boot-%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 20 Feb 2017 15:11:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/20/spring-boot-%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</guid>
      <description>本文假设项目名为 wxsdk，它有如下模块 wxsdk ├── bean ├── constant ├── dao ├── listener ├── service ├── utils ├── webapp ├── wx-plugin wxsdk 根目录下的 pom 文件如下 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;</description>
    </item>
    
    <item>
      <title>使用Spring session时 SessionListener 执行 2 次的分析</title>
      <link>https://emacsist.github.io/2017/02/14/%E4%BD%BF%E7%94%A8spring-session%E6%97%B6-sessionlistener-%E6%89%A7%E8%A1%8C-2-%E6%AC%A1%E7%9A%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 14 Feb 2017 16:56:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/14/%E4%BD%BF%E7%94%A8spring-session%E6%97%B6-sessionlistener-%E6%89%A7%E8%A1%8C-2-%E6%AC%A1%E7%9A%84%E5%88%86%E6%9E%90/</guid>
      <description>项目中使用 Spring-session 这个分布式 session 作为负载均衡的 session 中间件，以便统一 session 的管理。 然后我们自己添加了一个 HttpSessionListener, 但是发现它执行了 2 次，实在是太诡异了。（其实是太菜</description>
    </item>
    
    <item>
      <title>MySQL 删除大表中的大部分数据的方式</title>
      <link>https://emacsist.github.io/2017/02/09/mysql-%E5%88%A0%E9%99%A4%E5%A4%A7%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%A7%E9%83%A8%E5%88%86%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 09 Feb 2017 12:42:18 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/09/mysql-%E5%88%A0%E9%99%A4%E5%A4%A7%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%A7%E9%83%A8%E5%88%86%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>昨晚要删除一张原有 2 亿多条日志表的数据，只保留 今年 2017 及之后的数据，删除之前的，以释放磁盘空间，发现 delete from t where id &amp;lt; 2亿; 发现这样子删除实在是太慢</description>
    </item>
    
    <item>
      <title>Java 一次启动失败分析案例</title>
      <link>https://emacsist.github.io/2017/02/09/java-%E4%B8%80%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Thu, 09 Feb 2017 11:32:22 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/09/java-%E4%B8%80%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/</guid>
      <description>今天，在部署外网的测试环境时，发现启动时报如下错误： Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c6d80000, 42991616, 0) failed; error=&#39;Cannot allocate memory&#39; (errno=12) # # There is insufficient memory for the Java Runtime Environment to continue. # Native memory allocation (malloc) failed to allocate 42991616 bytes for committing reserved memory. # An</description>
    </item>
    
    <item>
      <title>记录一次 MySQL 批量插入的优化</title>
      <link>https://emacsist.github.io/2017/01/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-mysql-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 11 Jan 2017 12:21:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/01/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-mysql-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>公司的DSP 项目,有个模块就是插入 RabbitMQ 里的 BID 的对象到 MySQL 然后再统计数据的业务. 但是, 发现这个 BID 批量插入的性能, 低得有点吓人. 平均 1K/s 的速度. 而这些</description>
    </item>
    
    <item>
      <title>MySQL不重启添加slow log慢查询日志</title>
      <link>https://emacsist.github.io/2016/12/07/mysql%E4%B8%8D%E9%87%8D%E5%90%AF%E6%B7%BB%E5%8A%A0slow-log%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</link>
      <pubDate>Wed, 07 Dec 2016 19:12:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/12/07/mysql%E4%B8%8D%E9%87%8D%E5%90%AF%E6%B7%BB%E5%8A%A0slow-log%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</guid>
      <description>## 开启慢查询 mysql&amp;gt; set global slow_query_log = &#39;ON&#39;; Query OK, 0 rows affected (0.78 sec) ## 检查变量值 mysql&amp;gt; show global variables like &#39;%slow%&#39;; +---------------------------+------------------------------------------------------+ | Variable_name | Value | +---------------------------+------------------------------------------------------+ | log_slow_admin_statements | OFF | | log_slow_slave_statements | OFF | | slow_launch_time | 2 | | slow_query_log | ON | | slow_query_log_file | /home/username/mysql/data/db/logs/myql-slow.log | +---------------------------+------------------------------------------------------+ 5 rows in set (0.00 sec)</description>
    </item>
    
    <item>
      <title>一名技术菜鸟分析一次微信红包诱导点击过程</title>
      <link>https://emacsist.github.io/2016/12/01/%E4%B8%80%E5%90%8D%E6%8A%80%E6%9C%AF%E8%8F%9C%E9%B8%9F%E5%88%86%E6%9E%90%E4%B8%80%E6%AC%A1%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E8%AF%B1%E5%AF%BC%E7%82%B9%E5%87%BB%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Thu, 01 Dec 2016 23:27:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/12/01/%E4%B8%80%E5%90%8D%E6%8A%80%E6%9C%AF%E8%8F%9C%E9%B8%9F%E5%88%86%E6%9E%90%E4%B8%80%E6%AC%A1%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E8%AF%B1%E5%AF%BC%E7%82%B9%E5%87%BB%E8%BF%87%E7%A8%8B/</guid>
      <description>今晚遇到一微信群，发了一个所谓的&amp;rdquo;拼手气红包&amp;rdquo;，其中的内幕大家应该都知道了的。但想到自己也是搞 Web 开发的（虽然是后端苦</description>
    </item>
    
    <item>
      <title>Java中报java.lang.NoSuchMethodError: java.util.concurrent.ConcurrentHashMap.keySet()</title>
      <link>https://emacsist.github.io/2016/12/01/java%E4%B8%AD%E6%8A%A5java.lang.nosuchmethoderror-java.util.concurrent.concurrenthashmap.keyset/</link>
      <pubDate>Thu, 01 Dec 2016 19:06:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/12/01/java%E4%B8%AD%E6%8A%A5java.lang.nosuchmethoderror-java.util.concurrent.concurrenthashmap.keyset/</guid>
      <description>原因 公司某生产环境在Tomcat启动时，报如下错误: java.lang.NoSuchMethodError: java.util.concurrent.ConcurrentHashMap.keySet()Ljava/util/concurrent/ConcurrentHashMap$KeySetView; 然后 Google 了下，发现在Github上也有在讨论: gist.github.com 导致原因： 因为开发人员在本地使用的JD</description>
    </item>
    
    <item>
      <title>RabbitMQ中的内存与流量控制</title>
      <link>https://emacsist.github.io/2016/12/01/rabbitmq%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E4%B8%8E%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Thu, 01 Dec 2016 14:53:01 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/12/01/rabbitmq%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E4%B8%8E%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</guid>
      <description>相关内存参数 vm_memory_high_watermark 这个是与流量控制相关的内存参数. RabbitMQ会在启动和执行命令rabbitmqctl set_vm_memory_high_watermark 百分比的时候检测系统所安装的内存总量</description>
    </item>
    
    <item>
      <title>RabbitMQ的crash dump文件分析</title>
      <link>https://emacsist.github.io/2016/12/01/rabbitmq%E7%9A%84crash-dump%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 01 Dec 2016 11:50:35 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/12/01/rabbitmq%E7%9A%84crash-dump%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</guid>
      <description>原因 今天一早来到公司，同事说客户反馈生产上的系统数据没有进来了。所以，就排查了下问题才行。 最直接的，先看Tomcat的日志，可以发现到: Dec 01,</description>
    </item>
    
    <item>
      <title>Golang 中的接口类型与指针</title>
      <link>https://emacsist.github.io/2016/11/24/golang-%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%8C%87%E9%92%88/</link>
      <pubDate>Thu, 24 Nov 2016 11:51:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/24/golang-%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%8C%87%E9%92%88/</guid>
      <description>这是在Google Golang的Nuts上看到的 golang-nuts 当作为interface类型调用时，指针值没有更新？ func f(resp interface{}) { resp = &amp;quot;abcd&amp;quot; } func main() { var s string f(&amp;amp;s) fmt.Println(s) //prints blank? }</description>
    </item>
    
    <item>
      <title>Golang 归并排序MergeSort</title>
      <link>https://emacsist.github.io/2016/11/22/golang-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmergesort/</link>
      <pubDate>Tue, 22 Nov 2016 19:10:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/22/golang-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmergesort/</guid>
      <description>思路 将一排数据，进行左右不断地进行划分（递[归]），然后再对比左右两边的数据后再(合[并])，这就是”归并排序“。 注意：[左右]对比，是指左</description>
    </item>
    
    <item>
      <title>Golang 快速排序</title>
      <link>https://emacsist.github.io/2016/11/21/golang-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 21 Nov 2016 23:54:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/21/golang-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>思路 data = [3 2 6 1 2 7] middle = 3 ? 2 6 1 2 7 //第一轮: // data[i] = 2 // middle = 3 if data[i] &amp;lt; middle { //则与头指针进行交换 //然后 i++ //头指针也 ++ //即头指针一直指</description>
    </item>
    
    <item>
      <title>Java报 Exception in thread main java.lang.IllegalArgumentException: Comparison method violates its general contract</title>
      <link>https://emacsist.github.io/2016/11/21/java%E6%8A%A5-exception-in-thread-main-java.lang.illegalargumentexception-comparison-method-violates-its-general-contract/</link>
      <pubDate>Mon, 21 Nov 2016 16:26:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/21/java%E6%8A%A5-exception-in-thread-main-java.lang.illegalargumentexception-comparison-method-violates-its-general-contract/</guid>
      <description>问题 Nov 21, 2016 11:46:25 AM org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer invokeErrorHandler WARNING: Execution of Rabbit message listener failed, and no ErrorHandler has been set. org.springframework.amqp.rabbit.listener.ListenerExecutionFailedException: Listener method &#39;dequeue&#39; threw exception at org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter.invokeListenerMethod(MessageListenerAdapter.java:443) at org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter.onMessage(MessageListenerAdapter.java:344) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:546) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:472) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$001(SimpleMessageListenerContainer.java:58) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$1.invokeListener(SimpleMessageListenerContainer.java:107) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.invokeListener(SimpleMessageListenerContainer.java:608) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:454) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:471) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:455) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$300(SimpleMessageListenerContainer.java:58) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:548) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalArgumentException: Comparison method violates its general contract! at java.util.TimSort.mergeLo(TimSort.java:747) at java.util.TimSort.mergeAt(TimSort.java:483) at java.util.TimSort.mergeCollapse(TimSort.java:410) at</description>
    </item>
    
    <item>
      <title>Golang 希尔排序 VS 插入排序</title>
      <link>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F-vs-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 20 Nov 2016 23:02:52 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F-vs-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>希尔排序 VS 插入排序 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;helper/number&amp;quot; &amp;quot;helper/time&amp;quot; ) func main() { data := number.GenerateInt(100000, 1000) dataCopy := make([]int, len(data)) copy(dataCopy, data) start := time.CurrentMillis() // fmt.Printf(&amp;quot;insert sort: before data = %v\n&amp;quot;, data) insertSort(data) // fmt.Printf(&amp;quot;insert sort: after data = %v\n&amp;quot;, data) fmt.Printf(&amp;quot;insert cost %v ms\n&amp;quot;, time.CurrentMillis()-start) start = time.CurrentMillis() // fmt.Printf(&amp;quot;shell sort: before data = %v\n&amp;quot;, dataCopy) shellSort(dataCopy) // fmt.Printf(&amp;quot;shell sort:</description>
    </item>
    
    <item>
      <title>Golang 希尔排序</title>
      <link>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 20 Nov 2016 22:40:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</guid>
      <description>希尔排序 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;helper/number&amp;quot; &amp;quot;helper/time&amp;quot; ) func main() { data := number.GenerateInt(100000, 100) start := time.CurrentMillis() shellSort(data) fmt.Printf(&amp;quot;cost %v ms\n&amp;quot;, time.CurrentMillis()-start) } func shellSort(data []int) { //一共有多少列: 4 -&amp;gt; 2 -&amp;gt; 1 for col := len(data) / 2; col &amp;gt;= 1; col = col / 2 { //对每一列处理 0</description>
    </item>
    
    <item>
      <title>Golang 插入排序</title>
      <link>https://emacsist.github.io/2016/11/18/golang-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 18 Nov 2016 15:47:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/18/golang-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>插入排序 &amp;ndash; 初版 这个版本的思想是：先找出要交换的两个位置的 index ， 然后再统一移动位置. package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math/rand&amp;quot; &amp;quot;time&amp;quot; ) func main() { var data []int rand.Seed(time.Now().UnixNano()) for i := 0; i &amp;lt; 50; i++ { data = append(data, rand.Intn(100)) } fmt.Printf(&amp;quot;%v\n&amp;quot;,</description>
    </item>
    
    <item>
      <title>Golang 堆排序与选择排序</title>
      <link>https://emacsist.github.io/2016/11/17/golang-%E5%A0%86%E6%8E%92%E5%BA%8F%E4%B8%8E%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 17 Nov 2016 19:12:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/17/golang-%E5%A0%86%E6%8E%92%E5%BA%8F%E4%B8%8E%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>选择排序 select.go，这里以选择最小的为例子 package main import &amp;quot;fmt&amp;quot; import &amp;quot;math/rand&amp;quot; func main() { var data []int for i := 0; i &amp;lt; 10000000; i++ { data = append(data, rand.Int()) } //fmt.Printf(&amp;quot;%v\n&amp;quot;, data) selectSort(data) fmt.Printf(&amp;quot;%v\n&amp;quot;, len(data)) } func selectSort(data []int) { swapIndex := 0 for i := 0; i &amp;lt;</description>
    </item>
    
    <item>
      <title>Golang 中等待Goroutines 执行完毕</title>
      <link>https://emacsist.github.io/2016/11/13/golang-%E4%B8%AD%E7%AD%89%E5%BE%85goroutines-%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95/</link>
      <pubDate>Sun, 13 Nov 2016 23:16:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/13/golang-%E4%B8%AD%E7%AD%89%E5%BE%85goroutines-%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95/</guid>
      <description>方式一 使用 sync.WaitGroup package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math/rand&amp;quot; &amp;quot;strconv&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) func main() { workerNum := 10 var wg sync.WaitGroup wg.Add(workerNum) for i := 0; i &amp;lt; workerNum; i++ { go worker(i, &amp;quot;Name&amp;quot;+strconv.FormatInt(int64(i), 10), &amp;amp;wg) } wg.Wait() } func worker(id int, hello string, wg *sync.WaitGroup) { time.Sleep(time.Second * time.Duration(rand.Int31n(10))) fmt.Printf(&amp;quot;workerID = %v, Hello %v\n&amp;quot;, id, hello) wg.Done() } 输出的结果: [Running]</description>
    </item>
    
    <item>
      <title>Hugo 自动化部署到 Github Pages</title>
      <link>https://emacsist.github.io/2016/11/13/hugo-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%88%B0-github-pages/</link>
      <pubDate>Sun, 13 Nov 2016 21:10:51 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/13/hugo-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%88%B0-github-pages/</guid>
      <description>脚本 由于将博客从 Hexo 迁移到了 Hugo ， 没有发现好的自动化部署方法，查资料用的什么 Hook 等机制这些又觉得太麻烦。所以，自己动手写了个自动化部署的脚本，从博</description>
    </item>
    
    <item>
      <title>Github 上发起 Pull request</title>
      <link>https://emacsist.github.io/2016/11/13/github-%E4%B8%8A%E5%8F%91%E8%B5%B7-pull-request/</link>
      <pubDate>Sun, 13 Nov 2016 12:25:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/13/github-%E4%B8%8A%E5%8F%91%E8%B5%B7-pull-request/</guid>
      <description>第一次在 Github 上发起 Pull request 是因为在将博客从 Hexo 迁移到 Hugo 的时候，遇到一个问题： 用 Hugo 命令将原先的 Hexo 的博客的源文件，用 Hugo 命令来生成的时候，报个如下的错误:</description>
    </item>
    
    <item>
      <title>Golang中的select使用</title>
      <link>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84select%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 10 Nov 2016 19:31:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84select%E4%BD%BF%E7%94%A8/</guid>
      <description>package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; &amp;quot;sync&amp;quot; ) type resultData struct { Job int Result bool } func main() { n := 10 jobs := make(chan int, n) result := make(chan resultData, n) var wg sync.WaitGroup wg.Add(n) go publishJob(jobs, n) go daemon(jobs, result, &amp;amp;wg) wg.Wait() fmt.Printf(&amp;quot;finish %v jobs&amp;quot;, n) } func publishJob(jobs chan int, n int) { for i:=0;i&amp;lt;n ;i++{ jobs &amp;lt;- i //time.Sleep(time.Duration(i) * time.Millisecond) } } func daemon(jobs</description>
    </item>
    
    <item>
      <title>Golang中的copy使用</title>
      <link>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84copy%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 10 Nov 2016 18:51:10 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84copy%E4%BD%BF%E7%94%A8/</guid>
      <description>注意 copy函数复制的元素个数=min(len(dest), len(src)) 来决定 删除 保持有序 即后面的元素经，都向前移动一个元素，然后删除最后一个元素即可</description>
    </item>
    
    <item>
      <title>Ubuntu下Cannot assign requested address</title>
      <link>https://emacsist.github.io/2016/11/09/ubuntu%E4%B8%8Bcannot-assign-requested-address/</link>
      <pubDate>Wed, 09 Nov 2016 15:35:35 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/09/ubuntu%E4%B8%8Bcannot-assign-requested-address/</guid>
      <description>Cannot assign requested address 这个表示可以分配的端口范围 echo &amp;quot;10000 65535&amp;quot; &amp;gt; /proc/sys/net/ipv4/ip_local_port_range 永久生效 # vim /etc/sysctl.conf net.ipv4.ip_local_ports_range= 10000 65535 sysctl -p aliyun</description>
    </item>
    
    <item>
      <title>Golang中接口常见用法</title>
      <link>https://emacsist.github.io/2016/11/06/golang%E4%B8%AD%E6%8E%A5%E5%8F%A3%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 06 Nov 2016 23:44:31 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/06/golang%E4%B8%AD%E6%8E%A5%E5%8F%A3%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</guid>
      <description>Talk is cheap, show me the code ^_^ package main import ( &amp;quot;fmt&amp;quot; ) // PrintString : test for interface type PrintString interface { String() string } // Person : type type Person struct { Name string } // Animal : type type Animal struct { Name string } func (p *Person) String() string { toString := &amp;quot;[Person&amp;lt;name:&amp;quot; + p.Name + &amp;quot;&amp;gt;]&amp;quot; return toString } func (a *Animal) String() string</description>
    </item>
    
    <item>
      <title>Golang VS Java 在DSP系统对比</title>
      <link>https://emacsist.github.io/2016/11/02/golang-vs-java-%E5%9C%A8dsp%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Wed, 02 Nov 2016 14:28:25 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/02/golang-vs-java-%E5%9C%A8dsp%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94/</guid>
      <description>起因 最近一段时间在学Golang，突然间想着，将公司现在的DSP的产品（竞价部分的逻辑），翻译为Golang来试一试它们的性能。 测试的环境:</description>
    </item>
    
    <item>
      <title>Golang的检查性能工具</title>
      <link>https://emacsist.github.io/2016/11/02/golang%E7%9A%84%E6%A3%80%E6%9F%A5%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 02 Nov 2016 12:45:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/02/golang%E7%9A%84%E6%A3%80%E6%9F%A5%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/</guid>
      <description>Go 自带的 pprof Web程序 只要添加如下代码即可： package main import ( _ &amp;quot;net/http/pprof&amp;quot; ) func main() { } 这样子添加后，就可以在 http://127.0.0.1:8080/debug/pprof (假设是监听在8080端口)查看性能数据了. 生成数据</description>
    </item>
    
    <item>
      <title>Golang 中自定义 JSON 转换</title>
      <link>https://emacsist.github.io/2016/10/30/golang-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-json-%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 30 Oct 2016 21:55:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/30/golang-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-json-%E8%BD%AC%E6%8D%A2/</guid>
      <description>起因 Java 中的 Timestamp 转换为 JSON 是长整型，但在 Golang 中，却是完全不同。因为需要将 Java 的代码转换为 Golang，所以遇到这种相互转换的问题。在 Golang中，默</description>
    </item>
    
    <item>
      <title>Go学习</title>
      <link>https://emacsist.github.io/2016/10/18/go%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 18 Oct 2016 19:35:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/18/go%E5%AD%A6%E4%B9%A0/</guid>
      <description>安装多个版本的 go GVM Go依赖管理与 GOPATH 的关系. GOPATH环境变量中可以包含多个目录。 go get 这种方式，它会将依赖下载在$GOPATH环境变量中的第</description>
    </item>
    
    <item>
      <title>MySQL中按条件count</title>
      <link>https://emacsist.github.io/2016/10/17/mysql%E4%B8%AD%E6%8C%89%E6%9D%A1%E4%BB%B6count/</link>
      <pubDate>Mon, 17 Oct 2016 11:51:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/17/mysql%E4%B8%AD%E6%8C%89%E6%9D%A1%E4%BB%B6count/</guid>
      <description>问题 产品中有个业务是定时发通知的，现有的逻辑是，只有通知数&amp;gt;0时，才会发通知，现在PM说要修改为无论有没有消息数，都要在定时的时间发送</description>
    </item>
    
    <item>
      <title>LinuxMint下使用VS code</title>
      <link>https://emacsist.github.io/2016/10/14/linuxmint%E4%B8%8B%E4%BD%BF%E7%94%A8vs-code/</link>
      <pubDate>Fri, 14 Oct 2016 12:39:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/14/linuxmint%E4%B8%8B%E4%BD%BF%E7%94%A8vs-code/</guid>
      <description>LinuxMint下禁用按键 Menu-&amp;gt;Control Center-&amp;gt;Windows-&amp;gt;Behaviour中选择Movement Key中的Super. 安</description>
    </item>
    
    <item>
      <title>MySQL获取分组后的TopN条数据</title>
      <link>https://emacsist.github.io/2016/10/13/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E7%9A%84topn%E6%9D%A1%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 13 Oct 2016 15:30:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/13/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E7%9A%84topn%E6%9D%A1%E6%95%B0%E6%8D%AE/</guid>
      <description>表结构 mysql&amp;gt; desc dce_his_cs_m_jyhqsj; +---------+---------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +---------+---------------+------+-----+---------+----------------+ | QSJDATE | varchar(20) | YES | | NULL | | | QSJDDDD | varchar(8) | NO | PRI | NULL | | | QSJMMMM | varchar(4) | NO | PRI | NULL | | | QSJHYBH | varchar(10) | NO | PRI | NULL | | | QSJKHBH</description>
    </item>
    
    <item>
      <title>PostgreSQL中的json与jsonb</title>
      <link>https://emacsist.github.io/2016/10/09/postgresql%E4%B8%AD%E7%9A%84json%E4%B8%8Ejsonb/</link>
      <pubDate>Sun, 09 Oct 2016 15:30:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/09/postgresql%E4%B8%AD%E7%9A%84json%E4%B8%8Ejsonb/</guid>
      <description>hstore vs json vs jsonb stackoverflow 首先，hstore是一个扩展模块，它允许你保存key=&amp;gt;values键值对，且键值都只能是texts类型（但是，值也允许s</description>
    </item>
    
    <item>
      <title>iptables简单使用例子</title>
      <link>https://emacsist.github.io/2016/10/09/iptables%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Sun, 09 Oct 2016 14:38:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/09/iptables%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</guid>
      <description>保存 sudo iptables-save &amp;gt; iptables.rule 还原 sudo iptables-restore &amp;lt; iptables.rule 持久化 sudo apt-get install iptables-persistent 删除某条规则 sudo iptables -L --line-numbers 然后删除 sudo iptables -D INPUT（即所在类型） 行号 删除所有规则 # 将 INPUT 修改为你想删除的类型,</description>
    </item>
    
    <item>
      <title>PostgreSQL9.6中使用mysql_fdw</title>
      <link>https://emacsist.github.io/2016/10/09/postgresql9.6%E4%B8%AD%E4%BD%BF%E7%94%A8mysql_fdw/</link>
      <pubDate>Sun, 09 Oct 2016 12:22:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/09/postgresql9.6%E4%B8%AD%E4%BD%BF%E7%94%A8mysql_fdw/</guid>
      <description>安装 mysql_fdw SELECT * from pg_available_extensions where name like &#39;%fdw%&#39;; name | default_version | installed_version | comment --------------+-----------------+-------------------+---------------------------------------------------- file_fdw | 1.0 | [null] | foreign-data wrapper for flat file access mysql_fdw | 1.0 | [null] | Foreign data wrapper for querying a MySQL server postgres_fdw | 1.0 | [null] | foreign-data wrapper for remote PostgreSQL servers (3 rows) Time: 1.742 ms 使用 CREATE EXTENSION mysql_fdw; 如果是</description>
    </item>
    
    <item>
      <title>PostgreSQL导入微博数据</title>
      <link>https://emacsist.github.io/2016/09/30/postgresql%E5%AF%BC%E5%85%A5%E5%BE%AE%E5%8D%9A%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 30 Sep 2016 16:04:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/30/postgresql%E5%AF%BC%E5%85%A5%E5%BE%AE%E5%8D%9A%E6%95%B0%E6%8D%AE/</guid>
      <description>微博日志的数据 使用的PG版本为9.6.0 文件的每一行的内容格式如下: {&amp;quot;q&amp;quot;:&amp;quot;keyword&amp;quot;, &amp;quot;result&amp;quot;:&amp;quot;statuses:[{ &amp;quot;id&amp;quot;:xxxx, &amp;quot;created_at&amp;quot;:&amp;quot;Thu Jul 16 12:55:27 +0800 2015&amp;quot; }]&amp;quot;} 关于导入JSON数据，可以参考上一徬 Postgres</description>
    </item>
    
    <item>
      <title>PostgreSQL导入JSON</title>
      <link>https://emacsist.github.io/2016/09/29/postgresql%E5%AF%BC%E5%85%A5json/</link>
      <pubDate>Thu, 29 Sep 2016 15:33:10 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/29/postgresql%E5%AF%BC%E5%85%A5json/</guid>
      <description>过滤Unicode字符 sed -i &#39;s/\u0000//g&#39; json.txt 使用pgfutter Github pgfutter pgfutter --jsonb json 你的json文件 创建唯一索引 CREATE UNIQUE INDEX status_id_uniq ON status ( (data-&amp;gt;&amp;gt;&#39;id&#39;) ); 注意，-&amp;gt;返回的是jsonb</description>
    </item>
    
    <item>
      <title>Spring Boot 中使用MyBatis</title>
      <link>https://emacsist.github.io/2016/09/28/spring-boot-%E4%B8%AD%E4%BD%BF%E7%94%A8mybatis/</link>
      <pubDate>Wed, 28 Sep 2016 16:42:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/28/spring-boot-%E4%B8%AD%E4%BD%BF%E7%94%A8mybatis/</guid>
      <description>pom.xml &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-dbcp&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-dbcp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;build&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;**/*.xml&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;filtering&amp;gt;false&amp;lt;/filtering&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;**/*.*&amp;lt;/include&amp;gt; &amp;lt;include&amp;gt;**/*&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; 注意上面的，如果你的mapper接口与xml文件是放在同一个目录下的</description>
    </item>
    
    <item>
      <title>MySQL中的analyze与optimize</title>
      <link>https://emacsist.github.io/2016/09/26/mysql%E4%B8%AD%E7%9A%84analyze%E4%B8%8Eoptimize/</link>
      <pubDate>Mon, 26 Sep 2016 15:31:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/26/mysql%E4%B8%AD%E7%9A%84analyze%E4%B8%8Eoptimize/</guid>
      <description>analyze 作用： &amp;gt; 分析表主要作用是分析并保存索引的分布. analyze-table MySQL document 语法: ANALYZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE tbl_name [, tbl_name] ... 使用ANALYZE TABLE分析表的过程中，数据库系统会对表加</description>
    </item>
    
    <item>
      <title>PostgreSQL PITR实践</title>
      <link>https://emacsist.github.io/2016/09/19/postgresql-pitr%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 19 Sep 2016 15:21:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/19/postgresql-pitr%E5%AE%9E%E8%B7%B5/</guid>
      <description>初始化示例数据库 ┌─[sky@sky-linux] - [/ihome/db/postgresql] - [2016-09-19 03:22:35] └─[0] &amp;lt;&amp;gt; mkdir pitr-data ┌─[sky@sky-linux] - [/ihome/db/postgresql] - [2016-09-19 03:22:47] └─[0] &amp;lt;&amp;gt; initdb -D pitr-data The</description>
    </item>
    
    <item>
      <title>Redis中缓存策略</title>
      <link>https://emacsist.github.io/2016/09/09/redis%E4%B8%AD%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/</link>
      <pubDate>Fri, 09 Sep 2016 14:21:17 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/09/redis%E4%B8%AD%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/</guid>
      <description>Redis中缓存策略 volatile-lru：从数据集中，将设置了过期时间的key,按最近最少使用的数据淘汰。 volatile-ttl：从数</description>
    </item>
    
    <item>
      <title>生产环境一次Redis导致OOM Killer的问题</title>
      <link>https://emacsist.github.io/2016/09/06/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%80%E6%AC%A1redis%E5%AF%BC%E8%87%B4oom-killer%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 06 Sep 2016 14:18:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/06/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%80%E6%AC%A1redis%E5%AF%BC%E8%87%B4oom-killer%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>Redis 引发系统OOM Killer 昨晚（2016-9-5），生产环境的Redis发生警报，一段时间后，内存被降到50%多（之前一直在90%左右），然后发现R</description>
    </item>
    
    <item>
      <title>《番茄工作法图解》读书笔记</title>
      <link>https://emacsist.github.io/2016/09/01/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%9B%BE%E8%A7%A3%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 01 Sep 2016 17:36:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/01/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%9B%BE%E8%A7%A3%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>目标 番茄工作法是一套简单的工具和流程，用以提升你个人和所在团队的生产力，从而做到: 减轻时间焦虑 提升集中力和注意力，减少中断 增强决策意识 唤醒激</description>
    </item>
    
    <item>
      <title>PostgreSQL SQL收集</title>
      <link>https://emacsist.github.io/2016/08/30/postgresql-sql%E6%94%B6%E9%9B%86/</link>
      <pubDate>Tue, 30 Aug 2016 11:14:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/30/postgresql-sql%E6%94%B6%E9%9B%86/</guid>
      <description>查看是否存在无效索引 SELECT * FROM pg_class, pg_index WHERE pg_index.indisvalid = false AND pg_index.indexrelid = pg_class.oid; 查看大小 查看表大小: \d+ 查看数据库大小: \l+ 查看表，索引及总大小 SELECT table_name, pg_size_pretty(table_size) AS table_size, pg_size_pretty(indexes_size) AS indexes_size, pg_size_pretty(total_size) AS total_size FROM ( SELECT table_name, pg_table_size(table_name) AS</description>
    </item>
    
    <item>
      <title>MySQL VS PostgreSQL 的alter table</title>
      <link>https://emacsist.github.io/2016/08/22/mysql-vs-postgresql-%E7%9A%84alter-table/</link>
      <pubDate>Mon, 22 Aug 2016 17:35:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/22/mysql-vs-postgresql-%E7%9A%84alter-table/</guid>
      <description>版本 PostgreSQL [local]:5432 sky@sky=# select version(); version ----------------------------------------------------------------------------------------------------------- PostgreSQL 9.6beta4 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4, 64-bit (1 row) Time: 0.407 ms [local]:5432 sky@sky=# MySQL mysql&amp;gt; select version(); +-------------------------------------+ | version() | +-------------------------------------+ | 5.7.12-1~exp1+deb.sury.org~trusty+1 | +-------------------------------------+ 1 row in set (0.00 sec) mysql&amp;gt; 测试表 PostgreSQL: [local]:5432 sky@sky=# \d wb_status; Table &amp;quot;public.wb_status&amp;quot; Column | Type | Modifiers ------------------------+-----------------------------+-------------------------------------------------------- id | integer | not null default</description>
    </item>
    
    <item>
      <title>PostgreSQL添加字段以及vacuum full对表的影响</title>
      <link>https://emacsist.github.io/2016/08/22/postgresql%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5%E4%BB%A5%E5%8F%8Avacuum-full%E5%AF%B9%E8%A1%A8%E7%9A%84%E5%BD%B1%E5%93%8D/</link>
      <pubDate>Mon, 22 Aug 2016 17:05:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/22/postgresql%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5%E4%BB%A5%E5%8F%8Avacuum-full%E5%AF%B9%E8%A1%A8%E7%9A%84%E5%BD%B1%E5%93%8D/</guid>
      <description>PostgreSQL添加字段对表的影响 [local]:5432 sky@sky=# select pg_relation_filepath(&#39;testcount&#39;); pg_relation_filepath ---------------------- base/16384/18081 (1 row) Time: 0.163 ms [local]:5432 sky@sky=# ALTER TABLE testcount ADD col [local]:5432 sky@sky=# ALTER TABLE testcount ADD column bb_id int; ALTER TABLE Time: 0.917 ms [local]:5432 sky@sky=# select pg_relation_filepath(&#39;testcount&#39;); pg_relation_filepath ---------------------- base/16384/18081 (1 row) Time: 0.209 ms [local]:5432 sky@sky=# ALTER TABLE testcount ADD</description>
    </item>
    
    <item>
      <title>Terminator启动时恢复layout并执行初始命令</title>
      <link>https://emacsist.github.io/2016/08/22/terminator%E5%90%AF%E5%8A%A8%E6%97%B6%E6%81%A2%E5%A4%8Dlayout%E5%B9%B6%E6%89%A7%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 22 Aug 2016 11:53:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/22/terminator%E5%90%AF%E5%8A%A8%E6%97%B6%E6%81%A2%E5%A4%8Dlayout%E5%B9%B6%E6%89%A7%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%91%BD%E4%BB%A4/</guid>
      <description>因为平时工作中要经常打开多个窗口，然后SSH登录服务器。最后发现到一个神器:Terminator，它可以分割窗口。平时都是一个一个分割窗口，</description>
    </item>
    
    <item>
      <title> PostgreSQL获取部分结果集中再获取最大值最小值的结果集</title>
      <link>https://emacsist.github.io/2016/08/19/postgresql%E8%8E%B7%E5%8F%96%E9%83%A8%E5%88%86%E7%BB%93%E6%9E%9C%E9%9B%86%E4%B8%AD%E5%86%8D%E8%8E%B7%E5%8F%96%E6%9C%80%E5%A4%A7%E5%80%BC%E6%9C%80%E5%B0%8F%E5%80%BC%E7%9A%84%E7%BB%93%E6%9E%9C%E9%9B%86/</link>
      <pubDate>Fri, 19 Aug 2016 14:37:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/19/postgresql%E8%8E%B7%E5%8F%96%E9%83%A8%E5%88%86%E7%BB%93%E6%9E%9C%E9%9B%86%E4%B8%AD%E5%86%8D%E8%8E%B7%E5%8F%96%E6%9C%80%E5%A4%A7%E5%80%BC%E6%9C%80%E5%B0%8F%E5%80%BC%E7%9A%84%E7%BB%93%E6%9E%9C%E9%9B%86/</guid>
      <description>PostgreSQL获取部分结果集中再获取最大值最小值的结果集 假设表结构如下。想要获取create_at在某时间范围的内的，最大的以及最小的</description>
    </item>
    
    <item>
      <title> PostgreSQL9.6并行查询</title>
      <link>https://emacsist.github.io/2016/08/18/postgresql9.6%E5%B9%B6%E8%A1%8C%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Thu, 18 Aug 2016 15:08:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/18/postgresql9.6%E5%B9%B6%E8%A1%8C%E6%9F%A5%E8%AF%A2/</guid>
      <description>并行查询 这个是PostgreSQL 9.6才开始有的。 测试环境是4核心的i5CPU，其他配置为PostgreSQL默认. 测试数据 [local]:5432 sky@sky=# CREATE TABLE testcount(id int); CREATE</description>
    </item>
    
    <item>
      <title>PostgreSQL的psql配置</title>
      <link>https://emacsist.github.io/2016/08/18/postgresql%E7%9A%84psql%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 18 Aug 2016 12:41:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/18/postgresql%E7%9A%84psql%E9%85%8D%E7%BD%AE/</guid>
      <description>~/.psqlrc 内容如下: -- Found this on thoughtbot here: -- https://robots.thoughtbot.com/improving-the-command-line-postgres-experience -- and it fixes problems with psql, some I didn&#39;t even know I had. -- -- Set up a nice friendly prompt \set PROMPT1 &#39;%[%033[1m%]%M %n@%/%R%[%033[0m%]%# &#39; \set PROMPT2 &#39;[more] %R &amp;gt; &#39; -- By default, NULL displays as an empty space. Is it actually an empty -- string, or is it null? This makes that</description>
    </item>
    
    <item>
      <title>PostgreSQL服务器参数配置</title>
      <link>https://emacsist.github.io/2016/08/12/postgresql%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 12 Aug 2016 17:24:01 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/12/postgresql%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</guid>
      <description>内存相关 shared_buffers 这个参数决定了有多少内存将用于PostgreSQL的数据缓存.当多个会话从同一张表中请求相同数据时，shared_buffers保</description>
    </item>
    
    <item>
      <title>PostgreSQL中文全文搜索</title>
      <link>https://emacsist.github.io/2016/08/11/postgresql%E4%B8%AD%E6%96%87%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Thu, 11 Aug 2016 16:39:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/11/postgresql%E4%B8%AD%E6%96%87%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/</guid>
      <description>安装 zhparser zhparser 使用 创建测试表: create table ts (name varchar(1024)); sky=# select * from ts limit 50; name ------------------------------ 中国人民 中国人民解放军 中国人民解放军，军队 中国军人 中国军队 中国军队1 中国军队一二三 中国军</description>
    </item>
    
    <item>
      <title>PostgreSQL搭建复制启动报 invalid record length at</title>
      <link>https://emacsist.github.io/2016/08/11/postgresql%E6%90%AD%E5%BB%BA%E5%A4%8D%E5%88%B6%E5%90%AF%E5%8A%A8%E6%8A%A5-invalid-record-length-at/</link>
      <pubDate>Thu, 11 Aug 2016 14:05:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/11/postgresql%E6%90%AD%E5%BB%BA%E5%A4%8D%E5%88%B6%E5%90%AF%E5%8A%A8%E6%8A%A5-invalid-record-length-at/</guid>
      <description>信息 ╭─sky@sky-linux /ihome/db/postgresql ╰─➤ ./current/bin/pg_ctl -D slave-data start 1 ↵ server starting ╭─sky@sky-linux /ihome/db/postgresql ╰─➤ LOG: database system was shut down in recovery at 2016-08-11 10:57:31 CST LOG: entering standby mode LOG: consistent recovery state reached at</description>
    </item>
    
    <item>
      <title>PostgreSQL查看复制状态</title>
      <link>https://emacsist.github.io/2016/08/11/postgresql%E6%9F%A5%E7%9C%8B%E5%A4%8D%E5%88%B6%E7%8A%B6%E6%80%81/</link>
      <pubDate>Thu, 11 Aug 2016 11:26:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/11/postgresql%E6%9F%A5%E7%9C%8B%E5%A4%8D%E5%88%B6%E7%8A%B6%E6%80%81/</guid>
      <description>查看复制状态 在master上执行 sky=# select * from pg_stat_replication; -[ RECORD 1 ]----+------------------------------ pid | 13321 usesysid | 17019 usename | replication application_name | walreceiver client_addr | 10.0.0.81 client_hostname | client_port | 42809 backend_start | 2016-08-11 10:57:35.856289+08 backend_xmin | state | streaming sent_location | 1/E0CE9750 write_location | 1/E0CE9750 flush_location | 1/E0CE9750 replay_location | 1/E0CE9750 sync_priority | 0 sync_state</description>
    </item>
    
    <item>
      <title>批量操作中数据库死锁的解决方法</title>
      <link>https://emacsist.github.io/2016/08/08/%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 08 Aug 2016 15:56:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/08/%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>原因 在生产环境中, 发现数据库经常报死锁.排查问题后,发现是由于RabbitMQ监听器, 批量处理SQL: insert ... on duplicate key update ... 这类SQL引起. 解决 在添</description>
    </item>
    
    <item>
      <title>logback启动停留在 Registering current configuration as safe fallback point</title>
      <link>https://emacsist.github.io/2016/07/28/logback%E5%90%AF%E5%8A%A8%E5%81%9C%E7%95%99%E5%9C%A8-registering-current-configuration-as-safe-fallback-point/</link>
      <pubDate>Thu, 28 Jul 2016 17:43:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/28/logback%E5%90%AF%E5%8A%A8%E5%81%9C%E7%95%99%E5%9C%A8-registering-current-configuration-as-safe-fallback-point/</guid>
      <description>问题 今天升级 Spring-data-redis(1.3.0 -&amp;gt; 1.6.4). Jedis(2.3.2 -&amp;gt; 2.7.3) 修改了Jar包的版本后,发现启动不了.启动信息一直停留在类似以下信息里: 17:00:05,421 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.weibosdk] to DEBUG 17:00:05,421 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to</description>
    </item>
    
    <item>
      <title>Mac下安装GNU工具集</title>
      <link>https://emacsist.github.io/2016/07/21/mac%E4%B8%8B%E5%AE%89%E8%A3%85gnu%E5%B7%A5%E5%85%B7%E9%9B%86/</link>
      <pubDate>Thu, 21 Jul 2016 22:37:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/21/mac%E4%B8%8B%E5%AE%89%E8%A3%85gnu%E5%B7%A5%E5%85%B7%E9%9B%86/</guid>
      <description>安装 Homebrew ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; 修改 .bashrc 或者 .zshrc 添加以下内容 export PATH=&amp;quot;$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH&amp;quot; 安装 GNU Core Command Line Tools brew install coreutils brew install binutils brew install diffutils brew install ed --default-names brew install findutils --with-default-names brew install gawk brew install gnu-indent --with-default-names brew install gnu-sed --with-default-names brew install gnu-tar --with-default-names brew install gnu-which --with-default-names brew install gnutls</description>
    </item>
    
    <item>
      <title>Mybatis代码片段</title>
      <link>https://emacsist.github.io/2016/07/21/mybatis%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</link>
      <pubDate>Thu, 21 Jul 2016 16:21:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/21/mybatis%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</guid>
      <description>批处理 &amp;lt;select id=&amp;quot;getAdsByGroupIds&amp;quot; resultMap=&amp;quot;adInfoWithGroupId&amp;quot;&amp;gt; SELECT ai.*, gam.group_id FROM group_ad_mapping AS gam LEFT JOIN ad_info AS ai ON gam.creative_id = ai.creative_id WHERE gam.group_id in &amp;lt;foreach collection=&amp;quot;list&amp;quot; item=&amp;quot;item&amp;quot; index=&amp;quot;index&amp;quot; separator=&amp;quot;,&amp;quot; open=&amp;quot;(&amp;quot; close=&amp;quot;)&amp;quot;&amp;gt; #{item} &amp;lt;/foreach&amp;gt; ORDER BY ai.create_at DESC &amp;lt;/select&amp;gt; 一对多 java类 public class SalesLead { private Long id; private Long clientId; private Integer userId; private Integer salesUserId; private Integer agentUserId; private Integer saleStatus =</description>
    </item>
    
    <item>
      <title>SpringMVC单元测试controller</title>
      <link>https://emacsist.github.io/2016/07/21/springmvc%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95controller/</link>
      <pubDate>Thu, 21 Jul 2016 11:34:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/21/springmvc%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95controller/</guid>
      <description>import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpServletRequest; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.test.context.web.WebAppConfiguration; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.MvcResult; import org.springframework.test.web.servlet.setup.MockMvcBuilders; import org.springframework.web.context.WebApplicationContext; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*; /** * Created by sky on 16-7-20. */ @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration @ContextConfiguration(&amp;quot;classpath:spring-servlet.xml&amp;quot;) public class TestMVC { @Autowired WebApplicationContext wac; @Autowired MockHttpSession session; @Autowired MockHttpServletRequest request; private MockMvc mockMvc; @Before public void setup() { this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(); }</description>
    </item>
    
    <item>
      <title>JVM性能排查神器 greys-anatomy</title>
      <link>https://emacsist.github.io/2016/07/15/jvm%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5%E7%A5%9E%E5%99%A8-greys-anatomy/</link>
      <pubDate>Fri, 15 Jul 2016 12:11:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/15/jvm%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5%E7%A5%9E%E5%99%A8-greys-anatomy/</guid>
      <description>这里只是记录下这个工具, 而不是使用手册, 因为Github greys-anatomy上已经有了非常详细的手册.</description>
    </item>
    
    <item>
      <title>MySQL中USE INDEX 和 FORCE INDEX</title>
      <link>https://emacsist.github.io/2016/07/15/mysql%E4%B8%ADuse-index-%E5%92%8C-force-index/</link>
      <pubDate>Fri, 15 Jul 2016 11:40:37 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/15/mysql%E4%B8%ADuse-index-%E5%92%8C-force-index/</guid>
      <description>问题 在一次生产环境排查性能问题时, 发现有个请求在一些用户的数据量比较大的情况下, 最高耗时差不多要3s. 而且还是一个轮询的请求. 原因 在排查问题</description>
    </item>
    
    <item>
      <title>Git自动化部署项目</title>
      <link>https://emacsist.github.io/2016/07/13/git%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Wed, 13 Jul 2016 17:57:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/13/git%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</guid>
      <description>操作步骤 创建一个裸仓库 mkdir /home/sky/auto/git cd /home/sky/auto/git git init --bare . 添加一个git勾子(就是执行提交代码后的脚本, 这里可以用来执行你部署的脚本就完成自动部署啦.) 创建完裸</description>
    </item>
    
    <item>
      <title>Maven配置远程仓库</title>
      <link>https://emacsist.github.io/2016/07/13/maven%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Wed, 13 Jul 2016 11:53:11 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/13/maven%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>&amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;repo2&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://repo2.maven.org/maven2/&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;aliyun&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public/&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; 配置成阿里云的服务, 在国内速度和稳定性都更好点.</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习九之远程调试Tomcat自身</title>
      <link>https://emacsist.github.io/2016/07/07/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%9D%E4%B9%8B%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95tomcat%E8%87%AA%E8%BA%AB/</link>
      <pubDate>Thu, 07 Jul 2016 18:11:28 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/07/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%9D%E4%B9%8B%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95tomcat%E8%87%AA%E8%BA%AB/</guid>
      <description>如果我们想要在远程服务器上, 来调试Tomcat自身的话, 那应该如何做呢. 今天本想为Tomcat添加一个功能时, 发现配置一直没生效, 而且Tom</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习八之Valve组件</title>
      <link>https://emacsist.github.io/2016/07/06/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AB%E4%B9%8Bvalve%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 06 Jul 2016 18:09:09 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/06/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AB%E4%B9%8Bvalve%E7%BB%84%E4%BB%B6/</guid>
      <description>Tomcat内部Valve组件,与我们普通使用的Filter, Interceptor这些概念非常类似.只不过,Valve只是针对Tomcat</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习七之请求如何从Tomcat到我们的SpringMVC</title>
      <link>https://emacsist.github.io/2016/06/30/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%83%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E4%BB%8Etomcat%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84springmvc/</link>
      <pubDate>Thu, 30 Jun 2016 10:43:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/30/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%83%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E4%BB%8Etomcat%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84springmvc/</guid>
      <description>一次请求的调用栈 从上面的线程调用栈,可以看到一次请求的调用过程. 注意中间那些以Valve结尾的类,它是Tomcat的里的责任链的组件.每一个</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习六之加载webapps</title>
      <link>https://emacsist.github.io/2016/06/29/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AD%E4%B9%8B%E5%8A%A0%E8%BD%BDwebapps/</link>
      <pubDate>Wed, 29 Jun 2016 15:20:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/29/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AD%E4%B9%8B%E5%8A%A0%E8%BD%BDwebapps/</guid>
      <description>Tomcat中的层次 Catalina -&amp;gt; Server --- |---globalNamingResources |---namingContextListener |---多个Service --------------------| |---catalina.home |---Engine(每个Service最多一个) ---多个Container</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习五之Tomcat日志系统</title>
      <link>https://emacsist.github.io/2016/06/29/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%94%E4%B9%8Btomcat%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 29 Jun 2016 11:06:13 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/29/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%94%E4%B9%8Btomcat%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid>
      <description>juli 默认情况下，Tomcat使用自身的juli作为Tomcat内部的日志处理系统.它的源码，在Tomcat源码结构下的org.apache.j</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习四之Catalina类</title>
      <link>https://emacsist.github.io/2016/06/28/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%9B%9B%E4%B9%8Bcatalina%E7%B1%BB/</link>
      <pubDate>Tue, 28 Jun 2016 14:24:10 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/28/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%9B%9B%E4%B9%8Bcatalina%E7%B1%BB/</guid>
      <description>StringManager 每个包一个StringManager。这样子，对同一个包(以及同一个locale)来说，它只有一个实例的。实现原理: private static final Map&amp;lt;String, Map&amp;lt;Locale,StringManager&amp;gt;&amp;gt; managers = new Hashtable&amp;lt;&amp;gt;(); ke</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习三之SecurityClassLoad</title>
      <link>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%89%E4%B9%8Bsecurityclassload/</link>
      <pubDate>Mon, 27 Jun 2016 18:04:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%89%E4%B9%8Bsecurityclassload/</guid>
      <description>关于Java的 SecurityManager 默认情况下,JVM是不会启用SecurityManager的，想要开启，则需要在启动时指定-Djava.security.m</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习二之初始化classloader</title>
      <link>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%8C%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96classloader/</link>
      <pubDate>Mon, 27 Jun 2016 16:58:51 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%8C%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96classloader/</guid>
      <description>Main函数启动 源码org.apache.catalina.startup.Bootstrap这个是启动类，main函数就在这个类中. 第一件</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习一之导入到IDEA</title>
      <link>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B9%8B%E5%AF%BC%E5%85%A5%E5%88%B0idea/</link>
      <pubDate>Mon, 27 Jun 2016 16:44:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B9%8B%E5%AF%BC%E5%85%A5%E5%88%B0idea/</guid>
      <description>导入Tomcat源码 这里使用的Tomcat的版本为apache-tomcat-8.0.36，源码目录在/ihome/java/tomcat/</description>
    </item>
    
    <item>
      <title>Maven多模块中使用Sonar</title>
      <link>https://emacsist.github.io/2016/06/21/maven%E5%A4%9A%E6%A8%A1%E5%9D%97%E4%B8%AD%E4%BD%BF%E7%94%A8sonar/</link>
      <pubDate>Tue, 21 Jun 2016 18:30:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/21/maven%E5%A4%9A%E6%A8%A1%E5%9D%97%E4%B8%AD%E4%BD%BF%E7%94%A8sonar/</guid>
      <description>单模块使用 pom.xml中添加 &amp;lt;reporting&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.sonarsource.scanner.maven&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sonar-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1&amp;lt;/version&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/reporting&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;sonar.java.source&amp;gt;1.7&amp;lt;/sonar.java.source&amp;gt; &amp;lt;/properties&amp;gt; 生成报告: mvn sonar:sonar -Dsonar.host.url=http://10.0.0.10:9000 一个项目多模块使用 在父pom.xml里添加 &amp;lt;reporting&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.sonarsource.scanner.maven&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sonar-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1&amp;lt;/version&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/reporting&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;sonar.java.source&amp;gt;1.7&amp;lt;/sonar.java.source&amp;gt; &amp;lt;/properties&amp;gt; 生成</description>
    </item>
    
    <item>
      <title>使用SLF4J以及Spring中遇到的难以理解的问题</title>
      <link>https://emacsist.github.io/2016/06/20/%E4%BD%BF%E7%94%A8slf4j%E4%BB%A5%E5%8F%8Aspring%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E4%BB%A5%E7%90%86%E8%A7%A3%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 20 Jun 2016 11:10:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/20/%E4%BD%BF%E7%94%A8slf4j%E4%BB%A5%E5%8F%8Aspring%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E4%BB%A5%E7%90%86%E8%A7%A3%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>问题 问题1 Registering current configuration as safe fallback point 19:48:05,562 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration. 19:48:05,564 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@5f7db6c4 - Registering current configuration as safe fallback point 问题2 root of factory hierarchy SpringMVC启动时，就一直停留在这里 原因 以上这两个问题，</description>
    </item>
    
    <item>
      <title>关于Tomcat关闭时注意的问题</title>
      <link>https://emacsist.github.io/2016/06/17/%E5%85%B3%E4%BA%8Etomcat%E5%85%B3%E9%97%AD%E6%97%B6%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 17 Jun 2016 14:39:28 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/17/%E5%85%B3%E4%BA%8Etomcat%E5%85%B3%E9%97%AD%E6%97%B6%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>测试环境: Spring Boot MVC + RabbitMQ + Task + Tomcat Controller层 测试代码 @RequestMapping(&amp;quot;/world&amp;quot;) @ResponseBody public String hello() throws InterruptedException { System.out.println(&amp;quot;in controller&amp;quot;); for(int i=0; i&amp;lt;100000000; i++){ System.out.println(&amp;quot;in &amp;quot; + i + &amp;quot; hehe&amp;quot;); } System.out.println(&amp;quot;out controller&amp;quot;); return &amp;quot;OK.&amp;quot;; } 关闭方式： shutdown curl -X POST http://localhost:8080/shutdown 没有执行</description>
    </item>
    
    <item>
      <title>生产环境中禁止Redis执行Keys命令</title>
      <link>https://emacsist.github.io/2016/06/15/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%A6%81%E6%AD%A2redis%E6%89%A7%E8%A1%8Ckeys%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 15 Jun 2016 17:17:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/15/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%A6%81%E6%AD%A2redis%E6%89%A7%E8%A1%8Ckeys%E5%91%BD%E4%BB%A4/</guid>
      <description>配置文件 将想要禁止的命令，按以下格式加入配置文件中 rename-command FLUSHALL &amp;quot;&amp;quot; rename-command FLUSHDB &amp;quot;&amp;quot; rename-command KEYS &amp;quot;&amp;quot; 在Spring Data Redis 中使用Scan代替 keys 注意： 版本要大于 1.6.0.REL</description>
    </item>
    
    <item>
      <title>源码安装MySQL 5.6.X</title>
      <link>https://emacsist.github.io/2016/06/07/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql-5.6.x/</link>
      <pubDate>Tue, 07 Jun 2016 14:43:58 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/07/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql-5.6.x/</guid>
      <description>下载 [Download MySQL 5.6.31]() 假设解压后的路径在 /home/name/mysql/mysql-5.6.31-src.准备安装到目录/home/name/mysq</description>
    </item>
    
    <item>
      <title>Redis合并两实例的数据</title>
      <link>https://emacsist.github.io/2016/06/02/redis%E5%90%88%E5%B9%B6%E4%B8%A4%E5%AE%9E%E4%BE%8B%E7%9A%84%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 02 Jun 2016 16:31:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/02/redis%E5%90%88%E5%B9%B6%E4%B8%A4%E5%AE%9E%E4%BE%8B%E7%9A%84%E6%95%B0%E6%8D%AE/</guid>
      <description>AOF 与 RDB 这两个是Redis的备份方式。一个是快照（RDB），一个是记录所有的命令到文件（AOF,类似MySQL的binlog） RDB的备份与恢</description>
    </item>
    
    <item>
      <title>Logstash安装及使用</title>
      <link>https://emacsist.github.io/2016/06/01/logstash%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 01 Jun 2016 18:11:51 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/01/logstash%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>依赖：Java运行环境。这个就不多写了。 安装Logstash Download Logstash 这时以2.3.1 带全插件的版本 下载完后，假设安装在目录/ihome/ELK/</description>
    </item>
    
    <item>
      <title>Java并发操作MySQL数据库的读写注意</title>
      <link>https://emacsist.github.io/2016/06/01/java%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%BB%E5%86%99%E6%B3%A8%E6%84%8F/</link>
      <pubDate>Wed, 01 Jun 2016 11:25:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/01/java%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%BB%E5%86%99%E6%B3%A8%E6%84%8F/</guid>
      <description>情景模拟： 线程1是一个task,然后分批select数据，然后可能会对这些select的结果进行更新 线程2是一个业务, 它也可能会对这些数据进</description>
    </item>
    
    <item>
      <title>Maven打包可运行Jar</title>
      <link>https://emacsist.github.io/2016/05/31/maven%E6%89%93%E5%8C%85%E5%8F%AF%E8%BF%90%E8%A1%8Cjar/</link>
      <pubDate>Tue, 31 May 2016 19:16:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/31/maven%E6%89%93%E5%8C%85%E5%8F%AF%E8%BF%90%E8%A1%8Cjar/</guid>
      <description>&amp;lt;plugins&amp;gt; &amp;lt;!-- 复制依赖的插件 --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-dependency-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;copy-dependencies&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;copy-dependencies&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;outputDirectory&amp;gt;${project.build.directory}/lib&amp;lt;/outputDirectory&amp;gt; &amp;lt;overWriteReleases&amp;gt;false&amp;lt;/overWriteReleases&amp;gt; &amp;lt;overWriteSnapshots&amp;gt;true&amp;lt;/overWriteSnapshots&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;archive&amp;gt; &amp;lt;manifest&amp;gt; &amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt; &amp;lt;classpathPrefix&amp;gt;lib/&amp;lt;/classpathPrefix&amp;gt; &amp;lt;mainClass&amp;gt;com.weibosdk.listener.boot.ListenerBootstrap&amp;lt;/mainClass&amp;gt; &amp;lt;/manifest&amp;gt; &amp;lt;/archive&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-shade-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;shade&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;createDependencyReducedPom&amp;gt;false&amp;lt;/createDependencyReducedPom&amp;gt; &amp;lt;transformers&amp;gt; &amp;lt;transformer implementation=&amp;quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&amp;quot;&amp;gt; &amp;lt;!-- Main函数所在类 --&amp;gt; &amp;lt;mainClass&amp;gt;com.weibosdk.listener.boot.ListenerBootstrap&amp;lt;/mainClass&amp;gt; &amp;lt;/transformer&amp;gt; &amp;lt;!-- S</description>
    </item>
    
    <item>
      <title>redis常用技巧</title>
      <link>https://emacsist.github.io/2016/05/26/redis%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 26 May 2016 12:08:05 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/26/redis%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>批量删除key cat /tmp/keys.txst | xargs -I{} -P 3 -t -n 10 ./redis-cli -p 6379 -n 0 del {} 查询QPS watch -n 60 &#39;/home/redis/bin/redis-cli -h 10.*.*.* -p 6379 info |grep total_commands_processe &amp;gt;&amp;gt; /tmp/qps2.txt &amp;amp;&amp;amp; date &amp;gt;&amp;gt; /tmp/qps2.txt&#39;</description>
    </item>
    
    <item>
      <title>Java监控方法调用树以及方法性能</title>
      <link>https://emacsist.github.io/2016/05/23/java%E7%9B%91%E6%8E%A7%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%A0%91%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95%E6%80%A7%E8%83%BD/</link>
      <pubDate>Mon, 23 May 2016 15:57:18 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/23/java%E7%9B%91%E6%8E%A7%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%A0%91%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95%E6%80%A7%E8%83%BD/</guid>
      <description>JETM 下载 Download 使用 @Test public void hello() throws InterruptedException { BasicEtmConfigurator.configure(true); etmMonitor.start(); EtmPoint etmPoint = etmMonitor.createPoint(&amp;quot;SETest:hello&amp;quot;); System.out.println(&amp;quot;hello world&amp;quot;); Thread.currentThread().sleep(2 * 1000); nested(); nested(); sayf(); etmPoint.collect(); // visualize results etmMonitor.render(new SimpleTextRenderer()); etmMonitor.stop(); } private static void nested() throws InterruptedException { EtmPoint etmPoint = etmMonitor.createPoint(&amp;quot;SETest:nested&amp;quot;); System.out.println(&amp;quot;in nested&amp;quot;); Thread.currentThread().sleep(2*1000); etmPoint.collect(); } private static void sayf() throws InterruptedException { EtmPoint etmPoint = etmMonitor.createPoint(&amp;quot;SETest:sayf&amp;quot;); System.out.println(&amp;quot;in nested&amp;quot;); Thread.currentThread().sleep(2*1000); nested(); etmPoint.collect(); } 输出</description>
    </item>
    
    <item>
      <title>Redis集群之twemproxy</title>
      <link>https://emacsist.github.io/2016/05/18/redis%E9%9B%86%E7%BE%A4%E4%B9%8Btwemproxy/</link>
      <pubDate>Wed, 18 May 2016 14:17:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/18/redis%E9%9B%86%E7%BE%A4%E4%B9%8Btwemproxy/</guid>
      <description>安装 git clone https://github.com/twitter/twemproxy.git cd twemproxy autoreconf -fvi ./configure --enable-debug=full --prefix=/ihome/db/redis/twemproxy make -j8 make install 安装完毕的结构： ╭─sky@sky-linux /ihome/db/redis/twemproxy ╰─➤ tree . . ├── sbin │ └── nutcracker └── share └── man └── man8 └──</description>
    </item>
    
    <item>
      <title>ZooKeeper之发布-订阅例子</title>
      <link>https://emacsist.github.io/2016/05/13/zookeeper%E4%B9%8B%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Fri, 13 May 2016 17:41:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/13/zookeeper%E4%B9%8B%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E4%BE%8B%E5%AD%90/</guid>
      <description>pubisher public static void main(String[] args) throws Exception { RetryPolicy retryPolicy = new RetryNTimes(3, 2 * 1000); CuratorFramework cf = CuratorFrameworkFactory.newClient(&amp;quot;127.0.0.1:2181&amp;quot;, retryPolicy); cf.start(); Stat stat = cf.checkExists().forPath(&amp;quot;/topic&amp;quot;); if (stat == null) { cf.create().forPath(&amp;quot;/topic&amp;quot;); } cf.setData().forPath(&amp;quot;/topic&amp;quot;, &amp;quot;hello new data&amp;quot;.getBytes()); cf.close(); } subscriber public static void main(String[] args) throws Exception { RetryPolicy retryPolicy = new RetryNTimes(3, 2 * 1000); CuratorFramework cf = CuratorFrameworkFactory.newClient(&amp;quot;127.0.0.1:2181&amp;quot;, retryPolicy); cf.getCuratorListenable().addListener(new CuratorListener() { @Override public void eventReceived(CuratorFramework client,</description>
    </item>
    
    <item>
      <title>ZooKeeper之分布式协调例子</title>
      <link>https://emacsist.github.io/2016/05/13/zookeeper%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Fri, 13 May 2016 15:29:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/13/zookeeper%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E4%BE%8B%E5%AD%90/</guid>
      <description>首先，启动ZooKeeper集群模式或独立模式. 创建三个程序（即三个不同的Java进程，注意，是进程，不是线程）来模拟分布式协调 POM 依赖 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;</description>
    </item>
    
    <item>
      <title>ZooKeeper服务器搭建</title>
      <link>https://emacsist.github.io/2016/05/12/zookeeper%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 12 May 2016 18:22:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/12/zookeeper%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</guid>
      <description>前提是要安装好Java环境 ^_^ 安装 Download 然后解压到安装目录即可.这里假设是安装在/ihome/java/zookeeper-3.4.8 启动模式 配置</description>
    </item>
    
    <item>
      <title>MySQL备份实践</title>
      <link>https://emacsist.github.io/2016/05/09/mysql%E5%A4%87%E4%BB%BD%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 09 May 2016 15:28:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/09/mysql%E5%A4%87%E4%BB%BD%E5%AE%9E%E8%B7%B5/</guid>
      <description>binlog 查看是否开启了binlog mysql&amp;gt; show variables like &#39;log_bin&#39;; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | log_bin | OFF | +---------------+-------+ 1 row in set (0.00 sec) mysql&amp;gt; 开启binlog 在配置文件my.cnf里添加以下内容，然后重启</description>
    </item>
    
    <item>
      <title>基于Redis分布式锁Redisson使用例子</title>
      <link>https://emacsist.github.io/2016/05/06/%E5%9F%BA%E4%BA%8Eredis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81redisson%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Fri, 06 May 2016 16:31:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/06/%E5%9F%BA%E4%BA%8Eredis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81redisson%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</guid>
      <description>@Test public void testDistributeLock() throws InterruptedException { final CountDownLatch cdl = new CountDownLatch(10); long time = System.currentTimeMillis(); RedissonClient redisson = Redisson.create(); final RLock rLock = redisson.getLock(&amp;quot;hello-lock&amp;quot;); final Map&amp;lt;String, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(1); map.put(&amp;quot;hello&amp;quot;, 0); for (int i = 0; i &amp;lt; 10; i++) { new Thread(new Runnable() { @Override public void run() { rLock.lock(10, TimeUnit.SECONDS); map.put(&amp;quot;hello&amp;quot;, map.get(&amp;quot;hello&amp;quot;) + 1); rLock.unlock(); cdl.countDown(); } }).start(); } cdl.await(); System.out.println(&amp;quot;result -&amp;gt;&amp;quot; + map.get(&amp;quot;hello&amp;quot;));</description>
    </item>
    
    <item>
      <title>如果是我startup JavaWeb项目开发，我会这样子做</title>
      <link>https://emacsist.github.io/2016/04/29/%E5%A6%82%E6%9E%9C%E6%98%AF%E6%88%91startup-javaweb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%88%91%E4%BC%9A%E8%BF%99%E6%A0%B7%E5%AD%90%E5%81%9A/</link>
      <pubDate>Fri, 29 Apr 2016 14:13:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/04/29/%E5%A6%82%E6%9E%9C%E6%98%AF%E6%88%91startup-javaweb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%88%91%E4%BC%9A%E8%BF%99%E6%A0%B7%E5%AD%90%E5%81%9A/</guid>
      <description>Maven 模块化开发 按功能模块？ 如果按功能分模块的话，比较复杂，难免会有代码循环依赖的问题。 按分层模块？ 这个相对比较简单点。 然后还要区分不同的环境下</description>
    </item>
    
    <item>
      <title>MySQL中数据丢失概念及解决办法</title>
      <link>https://emacsist.github.io/2016/04/29/mysql%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Fri, 29 Apr 2016 11:06:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/04/29/mysql%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>概念 即数据库告诉我这次事务成功了，但当我下次读取数据时，却发现数据不正确。这就是数据丢失. 原因 看个场景, redo log丢失造成的主从不一致： bin</description>
    </item>
    
    <item>
      <title>Percona的MySQL维护及监控工具使用</title>
      <link>https://emacsist.github.io/2016/04/25/percona%E7%9A%84mysql%E7%BB%B4%E6%8A%A4%E5%8F%8A%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 25 Apr 2016 18:24:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/04/25/percona%E7%9A%84mysql%E7%BB%B4%E6%8A%A4%E5%8F%8A%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>安装 Doc 使用 pt-mysql-summary pt-mysql-summary --host=127.0.0.1 --port=6606 --password=xxx 说明： 显示MySQL服务器的概况. pt-align 将输出的文本对齐. 例子: #echo -e &amp;quot;hello owrld\n Hello world&amp;quot; | pt-align hello owrld Hello world 如果没有pt-align，则输出如下</description>
    </item>
    
    <item>
      <title>HAProxy安装及使用</title>
      <link>https://emacsist.github.io/2016/04/21/haproxy%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 21 Apr 2016 16:00:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/04/21/haproxy%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>下载 HA Proxy 编译，安装 这里以1.6.4版本，ubuntu 14.04 LTS ，解压后的目录为/ihome/haproxy/haproxy-1.6.4，安装目录为</description>
    </item>
    
    <item>
      <title>RabbitMQ 3.6 集群使用</title>
      <link>https://emacsist.github.io/2016/04/20/rabbitmq-3.6-%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 20 Apr 2016 18:26:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/04/20/rabbitmq-3.6-%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8/</guid>
      <description>创建集群 先把所有的插件都禁用先，避免因插件的端口问题导致集群启动不了. 默认插件监听端口: rabbit_stomp_listenersup:::61613 rabbit_mqtt_listenersup:::1883 rabbitmq_management:::15672 rabbitmq-plugins -n node1@localhost list rabbitmq-plugins -n node1@localhost disable rabbitmq_management rabbitmq-plugins -n node1@localhost disable rabbitmq_mqtt rabbitmq-plugins -n node1@localhost disable rabbitmq_stomp 集群节点</description>
    </item>
    
    <item>
      <title>MySQL 为生产环境在线添加字段</title>
      <link>https://emacsist.github.io/2016/04/11/mysql-%E4%B8%BA%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%9C%A8%E7%BA%BF%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5/</link>
      <pubDate>Mon, 11 Apr 2016 18:14:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/04/11/mysql-%E4%B8%BA%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%9C%A8%E7%BA%BF%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5/</guid>
      <description>create table new_table_name like old_table_name; alter table new_table_name add column new_column int not null default 0 comment &#39;your comment&#39;; insert into new_table_name (col1, col2, col3...) select (col1, col2, col3...) from old_table_name where id &amp;lt; xxxx; begin; insert into new_table_name (col1, col2, col3...) select (col1, col2, col3...) from old_table_name where id &amp;gt;= xxxx rename old_table_name to old_table_bak, new_table_name to old_table_name; commit;</description>
    </item>
    
    <item>
      <title>RabbitMQ生产环境部署</title>
      <link>https://emacsist.github.io/2016/03/30/rabbitmq%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 30 Mar 2016 10:54:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/30/rabbitmq%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</guid>
      <description>安装 安装好erlang环境 sudo apt-get install erlang erlang-dev 下载rabbitmq Download 解压到你想要存放的目录，例如~/rabbitmq/ rabbitmq 的管理 配置好环境变量 RABBITMQ_HOME=&amp;quot;/ihome/rabbitmq/rabbitmq_server-3.6.1&amp;quot; 配置文件</description>
    </item>
    
    <item>
      <title>MySQL杂项资料收集</title>
      <link>https://emacsist.github.io/2016/03/08/mysql%E6%9D%82%E9%A1%B9%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</link>
      <pubDate>Tue, 08 Mar 2016 16:11:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/08/mysql%E6%9D%82%E9%A1%B9%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</guid>
      <description>关于 MySQL 5.6 ICP ICP（index condition pushdown） 参考资料: csdn-melody_mr 关于 字符串 与 整型对比 的查询与索引 查询中 number compare string： 如果有索引，那么就可以利</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之复制</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Sun, 06 Mar 2016 20:14:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A4%8D%E5%88%B6/</guid>
      <description>MySQL通过 3个线程来完成主从库间的数据复制：其中Binlog Dump线程跑在主库上， I/O线程和SQL线程跑在从库上。当在从库上启动复制</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之锁</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%94%81/</link>
      <pubDate>Sun, 06 Mar 2016 17:32:50 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%94%81/</guid>
      <description>锁类型 表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。 行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之优化</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 06 Mar 2016 15:53:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BC%98%E5%8C%96/</guid>
      <description>查看服务器SQL及连接状态 查看当前执行的各种SQL执行频率: 全局性: show global status like &#39;%Com_%&#39;; 当前会话: show status like &#39;%Com_%&#39;; 重点查看: Com_insert: insert次数 Com_select: select次</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之SQL模式</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8Bsql%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 06 Mar 2016 15:28:01 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8Bsql%E6%A8%A1%E5%BC%8F/</guid>
      <description>查看默认的SQL Mode mysql&amp;gt; select @@sql_mode; +-------------------------------------------------------------------------------------------------------------------------------------------+ | @@sql_mode | +-------------------------------------------------------------------------------------------------------------------------------------------+ | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION | +-------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.01 sec) 设置模式 SET [SESSION|GLOBAL] sql_mode=&amp;lsquo;modes&amp;rsquo;，其中SESSIO</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之事务控制和锁语句</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E5%92%8C%E9%94%81%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sun, 06 Mar 2016 15:13:09 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E5%92%8C%E9%94%81%E8%AF%AD%E5%8F%A5/</guid>
      <description>MySQL支持对MyISAM和MEMORY存储引擎的表进行表级锁定，对BDB存储引擎的表进行页级锁定，对InnoDB存储引擎的表进行行级锁定</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之索引设计</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sun, 06 Mar 2016 14:47:13 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1/</guid>
      <description>InnoDB表的限制 MySQL 5.7 InnoDB-restrictions MyISAM 表的限制 MySQL 5.7 MyISAM-Storage-Engine 索引注意 索引的限制是以字节为单位的, 而表中的varchar等这些是以字符为单位的. 索引原则 搜索的索</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之字符集处理</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%9B%86%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 06 Mar 2016 12:59:13 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%9B%86%E5%A4%84%E7%90%86/</guid>
      <description>字符集 查看支持的字符集: show character set; 查看校对规则: show collation;, show collation like &#39;xxx&#39;, select * from infomation_schema.collations\G _ci: 大小写不敏感, _cs: 大小写敏感, _bin:二进制比较. 查看当前服务器的字符集:</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之存储引擎</title>
      <link>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sat, 05 Mar 2016 23:13:13 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>涉及的命令 查看表的默认引擎: show variables like &#39;table_type&#39;; 这个旧版本的用法,新的版本用法如下: mysql&amp;gt; show variables like &#39;%engine%&#39;; +----------------------------------+--------+ | Variable_name | Value | +----------------------------------+--------+ | default_storage_engine | InnoDB | | default_tmp_storage_engine | InnoDB | | disabled_storage_engines | | | internal_tmp_disk_storage_engine | InnoDB | +----------------------------------+--------+ 4 rows</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之常用命令</title>
      <link>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 05 Mar 2016 21:02:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>帮助相关的 ? 要查看帮助的命令. 如 mysql&amp;gt; ? create database; Name: &#39;CREATE DATABASE&#39; Description: Syntax: CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name [create_specification] ... create_specification: [DEFAULT] CHARACTER SET [=] charset_name | [DEFAULT] COLLATE [=] collation_name CREATE DATABASE creates a database with the given name. To use this statement, you need the CREATE privilege for the database. CREATE SCHEMA is</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记</title>
      <link>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 05 Mar 2016 19:20:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>mysql命令行使用 命令的结束符，用“;”或者“\g”结束 通过help;或者\h命令来显示帮助内容，通过\c命令来清除命令行buffer 实践</description>
    </item>
    
    <item>
      <title>Nginx常用操作</title>
      <link>https://emacsist.github.io/2016/02/26/nginx%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 26 Feb 2016 17:20:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/26/nginx%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>重写HTTP 某些URL 为 HTTPS URL location = /res/static/index.html { #方式一 #return 301 https://$http_host$request_uri$is_args$query_string; #方式二 return 301 https://$host$request_uri; #方式三 #rewrite ^/(.+) https://$host/$1 permanent; } 将所有HTTP请求重写为HTTPS server { return 301 https://$host$request_uri; } nginx 查找 server_name 的顺</description>
    </item>
    
    <item>
      <title>Bash处理日志文件脚本</title>
      <link>https://emacsist.github.io/2016/02/22/bash%E5%A4%84%E7%90%86%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Mon, 22 Feb 2016 18:11:05 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/22/bash%E5%A4%84%E7%90%86%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E8%84%9A%E6%9C%AC/</guid>
      <description>因为公司需要一个处理日志并迁移到指定服务器的脚本，所以就写了以下这个，虽然比较简陋，但还是可以使用的&amp;hellip; 思路: 从指定的目录数组中</description>
    </item>
    
    <item>
      <title>Spacemacs学习</title>
      <link>https://emacsist.github.io/2016/02/20/spacemacs%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 20 Feb 2016 20:04:35 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/20/spacemacs%E5%AD%A6%E4%B9%A0/</guid>
      <description>说白了,spacemacs本质上也就是一个emacs的配置环境. 知道了本质, 也就容易理解了. 安装 针对Mac $ brew tap railwaycat/homebrew-emacsmacport $ brew install emacs-mac --with-spacemacs-icon # OR, brew cask install emacs-mac $ brew</description>
    </item>
    
    <item>
      <title>Java技术手册学习笔记-线程生命周期</title>
      <link>https://emacsist.github.io/2016/02/19/java%E6%8A%80%E6%9C%AF%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Fri, 19 Feb 2016 23:06:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/19/java%E6%8A%80%E6%9C%AF%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>Java线程状态 NEW 已经创建线程,但还没在线程对象上调用 start() 方法。所有线程一开始都处于这个状态 RUNNABLE 线程正在运行,或者当操作系统调度线程时可以运行。</description>
    </item>
    
    <item>
      <title>[转]Java 中正确使用 hashCode 和 equals 方法</title>
      <link>https://emacsist.github.io/2016/02/16/%E8%BD%ACjava-%E4%B8%AD%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8-hashcode-%E5%92%8C-equals-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 16 Feb 2016 17:36:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/16/%E8%BD%ACjava-%E4%B8%AD%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8-hashcode-%E5%92%8C-equals-%E6%96%B9%E6%B3%95/</guid>
      <description>原文链接 在这篇文章中，我将告诉大家我对hashCode和equals方法的理解。我将讨论他们的默认实现，以及如何正确的重写他们。我也将使用A</description>
    </item>
    
    <item>
      <title>Java中关于数组转换成List的注意事项</title>
      <link>https://emacsist.github.io/2016/02/14/java%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%88%90list%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Sun, 14 Feb 2016 15:25:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/14/java%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%88%90list%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>问题代码 package org.emacsist; import java.util.Arrays; import java.util.List; /** * Created by sky on 16-2-14. */ public class TestHello { public static void main(String[] args) { List&amp;lt;String&amp;gt; arg = Arrays.asList(args); arg.add(&amp;quot;出现问题了.&amp;quot;); System.out.println(arg); } } 一运行，就报如</description>
    </item>
    
    <item>
      <title>Spring Boot 学习之基本概念及使用</title>
      <link>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 14 Feb 2016 12:11:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>官方建议的代码目录 com +- example +- myproject +- Application.java | +- domain | +- Customer.java | +- CustomerRepository.java | +- service | +- CustomerService.java | +- web +- CustomerController.java Application.java 典型的代码 package com.example.myproject; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } @ComponentScan</description>
    </item>
    
    <item>
      <title>Spring Boot 学习之Hello World（一）</title>
      <link>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8Bhello-world%E4%B8%80/</link>
      <pubDate>Sun, 14 Feb 2016 11:17:50 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8Bhello-world%E4%B8%80/</guid>
      <description>POM 文件 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myproject&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.0.BUILD-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;!-- Additional lines to be added here... --&amp;gt; &amp;lt;!-- (you don&#39;t need this if you are using a .RELEASE version) --&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/snapshot&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt;&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/milestone&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;pluginRepositories&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/snapshot&amp;lt;/url&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/milestone&amp;lt;/url&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;/pluginRepositories&amp;gt; &amp;lt;/project&amp;gt; HelloWorldSpringBoot.java package org.emacsist; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</description>
    </item>
    
    <item>
      <title>SQL的各种join</title>
      <link>https://emacsist.github.io/2016/02/01/sql%E7%9A%84%E5%90%84%E7%A7%8Djoin/</link>
      <pubDate>Mon, 01 Feb 2016 16:21:22 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/01/sql%E7%9A%84%E5%90%84%E7%A7%8Djoin/</guid>
      <description>测试表数据 t1 sky=# select * from t1; id | name ----+------ 1 | n1 2 | n2 3 | n3 4 | n4 5 | n5 6 | n6 7 | n7 8 | n8 9 | n9 10 | n10 1 | n11 (11 rows) sky=# t2 sky=# select * from t2; id | age | t1_id ----+-----+------- 1 | 11 | 1 2 |</description>
    </item>
    
    <item>
      <title>一次生产环境Java应用性能排查</title>
      <link>https://emacsist.github.io/2016/01/27/%E4%B8%80%E6%AC%A1%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83java%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Wed, 27 Jan 2016 15:04:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/27/%E4%B8%80%E6%AC%A1%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83java%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5/</guid>
      <description>问题 生产环境上，有客户反应某个页面，点击时非常慢 然后，有个测试同事，这个测试的账号给我登录，然后亲自重现排查下原因。发现，该页面，第一次加载</description>
    </item>
    
    <item>
      <title>HTTP 缓存图解</title>
      <link>https://emacsist.github.io/2016/01/27/http-%E7%BC%93%E5%AD%98%E5%9B%BE%E8%A7%A3/</link>
      <pubDate>Wed, 27 Jan 2016 11:22:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/27/http-%E7%BC%93%E5%AD%98%E5%9B%BE%E8%A7%A3/</guid>
      <description>也不知道自己理解的对不对，有不正确的地方，还请网友指正下。谢谢</description>
    </item>
    
    <item>
      <title>Java常见应用的性能优化</title>
      <link>https://emacsist.github.io/2016/01/26/java%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 26 Jan 2016 17:05:37 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/26/java%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>总诀式 减少网络连接次数 减小网络传输数据 添加缓存 分布式 Redis 式 在同一线程的操作里，尽可能合并redis的操作(pipeline)（减少网络连接次数</description>
    </item>
    
    <item>
      <title>Nginx平滑升级</title>
      <link>https://emacsist.github.io/2016/01/25/nginx%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7/</link>
      <pubDate>Mon, 25 Jan 2016 17:01:01 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/25/nginx%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7/</guid>
      <description>原版本 ╭─sky@sky-linux /ihome/nginx/nginx-1.8 ╰─➤ ./sbin/nginx -V nginx version: nginx/1.8.0 built by gcc 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04) configure arguments: --prefix=/ihome/nginx/nginx-1.8 ╭─sky@sky-linux /ihome/nginx/nginx-1.8 ╰─➤ ╭─sky@sky-linux</description>
    </item>
    
    <item>
      <title>“[翻译]用Java实现自定义的线程池”</title>
      <link>https://emacsist.github.io/2016/01/25/%E7%BF%BB%E8%AF%91%E7%94%A8java%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Mon, 25 Jan 2016 15:07:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/25/%E7%BF%BB%E8%AF%91%E7%94%A8java%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>原文 让我们用Java来实现自定义的线程池. 让我们首先定义一个类，它拥有两个方法enqueue和dequeue. 这个类的dequeue方法将充</description>
    </item>
    
    <item>
      <title>PostgreSQL备份pg_dump与恢复pg_restore</title>
      <link>https://emacsist.github.io/2016/01/22/postgresql%E5%A4%87%E4%BB%BDpg_dump%E4%B8%8E%E6%81%A2%E5%A4%8Dpg_restore/</link>
      <pubDate>Fri, 22 Jan 2016 11:15:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/22/postgresql%E5%A4%87%E4%BB%BDpg_dump%E4%B8%8E%E6%81%A2%E5%A4%8Dpg_restore/</guid>
      <description>备份某个数据库 pg_dump -a或者--data-only： 只备份数据，不备份schema（即数据定义，包括表，序列，自定义数据类型等） -b或者--bl</description>
    </item>
    
    <item>
      <title>Apache AB 简单压力测试</title>
      <link>https://emacsist.github.io/2016/01/20/apache-ab-%E7%AE%80%E5%8D%95%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 20 Jan 2016 19:17:55 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/20/apache-ab-%E7%AE%80%E5%8D%95%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</guid>
      <description>以下的测试使用环境为ubuntu 安装ab工具 sudo apt-get install apache2-utils 使用 直接写入到 requestBody ab -T &amp;quot;Content-Type: application/json&amp;quot; -p /tmp/ab.data.user -n 1000 -c 500 http://localhost:8080/hello/action.do GET ab -n 1000 -c 500 http://localhost:8080/hello/action.do POST ab -T &amp;quot;application/x-www-form-urlencoded&amp;quot; -p /tmp/ab.data.user -n 1000 -c 500 http://localhost:8080/hello/action.do ab.data</description>
    </item>
    
    <item>
      <title>Nginx SSL 结合Tomcat 重定向URL变成HTTP的问题</title>
      <link>https://emacsist.github.io/2016/01/19/nginx-ssl-%E7%BB%93%E5%90%88tomcat-%E9%87%8D%E5%AE%9A%E5%90%91url%E5%8F%98%E6%88%90http%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 19 Jan 2016 15:42:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/19/nginx-ssl-%E7%BB%93%E5%90%88tomcat-%E9%87%8D%E5%AE%9A%E5%90%91url%E5%8F%98%E6%88%90http%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>问题 由于要配置服务器(Nginx + Tomcat）的SSL的问题（Nginx同时监听HTTP和HTTPS)，但是，如果用户访问的是HTTPS协</description>
    </item>
    
    <item>
      <title>PostgreSQL中创建自定义类型及其运算符</title>
      <link>https://emacsist.github.io/2016/01/18/postgresql%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 18 Jan 2016 11:47:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/18/postgresql%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>创建一个person的数据类型 sky=# create type person as (name varchar(10), age int); CREATE TYPE sky=# 使用person这个数据类型 sky=# create table use_person (id serial, o person); CREATE TABLE sky=# 插入示例数据 sky=# insert into use_person (o) values (row(&#39;yzy&#39;, 18)); INSERT 0 1 sky=#</description>
    </item>
    
    <item>
      <title>源码安装PostgreSQL 9.5</title>
      <link>https://emacsist.github.io/2016/01/12/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85postgresql-9.5/</link>
      <pubDate>Tue, 12 Jan 2016 16:27:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/12/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85postgresql-9.5/</guid>
      <description>下载源码 # 安装目录 mkdir -p /ihome/db/postgresql/postgresql-9.5.0 # 存放解压源码的目录 mkdir -p /ihome/db/postgresql/build cd /ihome/db/postgresql wget -c https://ftp.postgresql.org/pub/source/v9.5.0/postgresql-9.5.0.tar.bz2 tar -xvf /ihome/db/postgresql/postgresql-9.5.0.tar.bz2 -C /ihome/db/postgresql/build cd /ihome/db/postgresql/build/postgresql-9.5.0 安装依赖 sudo apt-get install libreadline-dev 编译 ./configure --prefix=/ihome/db/postgresql/postgresql-9.5.0 make -j 8 成功后，会提示如下: All of PostgreSQL successfully made. Ready to install.</description>
    </item>
    
    <item>
      <title>[翻译]Java -XX:&#43;PrintFlagsFinal命令行参数详解</title>
      <link>https://emacsist.github.io/2016/01/11/%E7%BF%BB%E8%AF%91java-xx-printflagsfinal%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 11 Jan 2016 20:49:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/11/%E7%BF%BB%E8%AF%91java-xx-printflagsfinal%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid>
      <description>原文出处 可能要翻墙&amp;hellip;你懂的&amp;hellip; 昨天在Google了一些与GC调优相关的资料后, 我无意中发现一些JVM标识是我从来没</description>
    </item>
    
    <item>
      <title>生产环境部署Tomcat配置</title>
      <link>https://emacsist.github.io/2016/01/11/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2tomcat%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 11 Jan 2016 18:24:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/11/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2tomcat%E9%85%8D%E7%BD%AE/</guid>
      <description>操作系统设置 limit ╭─sky@sky-linux ~ ╰─➤ ulimit -a -t: cpu time (seconds) unlimited -f: file size (blocks) unlimited -d: data seg size (kbytes) unlimited -s: stack size (kbytes) 8192 -c: core file size (blocks) 0 -m: resident set size (kbytes) unlimited -u: processes 63555 -n: file descriptors 1024 -l: locked-in-memory</description>
    </item>
    
    <item>
      <title>Nginx添加免费SSL</title>
      <link>https://emacsist.github.io/2016/01/11/nginx%E6%B7%BB%E5%8A%A0%E5%85%8D%E8%B4%B9ssl/</link>
      <pubDate>Mon, 11 Jan 2016 16:10:01 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/11/nginx%E6%B7%BB%E5%8A%A0%E5%85%8D%E8%B4%B9ssl/</guid>
      <description>前提条件： 你的Nginx要有--with-http_ssl_module（即HTTPS模块） 申请免费HTTPS证书 Go Instantssl 步骤 提交你的CSR CSR: C</description>
    </item>
    
    <item>
      <title>我与书</title>
      <link>https://emacsist.github.io/books/</link>
      <pubDate>Sun, 10 Jan 2016 11:47:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/books/</guid>
      <description>2017 吃货的生物学修养 人生十讲 &amp;ndash; 季羡林 (作者 就医法门 2016 马伯庸笑翻中国简史 你我皆凡人：六神磊磊读金庸系列 架构探险：从零开始写Java Web框架 — 黄</description>
    </item>
    
    <item>
      <title>[转]SQL 中各种join</title>
      <link>https://emacsist.github.io/2016/01/07/%E8%BD%ACsql-%E4%B8%AD%E5%90%84%E7%A7%8Djoin/</link>
      <pubDate>Thu, 07 Jan 2016 17:56:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/07/%E8%BD%ACsql-%E4%B8%AD%E5%90%84%E7%A7%8Djoin/</guid>
      <description>一图胜千言 来源 stackoverflow.com</description>
    </item>
    
    <item>
      <title>MySQL获取分组后每组最大的数据</title>
      <link>https://emacsist.github.io/2016/01/07/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E6%AF%8F%E7%BB%84%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 07 Jan 2016 16:51:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/07/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E6%AF%8F%E7%BB%84%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE/</guid>
      <description>需求 获取分组后每组数据中，ID最大的数据 表数据 table: hhh id name 1 hello 2 hello1 3 hello2 4 hello 5 hello2 6 hello3 7 hello1 想要的结果 id name 4 hello 5 hello2 6 hello3 7 hello1 SQL 实现1 select * from hhh where id in ( SELECT substring_index(group_concat(id</description>
    </item>
    
    <item>
      <title>SQL 以另一张表的值来设置某表的值</title>
      <link>https://emacsist.github.io/2016/01/07/sql-%E4%BB%A5%E5%8F%A6%E4%B8%80%E5%BC%A0%E8%A1%A8%E7%9A%84%E5%80%BC%E6%9D%A5%E8%AE%BE%E7%BD%AE%E6%9F%90%E8%A1%A8%E7%9A%84%E5%80%BC/</link>
      <pubDate>Thu, 07 Jan 2016 15:36:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/07/sql-%E4%BB%A5%E5%8F%A6%E4%B8%80%E5%BC%A0%E8%A1%A8%E7%9A%84%E5%80%BC%E6%9D%A5%E8%AE%BE%E7%BD%AE%E6%9F%90%E8%A1%A8%E7%9A%84%E5%80%BC/</guid>
      <description>需求 表1 table: h1 id name 1 hello1 2 hello2 3 hello11 4 hello22 表2 table: h2 h1_id name 1 2 1 3 3 2 4 想要的结果 h1_id name 1 hello1 2 hello2 1 hello1 3 hello11 3 hello11 2 hello2 4 hello22 SQL MySQL UPDATE h2 INNER JOIN h1 on h1.id = h2.h1_id set h2.name = h1.name; PostgreSQL update h2 set name</description>
    </item>
    
    <item>
      <title>Java Thread中的线程执行控制</title>
      <link>https://emacsist.github.io/2016/01/05/java-thread%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 05 Jan 2016 16:36:03 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/05/java-thread%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%8E%A7%E5%88%B6/</guid>
      <description>join是Thread对象里的方法.签名如下: public final void join() throws InterruptedException { join(0); } 它的作用是: 当某个Thread调用join方法时，其他线程，必须要等待这个线</description>
    </item>
    
    <item>
      <title>Spring AOP 学习</title>
      <link>https://emacsist.github.io/2016/01/05/spring-aop-%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 05 Jan 2016 11:37:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/05/spring-aop-%E5%AD%A6%E4%B9%A0/</guid>
      <description>AOP 面向切面编程.百度百科里的定义是：在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期</description>
    </item>
    
    <item>
      <title>MySQL设置wait_timeout注意事项</title>
      <link>https://emacsist.github.io/2016/01/04/mysql%E8%AE%BE%E7%BD%AEwait_timeout%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 04 Jan 2016 10:59:58 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/04/mysql%E8%AE%BE%E7%BD%AEwait_timeout%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>wait_timeout 是服务器等待客户端多久没有活动时，就关闭连接的时间，单位是秒. 查看 -- global level mysql&amp;gt; show global variables like &#39;%timeout%&#39;; +-----------------------------+----------+ | Variable_name | Value | +-----------------------------+----------+ | connect_timeout | 10 | | delayed_insert_timeout | 300 | | innodb_flush_log_at_timeout | 1 | | innodb_lock_wait_timeout | 30 |</description>
    </item>
    
    <item>
      <title>Java使用Javassist修改class文件</title>
      <link>https://emacsist.github.io/2015/12/31/java%E4%BD%BF%E7%94%A8javassist%E4%BF%AE%E6%94%B9class%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 31 Dec 2015 19:52:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/31/java%E4%BD%BF%E7%94%A8javassist%E4%BF%AE%E6%94%B9class%E6%96%87%E4%BB%B6/</guid>
      <description>修改方法 package org.test; /** * Created by sky on 15-12-31. */ public class Bool { public static void main(String[] args) throws InterruptedException { new Bool().run(); } public void run() throws InterruptedException { Thread.sleep(1000 * 5); System.out.println(&amp;quot;default&amp;quot;); } } 为方法前后添加性能统计时间 package org.javassist.demo; import javassist.*; import java.io.IOException; /** * Created by sky on 15-12-31. */ public class</description>
    </item>
    
    <item>
      <title>Http 协议中的Range请求头例子</title>
      <link>https://emacsist.github.io/2015/12/29/http-%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84range%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Tue, 29 Dec 2015 17:11:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/29/http-%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84range%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BE%8B%E5%AD%90/</guid>
      <description>HTTP 请求头 Range 请求资源的部分内容(不包括响应头的大小), 单位是byte,即字节,从0开始. 如果服务器能够正常响应的话，服务器会返回206 Partial Con</description>
    </item>
    
    <item>
      <title>Tomcat 基本概念</title>
      <link>https://emacsist.github.io/2015/12/28/tomcat-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 28 Dec 2015 17:35:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/28/tomcat-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>框架图 纯手工打造&amp;hellip; |----service1(最少要有一个service) |----service2 |------connector1(http) |---host1 |----service3 |------connector2(https) |---host2 Server ----|----service4--</description>
    </item>
    
    <item>
      <title>Spring 中文响应处理</title>
      <link>https://emacsist.github.io/2015/12/28/spring-%E4%B8%AD%E6%96%87%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 28 Dec 2015 14:19:18 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/28/spring-%E4%B8%AD%E6%96%87%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86/</guid>
      <description>为什么 CharacterEncodingFilter 没有生效 &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;CharacterEncodingFilter&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;utf-8&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;forceEncoding&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;filter-mapping&amp;gt; &amp;lt;filter-name&amp;gt;CharacterEncodingFilter&amp;lt;/filter-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/filter-mapping&amp;gt; 这个配置， 只有在 Controller 里，调用 HttpServletResponse 直接写数据时才会生效的 .如果是直接利用HttpServletRe</description>
    </item>
    
    <item>
      <title>Spring中添加@ControllerAdvice增强Controller</title>
      <link>https://emacsist.github.io/2015/12/28/spring%E4%B8%AD%E6%B7%BB%E5%8A%A0controlleradvice%E5%A2%9E%E5%BC%BAcontroller/</link>
      <pubDate>Mon, 28 Dec 2015 12:37:16 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/28/spring%E4%B8%AD%E6%B7%BB%E5%8A%A0controlleradvice%E5%A2%9E%E5%BC%BAcontroller/</guid>
      <description>@ControllerAdvice 注解，会应用到所有的Controller中的@RequestMapping注解的方法中. 配置 要注意，经自己测试，这个注解的类，要被 org.</description>
    </item>
    
    <item>
      <title>MySQL 报 &#39;MySQL server has gone away&#39;</title>
      <link>https://emacsist.github.io/2015/12/28/mysql-%E6%8A%A5-mysql-server-has-gone-away/</link>
      <pubDate>Mon, 28 Dec 2015 11:05:03 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/28/mysql-%E6%8A%A5-mysql-server-has-gone-away/</guid>
      <description>问题 经常在终端里连接MySQL，它经常报如下问题: ERROR 2006 (HY000): MySQL server has gone away No connection. Trying to reconnect... 原因 MySQL服务器超时并且关闭了这次的连接.即相关的超时参数设</description>
    </item>
    
    <item>
      <title>PostgreSQL Rank()窗口函数和Row_number()窗口函数的区别</title>
      <link>https://emacsist.github.io/2015/12/25/postgresql-rank%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E5%92%8Crow_number%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 25 Dec 2015 14:17:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/25/postgresql-rank%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E5%92%8Crow_number%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>创建测试表和数据 postgres=# create table test(n int); CREATE TABLE postgres=# insert into test(n) values (1); INSERT 0 1 postgres=# insert into test(n) values (1); INSERT 0 1 postgres=# insert into test(n) values (2); INSERT 0 1 postgres=# insert into test(n) values (3); INSERT 0 1 postgres=# insert into test(n) values (4); INSERT 0 1 postgres=# insert into test(n) values (5); INSERT 0 1 postgres=#</description>
    </item>
    
    <item>
      <title>MySQL与PostgreSQL的 SELECT FOR UPDATE</title>
      <link>https://emacsist.github.io/2015/12/24/mysql%E4%B8%8Epostgresql%E7%9A%84-select-for-update/</link>
      <pubDate>Thu, 24 Dec 2015 17:04:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/24/mysql%E4%B8%8Epostgresql%E7%9A%84-select-for-update/</guid>
      <description>MySQL的行级锁 MySQL 版本: mysql&amp;gt; select version(); +------------+ | version() | +------------+ | 5.6.17-log | +------------+ 1 row in set (0.00 sec) mysql&amp;gt; 创建测试表 CREATE TABLE `shortlink` ( `id` bigint(20) NOT NULL AUTO_INCREMENT , `long_url` varchar(6000) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL , `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP , `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP</description>
    </item>
    
    <item>
      <title>彻底了解Spring-中-RabbitMQ配置的concurrency-和-task-executor（异步)</title>
      <link>https://emacsist.github.io/2015/12/18/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor%E5%BC%82%E6%AD%A5/</link>
      <pubDate>Fri, 18 Dec 2015 14:05:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/18/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor%E5%BC%82%E6%AD%A5/</guid>
      <description>上一篇只是说了同步彻底了解Spring 中 RabbitMQ配置的concurrency 和 task-executor. 现在来了解异步的情况.（感谢同事聪哥的指引) 如果li</description>
    </item>
    
    <item>
      <title>Nginx负载均衡Tomcat切换注意事项</title>
      <link>https://emacsist.github.io/2015/12/17/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1tomcat%E5%88%87%E6%8D%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Thu, 17 Dec 2015 18:46:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/17/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1tomcat%E5%88%87%E6%8D%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>在生产环境使用nginx+tomcat做负载均衡。众所周知，tomcat的shutdown在生产环境是很慢的，如果这时候，不先修改nginx</description>
    </item>
    
    <item>
      <title>Java for-each 修改问题</title>
      <link>https://emacsist.github.io/2015/12/17/java-for-each-%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 17 Dec 2015 17:59:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/17/java-for-each-%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98/</guid>
      <description>问题 有一次在测试时，发现程序报如下类似错误: Exception in thread &amp;quot;main&amp;quot; java.util.ConcurrentModificationException at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901) at java.util.ArrayList$Itr.next(ArrayList.java:851) 原因 这是因为在使用for-each时，修改了for-each的对象(比如调用了</description>
    </item>
    
    <item>
      <title>PostgreSQL MAX()和Order by DESC limit 1</title>
      <link>https://emacsist.github.io/2015/12/17/postgresql-max%E5%92%8Corder-by-desc-limit-1/</link>
      <pubDate>Thu, 17 Dec 2015 17:41:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/17/postgresql-max%E5%92%8Corder-by-desc-limit-1/</guid>
      <description>准备数据 postgres=# create table tmax (id int); CREATE TABLE postgres=# insert into tm tmax tmp1 postgres=# insert into tmax values (generate_series(1,100000000)); INSERT 0 100000000 postgres=# 一亿条无索引 postgres=# explain analyze verbose select max(id) from tmax ; QUERY PLAN ------------------------------------------------------------------------------------------------------------------------------------- Aggregate (cost=1692478.40..1692478.41 rows=1 width=4) (actual time=32215.384..32215.385 rows=1 loops=1) Output: max(id) -&amp;gt; Seq Scan on public.tmax (cost=0.00..1442478.32 rows=100000032 width=4) (actual time=4.656..18766.501 rows=100000000 loops=1) Output: id</description>
    </item>
    
    <item>
      <title>彻底了解Spring 中 RabbitMQ配置的concurrency 和 task-executor</title>
      <link>https://emacsist.github.io/2015/12/17/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor/</link>
      <pubDate>Thu, 17 Dec 2015 12:12:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/17/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor/</guid>
      <description>问题 在生产环境中，突然发现有个Tomcat报如下类似错误: Caused by: org.springframework.amqp.UncategorizedAmqpException: java.util.concurrent.TimeoutException: Timed out waiting for startup at org.springframework.amqp.rabbit.connection.RabbitUtils.convertRabbitAccessException(RabbitUtils.java:118) at org.springframework.amqp.rabbit.connection.RabbitAccessor.convertRabbitAccessException(RabbitAccessor.java:106) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:365) at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:167) ... 59 common frames omitted Caused by: java.util.concurrent.TimeoutException: Timed out waiting for startup at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.getStartupException(SimpleMessageListenerContainer.java:512) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doStart(SimpleMessageListenerContainer.java:337) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:363) ... 60 common frames omitted</description>
    </item>
    
    <item>
      <title>OkHttp 中注意事项</title>
      <link>https://emacsist.github.io/2015/12/15/okhttp-%E4%B8%AD%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Tue, 15 Dec 2015 10:44:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/15/okhttp-%E4%B8%AD%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>问题 在生产环境中，突然发现RabbitMQ中的某条队列的数据没有被消费掉，而是一直停留在那里，并到好几个小时了，消息一直在Unacknowl</description>
    </item>
    
    <item>
      <title>Spring 与 RabbitMQ 结合配置以及注意事项</title>
      <link>https://emacsist.github.io/2015/12/14/spring-%E4%B8%8E-rabbitmq-%E7%BB%93%E5%90%88%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 14 Dec 2015 18:27:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/14/spring-%E4%B8%8E-rabbitmq-%E7%BB%93%E5%90%88%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>主要是listener-container配置 &amp;lt;rabbit:listener-container connection-factory=&amp;quot;rabbitConnectionFactory&amp;quot; error-handler=&amp;quot;MessageErrorHandler&amp;quot; task-executor=&amp;quot;myExecutor&amp;quot; concurrency=&amp;quot;10&amp;quot;&amp;gt; &amp;lt;/rabbit:listener-container&amp;gt; 属性说明 task-executor 这个属性表示，在执行listener时，使用的线程行为。默认为Simpl</description>
    </item>
    
    <item>
      <title>PostgreSQL将时间转换为Unix时间戳</title>
      <link>https://emacsist.github.io/2015/12/14/postgresql%E5%B0%86%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2%E4%B8%BAunix%E6%97%B6%E9%97%B4%E6%88%B3/</link>
      <pubDate>Mon, 14 Dec 2015 17:54:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/14/postgresql%E5%B0%86%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2%E4%B8%BAunix%E6%97%B6%E9%97%B4%E6%88%B3/</guid>
      <description>今天在群里，有个群友问: 请教一个问题，在pgsql中要怎么把2015-11-17 15:31:36.966+08这样的日期转换成Unix时间戳</description>
    </item>
    
    <item>
      <title>tomcat 远程调试</title>
      <link>https://emacsist.github.io/2015/12/10/tomcat-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</link>
      <pubDate>Thu, 10 Dec 2015 13:30:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/10/tomcat-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</guid>
      <description>配置tomcat环境变量 cd $TOMCAT_HOME/bin/ 添加或编辑`setenv.sh` setenv.sh 文件内容 #!/bin/sh CATALINA_OPTS=&amp;quot;-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -XX:+PrintGCDetails -Xloggc:gc.log -XX:+DisableExplicitGC -Xdebug -Xrunjdwp:transport=dt_socket,address=8888,server=y,suspend=n&amp;quot; 参数说明 -Xdebug 表示开启debug address 调试监听的地址和端口。直接</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://emacsist.github.io/about/</link>
      <pubDate>Thu, 10 Dec 2015 00:41:52 +0000</pubDate>
      
      <guid>https://emacsist.github.io/about/</guid>
      <description>创建这个blog,是因为自己的记忆不好,坚信&amp;rdquo;好记性,不如烂笔头&amp;rdquo;的原则, 所以将自己在工作中,业余中遇到的编程问题都</description>
    </item>
    
    <item>
      <title>Linux sort 命令详解</title>
      <link>https://emacsist.github.io/2015/12/09/linux-sort-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 09 Dec 2015 12:18:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/09/linux-sort-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
      <description>sort 它是一个按行排序的命令行工具. -b 或者 &amp;ndash;ignore-leading-blanks 忽略开头的空格 -d 或者 &amp;ndash;dictionary-order 按字典排序 ➜ sort cat sort.txt 19 21 20 21 1 2 3 4 5 ➜ sort sort -d sort.txt 1 19 2 20 21 21 3 4 5 ➜ sort -f 或者 &amp;ndash;ignore-case 忽</description>
    </item>
    
    <item>
      <title>/etc/hostname 和 /etc/hosts 详解</title>
      <link>https://emacsist.github.io/2015/12/09/etc/hostname-%E5%92%8C-/etc/hosts-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 09 Dec 2015 11:07:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/09/etc/hostname-%E5%92%8C-/etc/hosts-%E8%AF%A6%E8%A7%A3/</guid>
      <description>/etc/hostname 它表示的是在LAN（局域网）内的唯一主机名. ➜ ~ cat /etc/hostname yang ➜ ~ 作用： 1. 在局域网内，本机或者其他在同一局域网内的计算机，可以直接通过hostna</description>
    </item>
    
    <item>
      <title>Mac 上设置Emacs字体</title>
      <link>https://emacsist.github.io/2015/12/06/mac-%E4%B8%8A%E8%AE%BE%E7%BD%AEemacs%E5%AD%97%E4%BD%93/</link>
      <pubDate>Sun, 06 Dec 2015 23:50:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/06/mac-%E4%B8%8A%E8%AE%BE%E7%BD%AEemacs%E5%AD%97%E4%BD%93/</guid>
      <description>更新完Mac OS X EI Capitan后,emacs的字体变得惨不忍睹.还以为无救了, 然后试了下重装emacs, 删除~/.emacs.d/,最终都</description>
    </item>
    
    <item>
      <title>RabbitMQ中的基本概念</title>
      <link>https://emacsist.github.io/2015/12/06/rabbitmq%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 06 Dec 2015 19:46:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/06/rabbitmq%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>RabbitMQ的工作流程 ----------------------- virtual host ------------------------------ | -&amp;gt; queue | |publisher -&amp;gt; exchange -&amp;gt; [binding] -&amp;gt; queue -&amp;gt; consumer | | -&amp;gt; queue | ----------------------- virtual host ------------------------------ RabbitMQ是通过virtual host的概念来实行环境隔</description>
    </item>
    
    <item>
      <title>Mac下设置brew国内源</title>
      <link>https://emacsist.github.io/2015/12/05/mac%E4%B8%8B%E8%AE%BE%E7%BD%AEbrew%E5%9B%BD%E5%86%85%E6%BA%90/</link>
      <pubDate>Sat, 05 Dec 2015 12:40:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/05/mac%E4%B8%8B%E8%AE%BE%E7%BD%AEbrew%E5%9B%BD%E5%86%85%E6%BA%90/</guid>
      <description>清华大学镜像 cd /usr/local git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew.git brew update 如果速度还是很慢，可以尝试以下操作： cd ~/tmp git clone git://mirrors.tuna.tsinghua.edu.cn/homebrew.git rm -rf /usr/local/.git rm -rf /usr/local/Library cp -R homebrew/.git /usr/local/ cp -R homebrew/Library /usr/local/ brew update homebrew-science 或者 homebrew-python cd /usr/local/Library/Taps/homebrew/homebrew-science git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew-science.git cd /usr/local/Library/Taps/homebrew/homebrew-python git remote set-url</description>
    </item>
    
    <item>
      <title>RabbitMQ 在Mac上的安装与使用</title>
      <link>https://emacsist.github.io/2015/12/05/rabbitmq-%E5%9C%A8mac%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 05 Dec 2015 12:34:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/05/rabbitmq-%E5%9C%A8mac%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>安装 brew update brew install rabbitmq 这样子安装的话, RabbitMQ的脚本是安装到/usr/local/sbin这个目录里的.并且不会自动添加到你的PATH里,所</description>
    </item>
    
    <item>
      <title>Bash学习笔记</title>
      <link>https://emacsist.github.io/2015/12/04/bash%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 04 Dec 2015 15:45:11 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/04/bash%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>使脚本更具可移植 #!/usr/bin/env bash 布尔值 0:表示true 非0:表示false function getB(){ return 0 } while getB; do echo &amp;quot;fuck&amp;quot; sleep 1 done 可以利用return 0表示true，return 1表</description>
    </item>
    
    <item>
      <title>Tomcat控制脚本</title>
      <link>https://emacsist.github.io/2015/12/04/tomcat%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Fri, 04 Dec 2015 15:14:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/04/tomcat%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC/</guid>
      <description>因为经常需要部署Tomcat服务器，所以才有了这个脚本. #!/bin/bash ############################################################### # #author: Zhiyong Yang #date: 2015-12-4 #email: emacsist@qq.com # ############################################################### TOMCAT_HOME_DIR=&#39;/home/yang/Java/apache-tomcat-7.0 (copy).63&#39; function stop(){ if checkIsExist ; then &amp;quot;${TOMCAT_HOME_DIR}&amp;quot;/bin/shutdown.sh sleep 1 while checkIsExist ; do sleep 2 kill -0 $(getPID) done fi } function getPID(){ # replace the grep content</description>
    </item>
    
    <item>
      <title>Spring 中的 @Async 和 @Scheduled 理解</title>
      <link>https://emacsist.github.io/2015/12/04/spring-%E4%B8%AD%E7%9A%84-async-%E5%92%8C-scheduled-%E7%90%86%E8%A7%A3/</link>
      <pubDate>Fri, 04 Dec 2015 11:00:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/04/spring-%E4%B8%AD%E7%9A%84-async-%E5%92%8C-scheduled-%E7%90%86%E8%A7%A3/</guid>
      <description>@Async spring-test.xml文件 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xmlns:task=&amp;quot;http://www.springframework.org/schema/task&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd&amp;quot;&amp;gt; &amp;lt;task:annotation-driven scheduler=&amp;quot;myScheduler&amp;quot; executor=&amp;quot;myExecutor&amp;quot;/&amp;gt; &amp;lt;task:executor id=&amp;quot;myExecutor&amp;quot; pool-size=&amp;quot;20&amp;quot;/&amp;gt; &amp;lt;task:scheduler id=&amp;quot;myScheduler&amp;quot; pool-size=&amp;quot;5&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;hello&amp;quot; class=&amp;quot;hello.world.task.TestTask&amp;quot; /&amp;gt; &amp;lt;/beans&amp;gt; spring官网例子 import java.util.concurrent.Future; import org.springframework.scheduling.annotation.Async; import org.springframework.scheduling.annotation.AsyncResult; import org.springframework.stereotype.Service; import org.springframework.web.client.RestTemplate; @Service public class GitHubLookupService</description>
    </item>
    
    <item>
      <title>IDEA 和 Eclipse 调试多线程应用</title>
      <link>https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/</link>
      <pubDate>Thu, 03 Dec 2015 15:38:10 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/</guid>
      <description>起源 从Eclipse切换到IDEA后，在进行多线程调试的时候，发现它阻塞了其他所有的线程，但是在同事的Eclipse上进行调试的时候，却发现</description>
    </item>
    
    <item>
      <title>PostgreSQL数组中统计例子</title>
      <link>https://emacsist.github.io/2015/12/02/postgresql%E6%95%B0%E7%BB%84%E4%B8%AD%E7%BB%9F%E8%AE%A1%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Wed, 02 Dec 2015 11:25:17 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/02/postgresql%E6%95%B0%E7%BB%84%E4%B8%AD%E7%BB%9F%E8%AE%A1%E4%BE%8B%E5%AD%90/</guid>
      <description>问题 这个问题，是在一个PG群里有群友问到的。如下: 请教个问题 有个表 temp 数据如下(ids为array类型) ids no {1,2} 10 {1,3} 20 {2,3} 30 现在希望得到这样的结果</description>
    </item>
    
    <item>
      <title>Spring Rabbit使用</title>
      <link>https://emacsist.github.io/2015/11/30/spring-rabbit%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 30 Nov 2015 18:36:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/30/spring-rabbit%E4%BD%BF%E7%94%A8/</guid>
      <description>Demo &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xmlns:task=&amp;quot;http://www.springframework.org/schema/task&amp;quot; xmlns:aop=&amp;quot;http://www.springframework.org/schema/aop&amp;quot; xmlns:rabbit=&amp;quot;http://www.springframework.org/schema/rabbit&amp;quot; xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot; xmlns:mvc=&amp;quot;http://www.springframework.org/schema/mvc&amp;quot; xsi:schemaLocation=&amp;quot; http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.1.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&amp;quot;&amp;gt; &amp;lt;bean id=&amp;quot;rabbitConnectionFactory&amp;quot; class=&amp;quot;org.springframework.amqp.rabbit.connection.CachingConnectionFactory&amp;quot;&amp;gt; &amp;lt;constructor-arg value=&amp;quot;10.0.0.11&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;guest&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;guest&amp;quot;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;quot;converter&amp;quot; class=&amp;quot;org.springframework.amqp.support.converter.JsonMessageConverter&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;defaultCharset&amp;quot; value=&amp;quot;UTF-8&amp;quot;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;rabbit:template id=&amp;quot;rabbitTemplate&amp;quot; connection-factory=&amp;quot;rabbitConnectionFactory&amp;quot; message-converter=&amp;quot;converter&amp;quot; /&amp;gt; &amp;lt;rabbit:admin connection-factory=&amp;quot;rabbitConnectionFactory&amp;quot;/&amp;gt; &amp;lt;rabbit:queue name=&amp;quot;ttt.ttt.tt.tt&amp;quot;/&amp;gt; &amp;lt;/beans&amp;gt; Java文件 package yourcompany; import com.yourcompany.pojo.ParamsPojo; import org.junit.Test;</description>
    </item>
    
    <item>
      <title>Mac下安装nodejs和hexo</title>
      <link>https://emacsist.github.io/2015/11/30/mac%E4%B8%8B%E5%AE%89%E8%A3%85nodejs%E5%92%8Chexo/</link>
      <pubDate>Mon, 30 Nov 2015 11:14:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/30/mac%E4%B8%8B%E5%AE%89%E8%A3%85nodejs%E5%92%8Chexo/</guid>
      <description>安装xcode 安装Install Xcode Command Line Tools. 在terminal，输入gcc，如果没有安装xcode，它会弹出一个窗口，让你安装Xcode Command Line To</description>
    </item>
    
    <item>
      <title>Spring Task 中集群带来的问题</title>
      <link>https://emacsist.github.io/2015/11/27/spring-task-%E4%B8%AD%E9%9B%86%E7%BE%A4%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 27 Nov 2015 10:59:11 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/27/spring-task-%E4%B8%AD%E9%9B%86%E7%BE%A4%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>问题 当多台Tomcat同时进行调度时，如果没有处理好并发的问题，就会出现本应只是执行一次的Task，执行了两次（比如修改DB）。 DB解决办法</description>
    </item>
    
    <item>
      <title>Spring里的Executor使用</title>
      <link>https://emacsist.github.io/2015/11/26/spring%E9%87%8C%E7%9A%84executor%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 26 Nov 2015 12:02:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/26/spring%E9%87%8C%E7%9A%84executor%E4%BD%BF%E7%94%A8/</guid>
      <description>在生产环境中，发现我们Tomcat的应用导致超高的CPU（170%)及负载(90+)[Intel&amp;reg; Xeon&amp;reg; CPU E31230 @ 3.20GHz 四核心，8线程]. 原因 经</description>
    </item>
    
    <item>
      <title>linux xargs 使用</title>
      <link>https://emacsist.github.io/2015/11/25/linux-xargs-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 25 Nov 2015 15:12:13 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/25/linux-xargs-%E4%BD%BF%E7%94%A8/</guid>
      <description>使用xargs要特别注意，默认情况下，它是以整行作为[项]的. -a 指定文件来代替标准输入(stdin). ➜ xargs cat hello.txt a b c d ➜ xargs xargs -a hello.txt a b c d ➜ xargs</description>
    </item>
    
    <item>
      <title>Linux 进程监控</title>
      <link>https://emacsist.github.io/2015/11/25/linux-%E8%BF%9B%E7%A8%8B%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Wed, 25 Nov 2015 11:14:55 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/25/linux-%E8%BF%9B%E7%A8%8B%E7%9B%91%E6%8E%A7/</guid>
      <description>进程监控 pidstat [option] interval [count] 监控进程的内存使用情况 $ pidstat -r -p 26092 1 5 Linux 2.6.32-33-server (pro-srv4) Wednesday, November 25, 2015 _x86_64_ (8 CPU) 11:16:38 HKT PID minflt/s majflt/s VSZ RSS %MEM Command 11:16:39 HKT 26092 0.00 0.00 2983032 607484 3.69 java 11:16:40 HKT 26092 0.00 0.00 2983032 607484 3.69 java 11:16:41 HKT 26092 0.00 0.00 2983032 607484</description>
    </item>
    
    <item>
      <title>Spring Redis 使用</title>
      <link>https://emacsist.github.io/2015/11/23/spring-redis-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 23 Nov 2015 18:28:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/spring-redis-%E4%BD%BF%E7%94%A8/</guid>
      <description>Pipelining 共享一条connection，以减少因为网络连接导致的性能问题: List&amp;lt;Object&amp;gt; results = stringRedisTemplate.executePipelined( new RedisCallback&amp;lt;Object&amp;gt;() { public Object doInRedis(RedisConnection connection) throws DataAccessException { StringRedisConnection stringRedisConn = (StringRedisConnection)connection; for(int i=0; i&amp;lt; batchSize; i++) { stringRedisConn.rPop(&amp;quot;myqueue&amp;quot;); } return null; } }); transaction redis中</description>
    </item>
    
    <item>
      <title>Redis升级</title>
      <link>https://emacsist.github.io/2015/11/23/redis%E5%8D%87%E7%BA%A7/</link>
      <pubDate>Mon, 23 Nov 2015 16:37:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/redis%E5%8D%87%E7%BA%A7/</guid>
      <description>创建一个新的实例 wget http://download.redis.io/redis-stable.tar.gz tar -xvf redis-stable.tar.gz cd redis-stable make make PREFIX=/some/other/directory install 启动slave实例 /some/other/directory/bin/redis-server /path/to/redis/redis.conf 开启复制 如果master要认证的话，要先认证下先,在slave的实例中的redi</description>
    </item>
    
    <item>
      <title>找出Java最耗CPU或IO的线程</title>
      <link>https://emacsist.github.io/2015/11/23/%E6%89%BE%E5%87%BAjava%E6%9C%80%E8%80%97cpu%E6%88%96io%E7%9A%84%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 23 Nov 2015 12:33:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/%E6%89%BE%E5%87%BAjava%E6%9C%80%E8%80%97cpu%E6%88%96io%E7%9A%84%E7%BA%BF%E7%A8%8B/</guid>
      <description>查看某进程及某线程占用CPU的例子 jps: 列出java进程,找到pid. pidstat -p pid -u 1 3 -u -t: 查看pid的进程所有线程的cpu使用情况. jstack -l pid &amp;gt; /tmp/thread.txt: 导出指</description>
    </item>
    
    <item>
      <title>Spring MVC 里加载两次Bean的解决办法</title>
      <link>https://emacsist.github.io/2015/11/23/spring-mvc-%E9%87%8C%E5%8A%A0%E8%BD%BD%E4%B8%A4%E6%AC%A1bean%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Mon, 23 Nov 2015 11:31:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/spring-mvc-%E9%87%8C%E5%8A%A0%E8%BD%BD%E4%B8%A4%E6%AC%A1bean%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>SpringMVC 里上下文的概念 web.xml 里的配置 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; version=&amp;quot;2.5&amp;quot;&amp;gt; &amp;lt;display-name&amp;gt;uniweibov2&amp;lt;/display-name&amp;gt; &amp;lt;listener&amp;gt; &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt; &amp;lt;/listener&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath:spring.xml&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;mvc-dispatcher&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath:spring-servlet.xml&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;mvc-dispatcher&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;/web-app&amp;gt; 在SpringMVC里，有两种上下文。一种是：App</description>
    </item>
    
    <item>
      <title>Spring session 添加HttpSessionListener</title>
      <link>https://emacsist.github.io/2015/11/23/spring-session-%E6%B7%BB%E5%8A%A0httpsessionlistener/</link>
      <pubDate>Mon, 23 Nov 2015 10:44:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/spring-session-%E6%B7%BB%E5%8A%A0httpsessionlistener/</guid>
      <description>这时介绍的版本，是基于以下版本: &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.session&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-session&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.0.M1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 先上示例demo &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd&amp;quot;&amp;gt; &amp;lt;context:annotation-config /&amp;gt; &amp;lt;bean id=&amp;quot;v2redisConnectionFactory&amp;quot; class=&amp;quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&amp;quot; p:host-name=&amp;quot;${config.redis.host}&amp;quot; p:port=&amp;quot;${redis.port}&amp;quot; p:use-pool=&amp;quot;true&amp;quot; p:database=&amp;quot;${redis.database}&amp;quot; p:password=&amp;quot;${config.redis.password}&amp;quot; /&amp;gt; &amp;lt;bean id=&amp;quot;stringRedisSerializer&amp;quot; class=&amp;quot;org.springframework.data.redis.serializer.StringRedisSerializer&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;genericToStringSerializer&amp;quot; class=&amp;quot;org.springframework.data.redis.serializer.GenericToStringSerializer&amp;quot;&amp;gt; &amp;lt;constructor-arg type=&amp;quot;java.lang.Class&amp;quot; value=&amp;quot;java.lang.Object&amp;quot;&amp;gt;&amp;lt;/constructor-arg&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;quot;object&amp;quot; class=&amp;quot;java.lang.Object&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;v2redisTemplate&amp;quot; class=&amp;quot;org.springframework.data.redis.core.RedisTemplate&amp;quot; p:connection-factory-ref=&amp;quot;v2redisConnectionFactory&amp;quot; p:keySerializer-ref=&amp;quot;stringRedisSerializer&amp;quot;</description>
    </item>
    
    <item>
      <title>git笔记</title>
      <link>https://emacsist.github.io/2015/11/13/git%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 13 Nov 2015 11:48:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/13/git%E7%AC%94%E8%AE%B0/</guid>
      <description>命令补全 cp contrib/completion/git-completion.bash /etc/bash_completion.d/ . /etc/bash_completion 在/etc/profile和~/.bashrc 添加以下内容 if [ -f /etc/bash_completion ]; then . /etc/bash_completion fi 中文乱码 UTF-8 字符集时 git config --global core.quotepath false GBK字符集时 git config</description>
    </item>
    
    <item>
      <title>diff和patch使用</title>
      <link>https://emacsist.github.io/2015/11/13/diff%E5%92%8Cpatch%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 13 Nov 2015 11:17:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/13/diff%E5%92%8Cpatch%E4%BD%BF%E7%94%A8/</guid>
      <description>diff 文件判断 三个减号(---)：原始文件 三个加号(+++)：目标文件 内容 -号开始的行：只出现在原始文件中的行 +号开始的行：只出现在目标文件中的</description>
    </item>
    
    <item>
      <title>Spring Task 使用</title>
      <link>https://emacsist.github.io/2015/11/10/spring-task-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 10 Nov 2015 16:45:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/10/spring-task-%E4%BD%BF%E7%94%A8/</guid>
      <description>使用 &amp;lt;bean id=&amp;quot;updateRsstask&amp;quot; class=&amp;quot;xxxx.xxx.xx&amp;quot; /&amp;gt; &amp;lt;task:executor id=&amp;quot;myexecutor&amp;quot; pool-size=&amp;quot;10&amp;quot; /&amp;gt; &amp;lt;task:scheduler id=&amp;quot;myscheduler&amp;quot; pool-size=&amp;quot;10&amp;quot; /&amp;gt; &amp;lt;task:scheduled-tasks scheduler=&amp;quot;myscheduler&amp;quot;&amp;gt; &amp;lt;!-- 每隔一个小时更新rss --&amp;gt; &amp;lt;task:scheduled ref=&amp;quot;updateRssTask&amp;quot; method=&amp;quot;execute&amp;quot; cron=&amp;quot;0 0 * * * *&amp;quot; /&amp;gt; &amp;lt;/task:scheduled-tasks&amp;gt; 注意事项 &amp;lt;task:schedule-tasks scheduler=&amp;quot;myscheduler&amp;quot;&amp;gt; 这里的scheduler必须显式指定，否则它只会</description>
    </item>
    
    <item>
      <title>Jetty学习笔记</title>
      <link>https://emacsist.github.io/2015/11/09/jetty%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 09 Nov 2015 15:21:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/09/jetty%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>jetty.home 和 jetty.base 可以看作： ${jetty.home} 是jetty的安装目录 ${jetty.base} 是实例目录 Jetty常用命令 查看帮助 java -jar ${jetty.home}/start.jar --help 指定jetty.home和jetty.base java -jar /home/yang/Java/jetty-distribution-9.2.13.v20150730/start.jar \</description>
    </item>
    
    <item>
      <title>ubuntu下使用intellij</title>
      <link>https://emacsist.github.io/2015/11/02/ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8intellij/</link>
      <pubDate>Mon, 02 Nov 2015 14:41:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/02/ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8intellij/</guid>
      <description>去掉Alt键触发快捷命令 在右上角选择&amp;ndash;&amp;gt; System Settings &amp;gt; Keyboard &amp;gt; Shortcuts &amp;gt; Launchers 找到选项Key to show the HUD，然后按下Backspace键清空即可.</description>
    </item>
    
    <item>
      <title>MySQL常用命令及操作</title>
      <link>https://emacsist.github.io/2015/10/30/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 30 Oct 2015 16:48:44 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/30/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E6%93%8D%E4%BD%9C/</guid>
      <description>查看当前活动线程 SELECT * FROM information_schema.processlist WHERE `INFO` LIKE &#39;SELECT %&#39;; INFO字段就是当前正在执行的命令. 创建唯一索引，并删除有违反唯一索引的数据 ALTER IGNORE TABLE keyword_status ADD UNIQUE INDEX ks_kid_mid (keyword_id, mid);</description>
    </item>
    
    <item>
      <title>单反学习</title>
      <link>https://emacsist.github.io/2015/10/27/%E5%8D%95%E5%8F%8D%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 27 Oct 2015 21:22:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/27/%E5%8D%95%E5%8F%8D%E5%AD%A6%E4%B9%A0/</guid>
      <description>单反 单镜头反光镜, 简称”单反” 单反, 是光学取景的,取景相对快. 微单, 是电子取景的, 取景相对慢. 微单, 推荐: 索尼, 富士. 佳能低中高端单反 高端单</description>
    </item>
    
    <item>
      <title>Findbugs 报 May expose internal representation by returning reference to mutable object</title>
      <link>https://emacsist.github.io/2015/10/27/findbugs-%E6%8A%A5-may-expose-internal-representation-by-returning-reference-to-mutable-object/</link>
      <pubDate>Tue, 27 Oct 2015 10:54:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/27/findbugs-%E6%8A%A5-may-expose-internal-representation-by-returning-reference-to-mutable-object/</guid>
      <description>运行完一个Findbugs时，发现它报了一个警告： CccFans.getRowCreateTime() may expose internal representation by returning CcFans.rowCreateTime()以及CcFans.setRowC</description>
    </item>
    
    <item>
      <title>Gradle学习笔记</title>
      <link>https://emacsist.github.io/2015/10/23/gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 23 Oct 2015 00:06:55 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/23/gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>gradle 设置代理 systemProp.http.proxyHost=代理服务器地址 systemProp.http.proxyPort=代理服务器端</description>
    </item>
    
    <item>
      <title>Maven 与 Spring 结合进行模块化开发实践</title>
      <link>https://emacsist.github.io/2015/10/16/maven-%E4%B8%8E-spring-%E7%BB%93%E5%90%88%E8%BF%9B%E8%A1%8C%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Fri, 16 Oct 2015 16:02:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/16/maven-%E4%B8%8E-spring-%E7%BB%93%E5%90%88%E8%BF%9B%E8%A1%8C%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</guid>
      <description>模块化的解决方案 OSGi 是一种模块化标准。是真正意义的上模块化，Eclipse 就是基于OSGi进行开发的。热插拔，每个模块都有自己的classLo</description>
    </item>
    
    <item>
      <title>Maven复习</title>
      <link>https://emacsist.github.io/2015/10/12/maven%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Mon, 12 Oct 2015 17:03:38 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/12/maven%E5%A4%8D%E4%B9%A0/</guid>
      <description>快速升级 利用软链接方式来进行升级 软链接目录：~/maven/current 代表当前要使用的版本 具体某个版本的maven: ~/maven/maven3.0 具体某个版本的ma</description>
    </item>
    
    <item>
      <title>&lt;Java RESTful Web Service&gt;学习笔记</title>
      <link>https://emacsist.github.io/2015/10/10/java-restful-web-service%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 10 Oct 2015 23:26:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/10/java-restful-web-service%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>在 Java 世界 中， 与 大 Web Service 相 对应 的 规范 是 JAX- WS。 在 大 Web Service 已经 成为 明日黄花 之后， Java 世界 急需 一套 新的 规范 来 取代 JAX- WS。 这套 新的 规范 就是 JAX- RS： Java 世界 开</description>
    </item>
    
    <item>
      <title>Jersey 2.x 搭建Web service</title>
      <link>https://emacsist.github.io/2015/10/09/jersey-2.x-%E6%90%AD%E5%BB%BAweb-service/</link>
      <pubDate>Fri, 09 Oct 2015 17:20:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/09/jersey-2.x-%E6%90%AD%E5%BB%BAweb-service/</guid>
      <description>假设创建的项目名为: hello Maven依赖 &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;snapshot-repository.java.net&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Java.net Snapshot Repository for Maven&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://maven.java.net/content/repositories/snapshots/&amp;lt;/url&amp;gt; &amp;lt;layout&amp;gt;default&amp;lt;/layout&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.22.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-common&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.22.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.containers&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-container-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.22.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; web.xml配置 &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;REST&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.glassfish.jersey.servlet.ServletContainer&amp;lt;/servlet-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;javax.ws.rs.Application&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;org.emacsist.App&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;REST&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; org.emacsist.App 内容</description>
    </item>
    
    <item>
      <title>Java是如何查找class的?</title>
      <link>https://emacsist.github.io/2015/09/14/java%E6%98%AF%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BEclass%E7%9A%84/</link>
      <pubDate>Mon, 14 Sep 2015 20:54:35 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/14/java%E6%98%AF%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BEclass%E7%9A%84/</guid>
      <description>Java中的三种类型class Bootstrap classes 这些是核心class,即Java平台最基础的class. 它放在 rt.jar(runtime),以及其他一些</description>
    </item>
    
    <item>
      <title>Apache Felix OSGi 使用非bundle jar包共享到其他所有bundle</title>
      <link>https://emacsist.github.io/2015/09/14/apache-felix-osgi-%E4%BD%BF%E7%94%A8%E9%9D%9Ebundle-jar%E5%8C%85%E5%85%B1%E4%BA%AB%E5%88%B0%E5%85%B6%E4%BB%96%E6%89%80%E6%9C%89bundle/</link>
      <pubDate>Mon, 14 Sep 2015 13:04:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/14/apache-felix-osgi-%E4%BD%BF%E7%94%A8%E9%9D%9Ebundle-jar%E5%8C%85%E5%85%B1%E4%BA%AB%E5%88%B0%E5%85%B6%E4%BB%96%E6%89%80%E6%9C%89bundle/</guid>
      <description>使用 org.osgi.framework.system.packages 参数 创建一个项目，假设使用了Google的Guava的bundle，但这个库并不是OSGi Bundle。但如果又想共享于其他bundl</description>
    </item>
    
    <item>
      <title>将非OSGi jar转换成OSGi的Bundle</title>
      <link>https://emacsist.github.io/2015/09/13/%E5%B0%86%E9%9D%9Eosgi-jar%E8%BD%AC%E6%8D%A2%E6%88%90osgi%E7%9A%84bundle/</link>
      <pubDate>Sun, 13 Sep 2015 16:47:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/13/%E5%B0%86%E9%9D%9Eosgi-jar%E8%BD%AC%E6%8D%A2%E6%88%90osgi%E7%9A%84bundle/</guid>
      <description>建立转换的project 测试环境: JDK 1.8, Eclipse 4.4.2 打开Eclipse, File-&amp;gt; New -&amp;gt; Project -&amp;gt; Plug-in Development -&amp;gt; Plug-in from Existing JAR Archives 然后选择你想要制作成bundle的jar包, 然后输入</description>
    </item>
    
    <item>
      <title>开发并打包一个OSGi的Bundle</title>
      <link>https://emacsist.github.io/2015/09/11/%E5%BC%80%E5%8F%91%E5%B9%B6%E6%89%93%E5%8C%85%E4%B8%80%E4%B8%AAosgi%E7%9A%84bundle/</link>
      <pubDate>Fri, 11 Sep 2015 16:11:55 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/11/%E5%BC%80%E5%8F%91%E5%B9%B6%E6%89%93%E5%8C%85%E4%B8%80%E4%B8%AAosgi%E7%9A%84bundle/</guid>
      <description>安装个Eclipse插件 EclipsePlugin 功能：将某个目录下的jar包，添加到buildpath 打包一个Bundle 这只是演示第三方jar包依赖的打包问题，</description>
    </item>
    
    <item>
      <title>[翻译]为什么我的Bundle抛出ClassNotFoundException或者NoClassDefFoundError?</title>
      <link>https://emacsist.github.io/2015/09/10/%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84bundle%E6%8A%9B%E5%87%BAclassnotfoundexception%E6%88%96%E8%80%85noclassdeffounderror/</link>
      <pubDate>Thu, 10 Sep 2015 20:59:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/10/%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84bundle%E6%8A%9B%E5%87%BAclassnotfoundexception%E6%88%96%E8%80%85noclassdeffounderror/</guid>
      <description>原文 对于OSGi的新用户有一个非常普遍的如下问题 我的Bundle抛出一个 NoClassDefFoundError 在 org.example.FooBar, 尽管FooBar是在classpath里,这是啥情况?? 在OS</description>
    </item>
    
    <item>
      <title>OSGi Bundle元数据描述说明</title>
      <link>https://emacsist.github.io/2015/09/10/osgi-bundle%E5%85%83%E6%95%B0%E6%8D%AE%E6%8F%8F%E8%BF%B0%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Thu, 10 Sep 2015 17:11:16 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/10/osgi-bundle%E5%85%83%E6%95%B0%E6%8D%AE%E6%8F%8F%E8%BF%B0%E8%AF%B4%E6%98%8E/</guid>
      <description>Bundle 预定义标记 描述元数据 Bundle的元数据信息定义在/META-INF/MANIFEST.MF文件之中，OSGi规范中明确要求实现框架必须能</description>
    </item>
    
    <item>
      <title>OSGi注意事项</title>
      <link>https://emacsist.github.io/2015/09/10/osgi%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Thu, 10 Sep 2015 16:38:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/10/osgi%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>关于导入的版本处理问题 Import-Package: org.osgi.framework;version=&amp;quot;1.8.0&amp;quot; 这个表示，只要是org.osgi.framework包的版本，&amp;gt;=1.8.0的都可以。 Import-Package: org.osgi.framework;version=&amp;quot;[1.8.0,1.8.9)&amp;quot; 这个表示，只要是o</description>
    </item>
    
    <item>
      <title>搭建Apache Felix OSGi运行环境及Bundle的生命周期例子</title>
      <link>https://emacsist.github.io/2015/09/10/%E6%90%AD%E5%BB%BAapache-felix-osgi%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%8F%8Abundle%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Thu, 10 Sep 2015 14:45:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/10/%E6%90%AD%E5%BB%BAapache-felix-osgi%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%8F%8Abundle%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BE%8B%E5%AD%90/</guid>
      <description>运行环境 配置好Java这些基础环境就忽略了。 下载Felix 假设下载到~/Downloads目录，然后解压 cd ~/Downloads tar -xvf org.apache.felix.main.distribution-5.2.0.tar.gz cd felix-framework-5.2.0 启动OSGi运行环境:</description>
    </item>
    
    <item>
      <title>OSGi之Web HelloWorld</title>
      <link>https://emacsist.github.io/2015/09/08/osgi%E4%B9%8Bweb-helloworld/</link>
      <pubDate>Tue, 08 Sep 2015 21:11:50 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/08/osgi%E4%B9%8Bweb-helloworld/</guid>
      <description>本文的测试环境使用的是: Mac + Eclipse 4.4.2 搭建基础环境 打开Eclipse,然后 Run -&amp;gt; Run Configurations -&amp;gt; OSGi Framework,添加一个新的项目.Name就自己喜欢全名</description>
    </item>
    
    <item>
      <title>Maven打包时带有旧版本的jar包问题</title>
      <link>https://emacsist.github.io/2015/09/08/maven%E6%89%93%E5%8C%85%E6%97%B6%E5%B8%A6%E6%9C%89%E6%97%A7%E7%89%88%E6%9C%AC%E7%9A%84jar%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 08 Sep 2015 10:53:11 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/08/maven%E6%89%93%E5%8C%85%E6%97%B6%E5%B8%A6%E6%9C%89%E6%97%A7%E7%89%88%E6%9C%AC%E7%9A%84jar%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>最近发现在修改pom.xl的jar包版本依赖时，每次进行package时，都会发现以前的版本的jar包遗留下来。 原因 这是因为我们公司有部分同</description>
    </item>
    
    <item>
      <title>网络和租房防范知识</title>
      <link>https://emacsist.github.io/2015/09/07/%E7%BD%91%E7%BB%9C%E5%92%8C%E7%A7%9F%E6%88%BF%E9%98%B2%E8%8C%83%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 07 Sep 2015 11:06:12 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/07/%E7%BD%91%E7%BB%9C%E5%92%8C%E7%A7%9F%E6%88%BF%E9%98%B2%E8%8C%83%E7%9F%A5%E8%AF%86/</guid>
      <description>租房安全 关于逃生窗 租好房好，一定要看看有没有租房有没有防盗网，逃生窗这些东西，特别要注意的是逃生窗，它是一个空间比较小，但是可以打开的窗（我</description>
    </item>
    
    <item>
      <title>MySQL 备份方案</title>
      <link>https://emacsist.github.io/2015/08/31/mysql-%E5%A4%87%E4%BB%BD%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 31 Aug 2015 17:20:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/31/mysql-%E5%A4%87%E4%BB%BD%E6%96%B9%E6%A1%88/</guid>
      <description>Percona XtraBackup 介绍 官方文档 它是一个MySQL的开源的热备工具，备份时不会锁数据库。当前最新版本为2.2，它可以备份MySQL 5.1, 5.5和5.6的Inno</description>
    </item>
    
    <item>
      <title>部署代码到远程Tomcat</title>
      <link>https://emacsist.github.io/2015/08/31/%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%A8%8Btomcat/</link>
      <pubDate>Mon, 31 Aug 2015 16:24:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/31/%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%A8%8Btomcat/</guid>
      <description>直接上码: 将这个脚本，放到项目的根目录即可. #!/bin/bash # 使用方式： # 部署生产环境 # 完全部署: ./server.sh p # 只部署静态文件: ./server.sh p static # 只部署后端文件: ./server.sh p class # 部</description>
    </item>
    
    <item>
      <title>Linux同步文件工具rsync</title>
      <link>https://emacsist.github.io/2015/08/31/linux%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%B7%A5%E5%85%B7rsync/</link>
      <pubDate>Mon, 31 Aug 2015 14:33:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/31/linux%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%B7%A5%E5%85%B7rsync/</guid>
      <description>rsync rsync是类unix系统下的数据镜像备份工具——remote sync。一款快速增量备份工具 Remote Sync，远程同步 支持本地复制，或者与其他S</description>
    </item>
    
    <item>
      <title>Tomcat报java.lang.ClassNotFoundException: 1catalina.org.apache.juli.FileHandler</title>
      <link>https://emacsist.github.io/2015/08/28/tomcat%E6%8A%A5java.lang.classnotfoundexception-1catalina.org.apache.juli.filehandler/</link>
      <pubDate>Fri, 28 Aug 2015 12:15:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/28/tomcat%E6%8A%A5java.lang.classnotfoundexception-1catalina.org.apache.juli.filehandler/</guid>
      <description>最近在生产环境部署Tomcat的时候，在启动的时候，在控制台报“java.lang.ClassNotFoundException: 1cata</description>
    </item>
    
    <item>
      <title>Tomcat源码学习之导入源码工程到Eclipse</title>
      <link>https://emacsist.github.io/2015/08/25/tomcat%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AF%BC%E5%85%A5%E6%BA%90%E7%A0%81%E5%B7%A5%E7%A8%8B%E5%88%B0eclipse/</link>
      <pubDate>Tue, 25 Aug 2015 14:33:18 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/25/tomcat%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AF%BC%E5%85%A5%E6%BA%90%E7%A0%81%E5%B7%A5%E7%A8%8B%E5%88%B0eclipse/</guid>
      <description>测试环境为：Ubuntu 14.04 LTS + Tomcat 7.0.63 下载Tomcat源码 cd ~/Downloads wget -c http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.63/src/apache-tomcat-7.0.63-src.tar.gz tar -xvf apache-tomcat-7.0.63-src.tar.gz cd apache-tomcat-7.0.63-src 转换成Maven工程 cd ~/Downloads/apache-tomcat-7.0.63-src touch pom.xml pom.xml 文件内容如下 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;Tomcat7.0&amp;lt;/artifactId&amp;gt; &amp;lt;name&amp;gt;Tomcat7.0&amp;lt;/name&amp;gt;</description>
    </item>
    
    <item>
      <title>Linux技巧收集</title>
      <link>https://emacsist.github.io/2015/08/25/linux%E6%8A%80%E5%B7%A7%E6%94%B6%E9%9B%86/</link>
      <pubDate>Tue, 25 Aug 2015 11:48:05 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/25/linux%E6%8A%80%E5%B7%A7%E6%94%B6%E9%9B%86/</guid>
      <description>获取外网IP PUBLIC_IP=`wget http://ipecho.net/plain -O - -q ; echo` echo $PUBLIC_IP 直接显示: wget http://ipecho.net/plain -O - -q ; echo 查找历史命令 Ctrl+R 搜索 从当前目录，递归搜索&amp;rdquo;10.0.0.40&amp;rdquo;这</description>
    </item>
    
    <item>
      <title>MySQL源码编译及使用单机多实例管理</title>
      <link>https://emacsist.github.io/2015/08/24/mysql%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 24 Aug 2015 15:07:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/24/mysql%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B%E7%AE%A1%E7%90%86/</guid>
      <description>本文的测试环境为 Ubuntu 14.04.2 LTS 64 bit + MySQL 5.6 下载源码并安装及初始化数据库 cd ~/Downloads wget -c http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-5.6.26.tar.gz tar -xvf mysql-5.6.26.tar.gz cd mysql-5.6.26 sudo groupadd mysql sudo useradd -r -g mysql mysql sudo apt-get install cmake cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql-5.6 -DMYSQL_USER=mysql sudo mkdir /usr/local/mysql-5.6 sudo make install sudo chown mysql:mysql -R /usr/local/mysql-5.6 sudo mkdir</description>
    </item>
    
    <item>
      <title>MySQL Explain 详解</title>
      <link>https://emacsist.github.io/2015/08/20/mysql-explain-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 20 Aug 2015 11:01:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/20/mysql-explain-%E8%AF%A6%E8%A7%A3/</guid>
      <description>用法 explain select xxx id 列 从ID列可以判断SQL的执行顺序：从大到小，如果ID相同，就从上到下执行。 如果行引用联合结果的其他行，那么它的值可能为NULL</description>
    </item>
    
    <item>
      <title>&lt;数据库索引设计与优化&gt;读书笔记二</title>
      <link>https://emacsist.github.io/2015/08/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BC%98%E5%8C%96%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Fri, 14 Aug 2015 00:07:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BC%98%E5%8C%96%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>索引片及匹配列 访问路径(即执行计划)的成本很大程序上取决于索引片的厚度, 即谓词表达式确定的值域范围.索引片越厚,需要顺序扫描的索引页就越多,</description>
    </item>
    
    <item>
      <title>&lt;数据库索引设计与优化&gt;读书笔记一</title>
      <link>https://emacsist.github.io/2015/08/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BC%98%E5%8C%96%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Thu, 13 Aug 2015 21:18:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BC%98%E5%8C%96%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>误区和误解 误区1: 索引层级不要超过5层 这个通常基于的假设就是:只有根页是留在内存中的. 对于现代的硬件来说,对索引的层数做强制限制是没有什么意</description>
    </item>
    
    <item>
      <title>Eclipse遇到Unable to load the mojo错误</title>
      <link>https://emacsist.github.io/2015/08/06/eclipse%E9%81%87%E5%88%B0unable-to-load-the-mojo%E9%94%99%E8%AF%AF/</link>
      <pubDate>Thu, 06 Aug 2015 11:45:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/06/eclipse%E9%81%87%E5%88%B0unable-to-load-the-mojo%E9%94%99%E8%AF%AF/</guid>
      <description>Eclipse在进行 Maven更新时出现错误Unable to load the mojo 在 stackoverflow 上有人回答，也帮我解决了问题。 When I had this problem, it seemed to be a problem with my Maven install. Uninstalling the M2Eclipse plugin and deleting</description>
    </item>
    
    <item>
      <title>ubuntu 开发环境配置</title>
      <link>https://emacsist.github.io/2015/08/04/ubuntu-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 04 Aug 2015 18:08:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/04/ubuntu-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>安装必要的编译环境 sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev build-essential 安装从这里打开终端 sudo apt-get install nautilus-open-terminal 安装Chrome wget -c https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 源码安装Emacs sudo apt-get build-dep emacs24 wget -c http://mirror.rise.ph/gnu/emacs/emacs-24.5.tar.gz tar -xvf emacs-24.5.tar.gz mkdir /usr/local/emacs-24.5/ sudo chown -R</description>
    </item>
    
    <item>
      <title>Ubuntu下SSD优化</title>
      <link>https://emacsist.github.io/2015/08/03/ubuntu%E4%B8%8Bssd%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 03 Aug 2015 17:43:52 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/03/ubuntu%E4%B8%8Bssd%E4%BC%98%E5%8C%96/</guid>
      <description>检查4K对齐 ✗ sudo fdisk -lu Disk /dev/sda: 500.1 GB, 500107862016 bytes 255 heads, 63 sectors/track, 60801 cylinders, total 976773168 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x1abd1abc Device Boot Start End Blocks Id System /dev/sda1 * 2048 782335 390144 83 Linux /dev/sda2 784382</description>
    </item>
    
    <item>
      <title>关于Java应用启动时报 could not find the document 错误的问题及解决</title>
      <link>https://emacsist.github.io/2015/07/30/%E5%85%B3%E4%BA%8Ejava%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5-could-not-find-the-document-%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Thu, 30 Jul 2015 14:56:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/30/%E5%85%B3%E4%BA%8Ejava%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5-could-not-find-the-document-%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</guid>
      <description>这两天发现到一个很奇怪的问题，就是应用有时候在启动的时候，会报 o.s.b.f.x.XmlBeanDefinitionReader.warning[2015-07-30 14:19:05] : Ignored XML validation warningorg.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document &#39;http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd&#39;, because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not &amp;lt;xsd:schema&amp;gt;. at</description>
    </item>
    
    <item>
      <title>Maven为不同环境打包war</title>
      <link>https://emacsist.github.io/2015/07/30/maven%E4%B8%BA%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85war/</link>
      <pubDate>Thu, 30 Jul 2015 11:17:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/30/maven%E4%B8%BA%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85war/</guid>
      <description>Maven为生产环境，测试环境（或者更多）的不同而使用不同的配置文件 首先，为项目准备好不同的环境存放的配置文件的目录比如 存放测试环境的配置文</description>
    </item>
    
    <item>
      <title>Nginx &#43; Tomcat &#43; Session 共享解决方案</title>
      <link>https://emacsist.github.io/2015/07/29/nginx-tomcat-session-%E5%85%B1%E4%BA%AB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Wed, 29 Jul 2015 11:31:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/29/nginx-tomcat-session-%E5%85%B1%E4%BA%AB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>注意， 这里使用的是 Linux + Tomcat 7.x + JDK 7 + Nginx + Spring Session 的方式 安装Redis Redis.io 配置Tomcat 这里为了简单，直接复制两份Tomcat，分别将目录命名为sp</description>
    </item>
    
    <item>
      <title>Nginx 负载均衡配置</title>
      <link>https://emacsist.github.io/2015/07/28/nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 28 Jul 2015 12:09:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/28/nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE/</guid>
      <description>Ningx 配置负载均衡 注意，默认情况下，它使用的是轮询的方式来进行负载均衡的。 示例配置代码 http { upstream myapp1 { server srv1.example.com; server srv2.example.com; server srv3.example.com; } server { listen 80; location / { proxy_pass http://myapp1; } } } 均衡策略 r</description>
    </item>
    
    <item>
      <title>Java中的Comparator使用</title>
      <link>https://emacsist.github.io/2015/07/27/java%E4%B8%AD%E7%9A%84comparator%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 27 Jul 2015 14:11:22 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/27/java%E4%B8%AD%E7%9A%84comparator%E4%BD%BF%E7%94%A8/</guid>
      <description>Comparator 与 Comparable 比较器，一般用于排序的时候。即如果某个没有实现Comparable接口， 这时可以通过Comparator来实现类的外在排序器。 它与 Comparable 不</description>
    </item>
    
    <item>
      <title>Redis入门指南--读书笔记</title>
      <link>https://emacsist.github.io/2015/07/26/redis%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 26 Jul 2015 15:05:17 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/26/redis%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>版本规则 x.y.z X: 大版本号 Y: 如果是偶数, 则是稳定版; 否则为不稳定版 Z: 修补号 安装(Linux) 最新稳定版: wget http://download.redis.io/redis-stable.tar.gz 编译及安装到指定目录(默认情况下,它会</description>
    </item>
    
    <item>
      <title>Java 日志实践</title>
      <link>https://emacsist.github.io/2015/07/23/java-%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 23 Jul 2015 14:12:17 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/23/java-%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/</guid>
      <description>每个类一个Logger private static final Logger LOG = LoggerFactory.getLogger(Your.class); 日志级别 trace 最详细的日志级别信息 debug 调试级别的日志级别信息 info 一般的日志级别信息 warn 警告级别信息 error 错误级别信息 fatal</description>
    </item>
    
    <item>
      <title>Java Web 项目包建议设计</title>
      <link>https://emacsist.github.io/2015/07/21/java-web-%E9%A1%B9%E7%9B%AE%E5%8C%85%E5%BB%BA%E8%AE%AE%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 21 Jul 2015 17:51:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/21/java-web-%E9%A1%B9%E7%9B%AE%E5%8C%85%E5%BB%BA%E8%AE%AE%E8%AE%BE%E8%AE%A1/</guid>
      <description>以下这些都只是从工作中，思考出来的，只是在下自己的拙见。一个好的包设计， 可以让项目更加清晰具体。 com.company.dao.pojo 这里存放的是与数据库对应的表的POJO com.company.dao 这</description>
    </item>
    
    <item>
      <title>Spring中的事务回滚</title>
      <link>https://emacsist.github.io/2015/07/16/spring%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A/</link>
      <pubDate>Thu, 16 Jul 2015 15:25:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/16/spring%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A/</guid>
      <description>开启声明式事务 spring.xml里配置 &amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;org.apache.commons.dbcp.BasicDataSource&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;${jdbc.driverClassName}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${jdbc.url}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${jdbc.username}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${jdbc.password}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;maxActive&amp;quot;&amp;gt; &amp;lt;value&amp;gt;64&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;maxIdle&amp;quot;&amp;gt; &amp;lt;value&amp;gt;64&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;maxWait&amp;quot;&amp;gt; &amp;lt;value&amp;gt;0&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;validationQuery&amp;quot;&amp;gt; &amp;lt;value&amp;gt;select 1&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;testWhileIdle&amp;quot;&amp;gt; &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;minEvictableIdleTimeMillis&amp;quot;&amp;gt; &amp;lt;value&amp;gt;20000000&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;timeBetweenEvictionRunsMillis&amp;quot;&amp;gt; &amp;lt;value&amp;gt;3600000&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean</description>
    </item>
    
    <item>
      <title>Spring单元测试</title>
      <link>https://emacsist.github.io/2015/07/14/spring%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Tue, 14 Jul 2015 16:12:03 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/14/spring%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>资源文件 将所有的资源文件, 放到测试包及测试资源下(如果没有的话).以免麻烦, 统一放到 classpath 下. # 这放测试代码文件 src/test/java # 这放测试资源文件 src/test/resource 进行单元测</description>
    </item>
    
    <item>
      <title>我使用的Emacs插件</title>
      <link>https://emacsist.github.io/2015/07/11/%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84emacs%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Sat, 11 Jul 2015 11:46:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/11/%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84emacs%E6%8F%92%E4%BB%B6/</guid>
      <description>使用相对行号 relative-line-numbers ace-jump 快速跳转 ace-jump-mode 主题 Emacs theme Emacs 资源 Emacs Sexy</description>
    </item>
    
    <item>
      <title>我的Emacs</title>
      <link>https://emacsist.github.io/2015/07/10/%E6%88%91%E7%9A%84emacs/</link>
      <pubDate>Fri, 10 Jul 2015 14:08:17 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/10/%E6%88%91%E7%9A%84emacs/</guid>
      <description>Emacs Prelude Github 配置说明 ~/.emacs.d/personal 目录: 用于存放自己的个性化配置, 最好不要动其他的目录的文件. 比如自己通过 package-install 安装完成后,可以将该插件的一些配置自定义放在这里 ~/.emacs.d/personal/preload/</description>
    </item>
    
    <item>
      <title>[翻译]Emacs的prelude READMD文档</title>
      <link>https://emacsist.github.io/2015/07/09/%E7%BF%BB%E8%AF%91emacs%E7%9A%84prelude-readmd%E6%96%87%E6%A1%A3/</link>
      <pubDate>Thu, 09 Jul 2015 11:05:52 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/09/%E7%BF%BB%E8%AF%91emacs%E7%9A%84prelude-readmd%E6%96%87%E6%A1%A3/</guid>
      <description>原文 Emacs Prelude Prelude 是一个Emacs发行版, 旨在加强默认Emacs的体验.Prelude更改了许多默认的配置, 组合捆绑了大量的额外的插件,并添加了它自</description>
    </item>
    
    <item>
      <title>使用Java监控工具出现 Can&#39;t attach to the process</title>
      <link>https://emacsist.github.io/2015/07/07/%E4%BD%BF%E7%94%A8java%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%87%BA%E7%8E%B0-cant-attach-to-the-process/</link>
      <pubDate>Tue, 07 Jul 2015 16:49:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/07/%E4%BD%BF%E7%94%A8java%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%87%BA%E7%8E%B0-cant-attach-to-the-process/</guid>
      <description>问题重现 ➜ jinfo -flags 3032 Attaching to process ID 3032, please wait... Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach to the process sun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach to the process at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$LinuxDebuggerLocalWorkerThread.execute(LinuxDebuggerLocal.java:163) at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach(LinuxDebuggerLocal.java:278) at sun.jvm.hotspot.HotSpotAgent.attachDebugger(HotSpotAgent.java:671) at sun.jvm.hotspot.HotSpotAgent.setupDebuggerLinux(HotSpotAgent.java:611) at sun.jvm.hotspot.HotSpotAgent.setupDebugger(HotSpotAgent.java:337) at sun.jvm.hotspot.HotSpotAgent.go(HotSpotAgent.java:304) at sun.jvm.hotspot.HotSpotAgent.attach(HotSpotAgent.java:140) at sun.jvm.hotspot.tools.Tool.start(Tool.java:185) at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118) at sun.jvm.hotspot.tools.JInfo.main(JInfo.java:138) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at sun.tools.jinfo.JInfo.runTool(JInfo.java:108) at sun.tools.jinfo.JInfo.main(JInfo.java:76) Caused by: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach</description>
    </item>
    
    <item>
      <title>Redis与Java使用经验</title>
      <link>https://emacsist.github.io/2015/07/06/redis%E4%B8%8Ejava%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Mon, 06 Jul 2015 16:07:44 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/06/redis%E4%B8%8Ejava%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</guid>
      <description>Redis 中的数据类型 String——字符串 Hash——字典 List——列表 Set——集合 Sorted Set——有序集合 String (简单的 K-V 类型) 适合场景: 简单的 K-V 键</description>
    </item>
    
    <item>
      <title>Ubuntu 14.04 LTS 下安装Emacs 24.5</title>
      <link>https://emacsist.github.io/2015/07/03/ubuntu-14.04-lts-%E4%B8%8B%E5%AE%89%E8%A3%85emacs-24.5/</link>
      <pubDate>Fri, 03 Jul 2015 11:24:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/03/ubuntu-14.04-lts-%E4%B8%8B%E5%AE%89%E8%A3%85emacs-24.5/</guid>
      <description>先删除以前的 emacs 版本 可以进入 Ubuntu Software Center 里进行删除. 如果熟悉命令行, 也可以使用 sudo apt-get remove emacs 来进行删除. 安装核心依赖 sudo apt-get install build-essential sudo apt-get build-dep emacs24 下载 Emacs 24.5 源码 GNU Emacs 24.5 cd ~/Downloads</description>
    </item>
    
    <item>
      <title>Emacs配置文件之prelude</title>
      <link>https://emacsist.github.io/2015/07/03/emacs%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B9%8Bprelude/</link>
      <pubDate>Fri, 03 Jul 2015 00:39:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/03/emacs%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B9%8Bprelude/</guid>
      <description>Prelude 它是一个高度可配置的开箱即用的Emacs配置文件集合. Github Prelude 开启里面的modules 默认情况下, 安装好 prelude 是没有开启它的模块功能的,要开启自己</description>
    </item>
    
    <item>
      <title>Emacs技巧之反转指定区域的内容</title>
      <link>https://emacsist.github.io/2015/07/01/emacs%E6%8A%80%E5%B7%A7%E4%B9%8B%E5%8F%8D%E8%BD%AC%E6%8C%87%E5%AE%9A%E5%8C%BA%E5%9F%9F%E7%9A%84%E5%86%85%E5%AE%B9/</link>
      <pubDate>Wed, 01 Jul 2015 23:24:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/01/emacs%E6%8A%80%E5%B7%A7%E4%B9%8B%E5%8F%8D%E8%BD%AC%E6%8C%87%E5%AE%9A%E5%8C%BA%E5%9F%9F%E7%9A%84%E5%86%85%E5%AE%B9/</guid>
      <description>原内容 一 二 三 四 五 六 七 八 操作之后的内容 八 七 六 五 四 三 二 一 操作步骤 先标记所要反转的区域的内容(C-@ 为开始标记, 然后移动渔村到指定区域) 然后输入以</description>
    </item>
    
    <item>
      <title>MySQL 备份脚本</title>
      <link>https://emacsist.github.io/2015/07/01/mysql-%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Wed, 01 Jul 2015 14:27:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/01/mysql-%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/</guid>
      <description>MySQL 备份 InnoDB 每天备份策略 cd /etc/cron.daily/ touch /etc/cron.daily/dbbackup-daily.sh chmod 755 /etc/cron.daily/dbbackup-daily.sh vi /etc/cron.daily/dbbackup-daily.sh 然后写入以下内容 #!/bin/bash dbs=( &amp;quot;db1&amp;quot; &amp;quot;db2&amp;quot; &amp;quot;db3&amp;quot; ) for db in &amp;quot;${dbs[@]}&amp;quot; do now=&amp;quot;$(date +&#39;%Y_%m_%d_%H_%M_%S&#39;)&amp;quot; filename=&amp;quot;${db}_backup_$now&amp;quot;.gz backupfolder=&amp;quot;/home/yang/dbbackup&amp;quot; fullpathbackupfile=&amp;quot;$backupfolder/$filename&amp;quot; logfile=&amp;quot;$backupfolder/&amp;quot;backup_log_&amp;quot;$(date +&#39;%Y_%m&#39;)&amp;quot;.txt echo &amp;quot;mysqldump ${db} started at $(date +&#39;%Y_%m_%d %H:%M:%S&#39;)&amp;quot; &amp;gt;&amp;gt; &amp;quot;$logfile&amp;quot; /home/uniweibo/mysql/mysql-5.6.17/bin/mysqldump -h127.0.0.1 --single-transaction -uroot -P6606 -pxxxxx ${db} | gzip &amp;gt; &amp;quot;$fullpathbackupfile&amp;quot; echo &amp;quot;mysqldump ${db} finished</description>
    </item>
    
    <item>
      <title>Emacs技巧收集</title>
      <link>https://emacsist.github.io/2015/06/30/emacs%E6%8A%80%E5%B7%A7%E6%94%B6%E9%9B%86/</link>
      <pubDate>Tue, 30 Jun 2015 12:21:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/30/emacs%E6%8A%80%E5%B7%A7%E6%94%B6%E9%9B%86/</guid>
      <description>Emacs中的按键说明 C-: 意思是按住 Ctrol 键 `M-&amp;rsquo;: 意指 Meta 键 (在大多数键盘上指 Alt 键) `DEL&amp;rsquo;: 意指退格键 (不是 删除(Delete) key) `RET&amp;rsquo;: 意指回车键 `SPC&amp;rsquo;: 意指空格键 `ESC&amp;rsquo;: 意</description>
    </item>
    
    <item>
      <title>Emacs技巧之宏编辑</title>
      <link>https://emacsist.github.io/2015/06/29/emacs%E6%8A%80%E5%B7%A7%E4%B9%8B%E5%AE%8F%E7%BC%96%E8%BE%91/</link>
      <pubDate>Mon, 29 Jun 2015 23:50:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/29/emacs%E6%8A%80%E5%B7%A7%E4%B9%8B%E5%AE%8F%E7%BC%96%E8%BE%91/</guid>
      <description>宏编辑 定义: 所谓宏，就是一些命令组织在一起，作为一个单独命令完成一个特定任务. 宏操作 C-x ( 或者 F3 : 开始定义一个键盘操作宏. C-x ) 或者 F4 : 结束定义</description>
    </item>
    
    <item>
      <title>Emacs技巧之矩阵编辑</title>
      <link>https://emacsist.github.io/2015/06/29/emacs%E6%8A%80%E5%B7%A7%E4%B9%8B%E7%9F%A9%E9%98%B5%E7%BC%96%E8%BE%91/</link>
      <pubDate>Mon, 29 Jun 2015 21:44:03 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/29/emacs%E6%8A%80%E5%B7%A7%E4%B9%8B%E7%9F%A9%E9%98%B5%E7%BC%96%E8%BE%91/</guid>
      <description>Emacs中的矩阵编辑 在开始进行矩阵编辑之前, 首先要标记所要编辑的矩阵.矩阵的选择, 是指两个对角的点所在的范围里. 在矩阵编辑中, 所有的指令,</description>
    </item>
    
    <item>
      <title>我的Emacs</title>
      <link>https://emacsist.github.io/2015/06/27/%E6%88%91%E7%9A%84emacs/</link>
      <pubDate>Sat, 27 Jun 2015 15:03:22 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/27/%E6%88%91%E7%9A%84emacs/</guid>
      <description>安装 Mac Emacs For Mac OS X Ubuntu sudo add-apt-repository ppa:cassou/emacs sudo apt-get update sudo apt-get install emacs24 安装完Emacs后还要配置好相应的中文输入法问题，经过折腾，总结如下：（ubuntu14.04，fxc</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之分析堆</title>
      <link>https://emacsist.github.io/2015/06/27/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%86%E6%9E%90%E5%A0%86/</link>
      <pubDate>Sat, 27 Jun 2015 00:01:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/27/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%86%E6%9E%90%E5%A0%86/</guid>
      <description>常量池的位置 Java 6 及之前, 常量池放在永久区 Java 7 及以后, 字符串常量池放到了堆进行管理.(也就是说可以被垃圾收集器回收) Java 7 及以后, 可以通过虚拟机</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之性能监控工具</title>
      <link>https://emacsist.github.io/2015/06/26/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/26/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</guid>
      <description>top vmstat iostat pidstat 查看某进程及某线程占用CPU的例子 jps: 列出java进程,找到pid. pidstat -p pid -u 1 3 -u -t: 查看pid的进程所有线程的cpu使用情况. jstack -l pid &amp;gt;</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之垃圾收集器参数</title>
      <link>https://emacsist.github.io/2015/06/25/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 25 Jun 2015 23:10:35 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/25/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%8F%82%E6%95%B0/</guid>
      <description>串行回收器参数 -XX:+UseSerialGC: 在新生代和年老代使用串行收集器 -XX:SurvivorRatio: 设置eden和survivor区大小的比例 -XX:PretenureSizeThreshold: 设置大对象直接进入老年代的阈值.当对象的大小,超</description>
    </item>
    
    <item>
      <title>Jackson JSON 库使用例子</title>
      <link>https://emacsist.github.io/2015/06/25/jackson-json-%E5%BA%93%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Thu, 25 Jun 2015 12:11:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/25/jackson-json-%E5%BA%93%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</guid>
      <description>ObjectMapper 它是线程安全的，所以建议使用它时，作为单例使用： private static final ObjectMapper mapper = new ObjectMapper(); Quick Parsing String jsonString = &amp;quot;{\&amp;quot;k1\&amp;quot;:\&amp;quot;v1\&amp;quot;,\&amp;quot;k2\&amp;quot;:\&amp;quot;v2\&amp;quot;}&amp;quot;; ObjectMapper mapper = new ObjectMapper(); JsonNode actualObj = mapper.readTree(jsonString); assertNotNull(actualObj); Convert JSON to Java Map JsonFactory factory = new JsonFactory(); ObjectMapper mapper = new ObjectMapper(factory); File from = new File(&amp;quot;albumnList.txt&amp;quot;); TypeReference&amp;lt;HashMap&amp;lt;String,Object&amp;gt;&amp;gt;</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之回收算法</title>
      <link>https://emacsist.github.io/2015/06/24/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 24 Jun 2015 23:57:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/24/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</guid>
      <description>引用计数法 问题1: 无法处理循环引用的情况 问题2: 都要伴随着加减引用计数操作,对性能有一定的影响 名词解释 可达对象 通过根对象进行引用搜索, 最终可</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之常用Java虚拟机参数</title>
      <link>https://emacsist.github.io/2015/06/23/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%82%E6%95%B0/</link>
      <pubDate>Tue, 23 Jun 2015 00:11:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/23/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%82%E6%95%B0/</guid>
      <description>跟踪垃圾回收 -XX:+PrintGC 例子日志样本： [GC 4793K-&amp;gt;377K(15872K), 0.0006926 secs] 表示当前使用了4793K,GC后，使用量变为377K，最大可用为15872K -XX:+PrintGCDetails 格式： [名称:当前某区大小</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之函数调用</title>
      <link>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 22 Jun 2015 11:41:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      <description>出入Java栈 Java栈是一块线程私有的内存空间。它是一块先进后出的数据结构。Java栈中保存的主要内容为栈帧。每一次函数调用，都会有一个对</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之浮点数表示方式</title>
      <link>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%AE%E7%82%B9%E6%95%B0%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 22 Jun 2015 00:09:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%AE%E7%82%B9%E6%95%B0%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F/</guid>
      <description>IEEE 754 标准 Java虚拟机处理浮点数的标准是参考 IEEE 754 规范的。 参考文档 : IEEE 754 标示格式 符号位 | 阶码 | 尾数 ##32位 1 位 | 8 位 | 23位 ##64位 1 位 |</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之数值表示</title>
      <link>https://emacsist.github.io/2015/06/21/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA/</link>
      <pubDate>Sun, 21 Jun 2015 23:19:44 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/21/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA/</guid>
      <description>原码 在数值前直接加一符号位的表示法。 [+7]原= 0 0000111 B [-7]原= 1 0000111 B -127～+127 反码 负数的反码，符号位为“1”，数值部分按位取反。</description>
    </item>
    
    <item>
      <title>我的Git学习笔记</title>
      <link>https://emacsist.github.io/2015/06/21/%E6%88%91%E7%9A%84git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 21 Jun 2015 16:29:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/21/%E6%88%91%E7%9A%84git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>常用配置 #配置用户名 git config --global user.name &amp;quot;Zhiyong yang&amp;quot; #配置邮箱 git config --global user.email &amp;quot;dreamers.yzy@gmail.com&amp;quot; #配置编辑器, 这个要先启动emacs: `emacs --daemon` git config --global core.editor &amp;quot;emacsclient -t&amp;quot; 克隆远程代码库 git clone https://github.com/emacsist/emacsist.github.io 初始化本地gi</description>
    </item>
    
    <item>
      <title>Hexo&#43;Github Pages搭建个人Blog</title>
      <link>https://emacsist.github.io/2015/06/20/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog/</link>
      <pubDate>Sat, 20 Jun 2015 23:38:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/20/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog/</guid>
      <description>因为 Hexo 版本问题,可能每次的安装及配置不同, 所以,最好还是参照官方的文档来做. 这里只是添加一些文档链接,方便日后查询. 安装及配置 Hexo 官方网站: Hexo</description>
    </item>
    
    <item>
      <title>[翻译]手把手教你配置流复制</title>
      <link>https://emacsist.github.io/2015/01/24/%E7%BF%BB%E8%AF%91%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AE%E6%B5%81%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Sat, 24 Jan 2015 13:24:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/24/%E7%BF%BB%E8%AF%91%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AE%E6%B5%81%E5%A4%8D%E5%88%B6/</guid>
      <description>[翻译]手把手教你配置流复制 原文 尽管许多人知道流复制，这篇博客是为初学者准备的，我将从必要条件和一些关于流复制的介绍开始。:-) 必要条件： 在</description>
    </item>
    
    <item>
      <title>[翻译]PostgreSQL 9.0 内存 &amp; 进程</title>
      <link>https://emacsist.github.io/2015/01/09/%E7%BF%BB%E8%AF%91postgresql-9.0-%E5%86%85%E5%AD%98-%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Fri, 09 Jan 2015 20:45:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/09/%E7%BF%BB%E8%AF%91postgresql-9.0-%E5%86%85%E5%AD%98-%E8%BF%9B%E7%A8%8B/</guid>
      <description>原文 作者：Raghav 在PostgreSQL构架基础上进一步了解，在这里，通过信息链接我将会讨论关于实用进程和内存。许多提交者已经好好地记录</description>
    </item>
    
    <item>
      <title>[翻译]PostgreSQL 9.0 构架</title>
      <link>https://emacsist.github.io/2015/01/08/%E7%BF%BB%E8%AF%91postgresql-9.0-%E6%9E%84%E6%9E%B6/</link>
      <pubDate>Thu, 08 Jan 2015 20:26:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/08/%E7%BF%BB%E8%AF%91postgresql-9.0-%E6%9E%84%E6%9E%B6/</guid>
      <description>原文 作者：Raghavendra 很高兴在这里发布我的第一篇博客，是关于 PostgreSQL 构架的。 在很长一段时间里，我在工作、学习上都广泛地接触Postgre</description>
    </item>
    
    <item>
      <title>《啊哈！算法》学习笔记之栈</title>
      <link>https://emacsist.github.io/2015/01/08/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A0%88/</link>
      <pubDate>Thu, 08 Jan 2015 20:21:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/08/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A0%88/</guid>
      <description>栈 实现也很简单，只需要一个一维数组和一个指向栈顶的变量 top 就可以了。我们通过 top 来对栈进行插入和删除操作。 ##特点：后进先出 利用栈判断是否回文（</description>
    </item>
    
    <item>
      <title>《啊哈！算法》学习笔记之队列</title>
      <link>https://emacsist.github.io/2015/01/08/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%98%9F%E5%88%97/</link>
      <pubDate>Thu, 08 Jan 2015 20:20:52 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/08/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%98%9F%E5%88%97/</guid>
      <description>列队的主要特点：先进先出 文中题目 规则是这样的：首先将第 1个数删除，紧接着将第 2 个数放到这串数的末尾，再将第 3 个数删除并将第 4 个数放到这串数的</description>
    </item>
    
    <item>
      <title>《啊哈！算法》学习笔记之快速排序</title>
      <link>https://emacsist.github.io/2015/01/08/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 08 Jan 2015 20:18:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/08/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>基本思想 每次排序的时候设置一个基准点，将小于等于基准点的数全部放到基准点的一边，将大于等于基准点的数全部放到基准点的另一边. 时间复杂度 因此快</description>
    </item>
    
    <item>
      <title>《啊哈！算法》学习笔记之冒泡排序</title>
      <link>https://emacsist.github.io/2015/01/08/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 08 Jan 2015 20:17:28 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/08/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>基本思想 冒泡排序的基本思想是：每次比较两个相邻的元素，如果它们的顺序错误就把它们交换过来。 以从大到小为例。 每次都是比较相邻的两个数，如果后面</description>
    </item>
    
    <item>
      <title>《啊哈！算法》学习笔记之桶排序</title>
      <link>https://emacsist.github.io/2015/01/06/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A1%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 06 Jan 2015 21:19:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/06/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A1%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>时间复杂度：O(M+N) M:桶的个数（也是该数值的最大数） N:待排序个数 Java实现 随便输入N个不大于M的数字，然后从小到大输出：（从大到小</description>
    </item>
    
    <item>
      <title>使用PostgreSQL无限递归 SELECT 评论系统</title>
      <link>https://emacsist.github.io/2015/01/05/%E4%BD%BF%E7%94%A8postgresql%E6%97%A0%E9%99%90%E9%80%92%E5%BD%92-select-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 05 Jan 2015 20:34:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/05/%E4%BD%BF%E7%94%A8postgresql%E6%97%A0%E9%99%90%E9%80%92%E5%BD%92-select-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid>
      <description>假设有个评论系统，要求支持无限层级的回复，就像一棵树那样 文章 / \ / \ 评论1 评论2 .... 注意可以有任意个子树以及做任意个叶子 大意的表结构 create table comments ( comment_id</description>
    </item>
    
    <item>
      <title>PostgreSQL使用 postgres_fdw 进行跨库操作</title>
      <link>https://emacsist.github.io/2015/01/05/postgresql%E4%BD%BF%E7%94%A8-postgres_fdw-%E8%BF%9B%E8%A1%8C%E8%B7%A8%E5%BA%93%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 05 Jan 2015 20:20:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/05/postgresql%E4%BD%BF%E7%94%A8-postgres_fdw-%E8%BF%9B%E8%A1%8C%E8%B7%A8%E5%BA%93%E6%93%8D%E4%BD%9C/</guid>
      <description>说明 该 postgres_fdw 模块提供了 远程-数据 包装器 postgres_fdw，它能够用于访问一些保存在外部 PostgreSQL 服务器的数据。 该模块提供的功能很大程度上与以前的d</description>
    </item>
    
    <item>
      <title>[转载]你知道数据库索引的工作原理吗？</title>
      <link>https://emacsist.github.io/2015/01/05/%E8%BD%AC%E8%BD%BD%E4%BD%A0%E7%9F%A5%E9%81%93%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%90%97/</link>
      <pubDate>Mon, 05 Jan 2015 20:10:18 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/05/%E8%BD%AC%E8%BD%BD%E4%BD%A0%E7%9F%A5%E9%81%93%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%90%97/</guid>
      <description>转载自：http://www.ituring.com.cn/article/986 作者：李松峰 发表于 2012-02-04 11:43 译者按：今天在翻译时无意中搜索到St</description>
    </item>
    
    <item>
      <title>[翻译]使用部分索引来加速PostgreSQL</title>
      <link>https://emacsist.github.io/2015/01/04/%E7%BF%BB%E8%AF%91%E4%BD%BF%E7%94%A8%E9%83%A8%E5%88%86%E7%B4%A2%E5%BC%95%E6%9D%A5%E5%8A%A0%E9%80%9Fpostgresql/</link>
      <pubDate>Sun, 04 Jan 2015 20:25:28 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/04/%E7%BF%BB%E8%AF%91%E4%BD%BF%E7%94%A8%E9%83%A8%E5%88%86%E7%B4%A2%E5%BC%95%E6%9D%A5%E5%8A%A0%E9%80%9Fpostgresql/</guid>
      <description>原文 本文经过原作者Dan Robinson同意翻译。（我在twitter发送推文和他互动） 你知道PostgreSQL支持表的部分索引吗？这使得</description>
    </item>
    
    <item>
      <title>SQL注意事项</title>
      <link>https://emacsist.github.io/2015/01/02/sql%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Fri, 02 Jan 2015 16:28:38 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/02/sql%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>关于排序 表是一个集合的概念，所以除非你显式地指定 order by 来排序，否则数据库是不保证每次返回的结果顺序是一样的。只是保证在没有修改的情况下，返回的</description>
    </item>
    
    <item>
      <title>PostgreSQL窗口函数中 ROWS 和 RANGE 模式的区别</title>
      <link>https://emacsist.github.io/2015/01/01/postgresql%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E4%B8%AD-rows-%E5%92%8C-range-%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 01 Jan 2015 12:38:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/01/postgresql%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E4%B8%AD-rows-%E5%92%8C-range-%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>示例表数据如下： test=# select * from tcost ; path | cost ------+------- 111 | 23.3 111 | 33.4 111 | 3.4 222 | 3.4 222 | 33.4 222 | 333.4 32 | 3.4 32 | 0.4 32 | 0.04 (9 rows) test=# ROWS test=# select path, cost, sum(cost) over (order by cost desc) as sum_cost, sum(cost) over (order by cost desc rows between current</description>
    </item>
    
    <item>
      <title>[翻译]为什么PostgreSQL的logo是一个大象？</title>
      <link>https://emacsist.github.io/2015/01/01/%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88postgresql%E7%9A%84logo%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%A7%E8%B1%A1/</link>
      <pubDate>Thu, 01 Jan 2015 12:35:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/01/01/%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88postgresql%E7%9A%84logo%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%A7%E8%B1%A1/</guid>
      <description>原文地址 我也不知道，也不敢肯定为什么PostgreSQL的logo是一头大象 &amp;hellip; 我正试着找出这个答案。 到现在为至，我最好的猜测是因为以下这个事</description>
    </item>
    
    <item>
      <title>Java乱码解决方案</title>
      <link>https://emacsist.github.io/2014/12/29/java%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 29 Dec 2014 20:55:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/29/java%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>1.Tomcat配置： &amp;lt;Connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot; connectionTimeout=&amp;quot;20000&amp;quot; redirectPort=&amp;quot;8443&amp;quot; URIEncoding=&amp;quot;UTF-8&amp;quot; useBodyEncodingForURI=&amp;quot;true&amp;quot;/&amp;gt; 2.文件：必须设置统一编码 JSP：&amp;lt;%@ page language=&amp;quot;java&amp;quot; pageEncoding=&amp;quot;UTF-8&amp;quot;%&amp;gt; HTML：&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html;charset=utf-8&amp;quot;&amp;gt; ServletRequest: request.se</description>
    </item>
    
    <item>
      <title>PostgreSQL查看及设置参数、单位、描述等信息</title>
      <link>https://emacsist.github.io/2014/12/26/postgresql%E6%9F%A5%E7%9C%8B%E5%8F%8A%E8%AE%BE%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8D%95%E4%BD%8D%E6%8F%8F%E8%BF%B0%E7%AD%89%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Fri, 26 Dec 2014 20:31:38 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/26/postgresql%E6%9F%A5%E7%9C%8B%E5%8F%8A%E8%AE%BE%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8D%95%E4%BD%8D%E6%8F%8F%E8%BF%B0%E7%AD%89%E4%BF%A1%E6%81%AF/</guid>
      <description>注意 参数名：不区分大小写。 参数值：布尔、整数、浮点数、字符串（大小写无关， 枚举参数值是不区分大小写的） 布尔值可以是：on, off, true, false, yes, no, 1, 0 或这</description>
    </item>
    
    <item>
      <title>PostgreSQL删除表空间</title>
      <link>https://emacsist.github.io/2014/12/26/postgresql%E5%88%A0%E9%99%A4%E8%A1%A8%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Fri, 26 Dec 2014 20:30:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/26/postgresql%E5%88%A0%E9%99%A4%E8%A1%A8%E7%A9%BA%E9%97%B4/</guid>
      <description>昨天在群里看到有同鞋问：如何删除表空间？因为删除的时候，一直报 postgres=# drop tablespace mytmp; ERROR: tablespace &amp;quot;mytmp&amp;quot; is not empty postgres=# 原因 想要删除表空间，那么该表空间必须为空（即没有任何其他</description>
    </item>
    
    <item>
      <title>PostgreSQL中 copy 和 \copy 的区别</title>
      <link>https://emacsist.github.io/2014/12/26/postgresql%E4%B8%AD-copy-%E5%92%8C-%5Ccopy-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 26 Dec 2014 20:28:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/26/postgresql%E4%B8%AD-copy-%E5%92%8C-%5Ccopy-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>权限 copy 必须要以超级用户来运行 \copy 则不必 文件位置 copy 的文件必须是在服务器端的位置 \copy 的则是在客户端的位置。 所以，文件的权限方面，copy是以服务器的</description>
    </item>
    
    <item>
      <title>关于Java中多线程造成的变量共享问题</title>
      <link>https://emacsist.github.io/2014/12/25/%E5%85%B3%E4%BA%8Ejava%E4%B8%AD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%80%A0%E6%88%90%E7%9A%84%E5%8F%98%E9%87%8F%E5%85%B1%E4%BA%AB%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Dec 2014 22:16:12 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/25/%E5%85%B3%E4%BA%8Ejava%E4%B8%AD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%80%A0%E6%88%90%E7%9A%84%E5%8F%98%E9%87%8F%E5%85%B1%E4%BA%AB%E9%97%AE%E9%A2%98/</guid>
      <description>起因 在自己写的一段代码中，使用到了Redis。代码的逻辑是这样子的，先取出数据，然后判断，再然后将该数据进行自减。代码如下： public boolean isOK(String invitationCode, boolean isSub) { ValueOperations&amp;lt;String,</description>
    </item>
    
    <item>
      <title>《麦兜，我和我妈妈》电影有感</title>
      <link>https://emacsist.github.io/2014/12/24/%E9%BA%A6%E5%85%9C%E6%88%91%E5%92%8C%E6%88%91%E5%A6%88%E5%A6%88%E7%94%B5%E5%BD%B1%E6%9C%89%E6%84%9F/</link>
      <pubDate>Wed, 24 Dec 2014 21:12:31 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/24/%E9%BA%A6%E5%85%9C%E6%88%91%E5%92%8C%E6%88%91%E5%A6%88%E5%A6%88%E7%94%B5%E5%BD%B1%E6%9C%89%E6%84%9F/</guid>
      <description>第一次看动画，看到也会莫名其妙地流泪，感触颇深，情到深处无言；爱到深处只能默默地在心里流泪。 人生太多悲天悯人的事，许多时候真的只是只可意会，</description>
    </item>
    
    <item>
      <title>PostgreSQL执行计划和成本因子详解</title>
      <link>https://emacsist.github.io/2014/12/23/postgresql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E5%92%8C%E6%88%90%E6%9C%AC%E5%9B%A0%E5%AD%90%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 23 Dec 2014 21:09:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/23/postgresql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E5%92%8C%E6%88%90%E6%9C%AC%E5%9B%A0%E5%AD%90%E8%AF%A6%E8%A7%A3/</guid>
      <description>PG对各表的统计信息：pg_stats 资源来源：PostgreSQL 9.3.1 中文文档 —— Chapter 47. 系统表 —— 47.68. pg_stats 名字 | 类型 | 引用 | 描述 :&amp;ndash;|:&amp;ndash;|:&amp;ndash;| schemaname | name | pg_namespace.nspname | 包含</description>
    </item>
    
    <item>
      <title>PostgreSQL上选择MAX（COUNT）的数据出来</title>
      <link>https://emacsist.github.io/2014/12/23/postgresql%E4%B8%8A%E9%80%89%E6%8B%A9maxcount%E7%9A%84%E6%95%B0%E6%8D%AE%E5%87%BA%E6%9D%A5/</link>
      <pubDate>Tue, 23 Dec 2014 20:54:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/23/postgresql%E4%B8%8A%E9%80%89%E6%8B%A9maxcount%E7%9A%84%E6%95%B0%E6%8D%AE%E5%87%BA%E6%9D%A5/</guid>
      <description>昨天晚上，和同事讨论了一个SQL的问题，是如何选择根据某字段分组，然后取出MAX COUNT(XX) 值的数据出来。例如数据是： test=# select * from tgroup; id | age | point ----+-----+------- 1 | 1 | 11</description>
    </item>
    
    <item>
      <title>[翻译]为什么在Java里不能将Integer强制转换成String</title>
      <link>https://emacsist.github.io/2014/12/22/%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8java%E9%87%8C%E4%B8%8D%E8%83%BD%E5%B0%86integer%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90string/</link>
      <pubDate>Mon, 22 Dec 2014 22:25:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/22/%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8java%E9%87%8C%E4%B8%8D%E8%83%BD%E5%B0%86integer%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90string/</guid>
      <description>为何Integer不能转换为String 原文 因为 String 和 Integer 不是在同一个对象阶层。 Object / \ / \ String Integer 当你尝试强制转换时，仅仅会在同一个对象阶层转换。比</description>
    </item>
    
    <item>
      <title>Cookie 的 HttpOnly 和 Secure 属性作用</title>
      <link>https://emacsist.github.io/2014/12/22/cookie-%E7%9A%84-httponly-%E5%92%8C-secure-%E5%B1%9E%E6%80%A7%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Mon, 22 Dec 2014 22:23:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/22/cookie-%E7%9A%84-httponly-%E5%92%8C-secure-%E5%B1%9E%E6%80%A7%E4%BD%9C%E7%94%A8/</guid>
      <description>今天和总监、同事又讨论起关于Session共享的解决方案问题，讨论到因为Tomcat自带的Session机制在集群时难以做到真正的集群。因为</description>
    </item>
    
    <item>
      <title>[翻译]PostgreSQL版本策略</title>
      <link>https://emacsist.github.io/2014/12/22/%E7%BF%BB%E8%AF%91postgresql%E7%89%88%E6%9C%AC%E7%AD%96%E7%95%A5/</link>
      <pubDate>Mon, 22 Dec 2014 22:03:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/22/%E7%BF%BB%E8%AF%91postgresql%E7%89%88%E6%9C%AC%E7%AD%96%E7%95%A5/</guid>
      <description>原文 版本策略 我们始终建议所有用户都运行最新可用的次版本号的发行版，无论你正在使用哪个主版本的PostgreSQL。 PostgreSQL主版本</description>
    </item>
    
    <item>
      <title>PostgreSQL最可靠的升级方案[实践]</title>
      <link>https://emacsist.github.io/2014/12/20/postgresql%E6%9C%80%E5%8F%AF%E9%9D%A0%E7%9A%84%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Sat, 20 Dec 2014 09:21:38 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/20/postgresql%E6%9C%80%E5%8F%AF%E9%9D%A0%E7%9A%84%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88%E5%AE%9E%E8%B7%B5/</guid>
      <description>注意事项 1. 如果原先的数据库安装了第三方的扩展，请在升级的新版本服务器上也先安装好这些第三方扩展(contrib) 2. 相应的表空间配置也要与原先</description>
    </item>
    
    <item>
      <title>[翻译]在Ubuntu服务器上将PostgreSQL从9.1升级到9.3</title>
      <link>https://emacsist.github.io/2014/12/20/%E7%BF%BB%E8%AF%91%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%B0%86postgresql%E4%BB%8E9.1%E5%8D%87%E7%BA%A7%E5%88%B09.3/</link>
      <pubDate>Sat, 20 Dec 2014 09:19:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/20/%E7%BF%BB%E8%AF%91%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%B0%86postgresql%E4%BB%8E9.1%E5%8D%87%E7%BA%A7%E5%88%B09.3/</guid>
      <description>原文地址 从不同的重大版本升级PostgreSQL（例如，从9.1升级到9.3），基本上有三种方法： 用 pg_dump 升级 如果可以的话，首先推荐的方法是使用</description>
    </item>
    
    <item>
      <title>SQL语句各部分的执行顺序</title>
      <link>https://emacsist.github.io/2014/12/15/sql%E8%AF%AD%E5%8F%A5%E5%90%84%E9%83%A8%E5%88%86%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Mon, 15 Dec 2014 20:54:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/15/sql%E8%AF%AD%E5%8F%A5%E5%90%84%E9%83%A8%E5%88%86%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid>
      <description>上星期请教了条SQL为什么没有使用到索引的问题，引起了我对SQL执行顺序的疑惑，查了不少资料，收集到比较认可的答案如下，引用资料也在后面标识</description>
    </item>
    
    <item>
      <title>[翻译]CTE表达式和临时表的区别</title>
      <link>https://emacsist.github.io/2014/12/12/%E7%BF%BB%E8%AF%91cte%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E4%B8%B4%E6%97%B6%E8%A1%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 12 Dec 2014 00:02:52 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/12/%E7%BF%BB%E8%AF%91cte%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E4%B8%B4%E6%97%B6%E8%A1%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>翻译于dba.stackexchange.com 版权归原作者所有，本人只是业余爱好翻译。 这个问题是相当广泛的，但尽我所能给你一个普通的回答。</description>
    </item>
    
    <item>
      <title>Java HashSet HashMap 原理</title>
      <link>https://emacsist.github.io/2014/12/11/java-hashset-hashmap-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 11 Dec 2014 10:57:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/11/java-hashset-hashmap-%E5%8E%9F%E7%90%86/</guid>
      <description>HashSet 看其源码java.util.HashSet，它的构造函数内部，是使用java.util.HashMap来实现的. 默认的容量大小，以及扩容因</description>
    </item>
    
    <item>
      <title>[翻译]MySQL与PostgreSQL9.0的复制功能对比</title>
      <link>https://emacsist.github.io/2014/12/09/%E7%BF%BB%E8%AF%91mysql%E4%B8%8Epostgresql9.0%E7%9A%84%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Tue, 09 Dec 2014 22:03:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/09/%E7%BF%BB%E8%AF%91mysql%E4%B8%8Epostgresql9.0%E7%9A%84%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD%E5%AF%B9%E6%AF%94/</guid>
      <description>源文地址 作者:Robin Schumacher 和 Gary Carter,EnterpriseDB 公司 原文: Replication is one of the most popular features used in RDBMS’s today. Replication is used for disaster recovery purposes (i.e. backup or warm stand-by servers), reporting systems where query activity is offloaded onto another machine to conserve resources on the transactional server, and</description>
    </item>
    
    <item>
      <title>PostgreSQL窗口函数</title>
      <link>https://emacsist.github.io/2014/12/08/postgresql%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 08 Dec 2014 21:05:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/08/postgresql%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</guid>
      <description>什么是窗口函数 PostgreSQL窗口函数 窗口函数提供跨行相关的当前查询行集执行计算的能力。仅当调用跟着OVER子句的聚集函数，作为窗口函数</description>
    </item>
    
    <item>
      <title>PostgreSQL选择某组sum结果最小的所有数据</title>
      <link>https://emacsist.github.io/2014/12/05/postgresql%E9%80%89%E6%8B%A9%E6%9F%90%E7%BB%84sum%E7%BB%93%E6%9E%9C%E6%9C%80%E5%B0%8F%E7%9A%84%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 05 Dec 2014 21:46:10 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/05/postgresql%E9%80%89%E6%8B%A9%E6%9F%90%E7%BB%84sum%E7%BB%93%E6%9E%9C%E6%9C%80%E5%B0%8F%E7%9A%84%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE/</guid>
      <description>在 PostgreSQL 技术群里，今天发现有个人在群里“求救”，说想要执行一条SQL语句，获取某表中以某字段为组，并且sum（其他字段）结果最小的，所有结果。 比</description>
    </item>
    
    <item>
      <title>[翻译]PostgreSQL 进程构架</title>
      <link>https://emacsist.github.io/2014/12/04/%E7%BF%BB%E8%AF%91postgresql-%E8%BF%9B%E7%A8%8B%E6%9E%84%E6%9E%B6/</link>
      <pubDate>Thu, 04 Dec 2014 20:34:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/04/%E7%BF%BB%E8%AF%91postgresql-%E8%BF%9B%E7%A8%8B%E6%9E%84%E6%9E%B6/</guid>
      <description>ps aux | grep postgres postgres 31964 0.0 0.3 162180 12436 pts/0 S 18:09 0:00 /usr/local/pg/bin/postgres -D /usr/local/pg/data postgres 31966 0.0 0.0 162312 2192 ? Ss 18:09 0:00 postgres: checkpointer process postgres 31967 0.0 0.0 162180 1820 ? Ss 18:09 0:00 postgres: writer process postgres 31968 0.0 0.0 162180 960 ? Ss 18:09 0:00 postgres: wal writer process postgres 31969 0.0 0.0 163032 2064 ? Ss 18:09 0:00 postgres: autovacuum</description>
    </item>
    
    <item>
      <title>PostgreSQL基础学习（一）</title>
      <link>https://emacsist.github.io/2014/12/03/postgresql%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/</link>
      <pubDate>Wed, 03 Dec 2014 23:14:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/03/postgresql%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid>
      <description>简介 PostgreSQL官网 PostgreSQL 官网号称：它是最世界最先进的开源数据库（顺便说一下，MySQL官网说它自己是最流行的开源数据库）。我觉得这一句</description>
    </item>
    
    <item>
      <title>《数据库查询优化器的艺术》第三章物理查询优化学习笔记</title>
      <link>https://emacsist.github.io/2014/12/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%89%A9%E7%90%86%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 03 Dec 2014 22:09:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%89%A9%E7%90%86%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>代价模型 总代价 = IO 代价 + CPU 代价 COST = P * a_page_cpu_time + W * T P：计划运行时访问的页数，a_page_cpu_time 是每个页读取的时间花费，其积反映了I</description>
    </item>
    
    <item>
      <title>《数据库查询优化器的艺术》第二章逻辑查询优化学习笔记</title>
      <link>https://emacsist.github.io/2014/12/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0%E9%80%BB%E8%BE%91%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 03 Dec 2014 22:05:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0%E9%80%BB%E8%BE%91%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>主要解决的问题 如何找出SQL语句等价的变换形式，使得SQL执行更高效。 #可优化的思路 （1）子句局部优化。 如等价谓词重写，WHERE和HAVI</description>
    </item>
    
    <item>
      <title>自行测试的1亿条数据中PostgreSQL性能</title>
      <link>https://emacsist.github.io/2014/12/02/%E8%87%AA%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%9A%841%E4%BA%BF%E6%9D%A1%E6%95%B0%E6%8D%AE%E4%B8%ADpostgresql%E6%80%A7%E8%83%BD/</link>
      <pubDate>Tue, 02 Dec 2014 19:16:31 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/02/%E8%87%AA%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%9A%841%E4%BA%BF%E6%9D%A1%E6%95%B0%E6%8D%AE%E4%B8%ADpostgresql%E6%80%A7%E8%83%BD/</guid>
      <description>插入一亿条数据 test=# insert into tbl_time1 select generate_series(1,100000000),clock_timestamp(),now(); INSERT 0 100000000 Time: 525833.218 ms 约:8.7分钟 COUNT，没有索引，1亿条数据。 test=# select count(1) from tbl_time1; count ----------- 100000000 (1 row) Time: 3070658.058 ms 约:51.2分钟 添加主键索引</description>
    </item>
    
    <item>
      <title>《数据库查询优化器的艺术》第一章学习笔记</title>
      <link>https://emacsist.github.io/2014/12/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 02 Dec 2014 19:05:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>数据库管理系统 数据定义 数据操纵 数据库的运行管理 数据库的建立和维护等 查询优化的目标 使查询优化引擎生成一个执行策略的过程，尽量使查询的总开销（I</description>
    </item>
    
    <item>
      <title>[翻译]PostgreSQL中的死锁</title>
      <link>https://emacsist.github.io/2014/12/01/%E7%BF%BB%E8%AF%91postgresql%E4%B8%AD%E7%9A%84%E6%AD%BB%E9%94%81/</link>
      <pubDate>Mon, 01 Dec 2014 21:48:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/01/%E7%BF%BB%E8%AF%91postgresql%E4%B8%AD%E7%9A%84%E6%AD%BB%E9%94%81/</guid>
      <description>原文 在讨论死锁之前，让我们看一下锁的类型以及它们在PostgreSQL中的获取方法。 锁的类型： * 表级锁 以及 * 行级锁 表级锁： AcessShar</description>
    </item>
    
    <item>
      <title>[翻译]高效使用PostgreSQL索引</title>
      <link>https://emacsist.github.io/2014/12/01/%E7%BF%BB%E8%AF%91%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8postgresql%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 01 Dec 2014 21:46:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/01/%E7%BF%BB%E8%AF%91%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8postgresql%E7%B4%A2%E5%BC%95/</guid>
      <description>原文 在Postgres里有许多种索引类型，也有不同的方式来使用它们。在本文中,我们概述一下可用的索引类型，并解释不同的使用和维护最常见的索引</description>
    </item>
    
    <item>
      <title>[翻译]PostgreSQL中的log, xlog和clog</title>
      <link>https://emacsist.github.io/2014/12/01/%E7%BF%BB%E8%AF%91postgresql%E4%B8%AD%E7%9A%84log-xlog%E5%92%8Cclog/</link>
      <pubDate>Mon, 01 Dec 2014 21:45:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/01/%E7%BF%BB%E8%AF%91postgresql%E4%B8%AD%E7%9A%84log-xlog%E5%92%8Cclog/</guid>
      <description>[翻译]PostgreSQL中的log, xlog和clog 原文 译记：该文章开头还有一段内容就不翻译了。主要翻译这些log的主要内容。 pg_log $PG</description>
    </item>
    
    <item>
      <title>PostgreSQL中代替MySQL的内存表方法</title>
      <link>https://emacsist.github.io/2014/10/01/postgresql%E4%B8%AD%E4%BB%A3%E6%9B%BFmysql%E7%9A%84%E5%86%85%E5%AD%98%E8%A1%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 01 Oct 2014 23:35:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/10/01/postgresql%E4%B8%AD%E4%BB%A3%E6%9B%BFmysql%E7%9A%84%E5%86%85%E5%AD%98%E8%A1%A8%E6%96%B9%E6%B3%95/</guid>
      <description>今天在群里发现有人问PostgreSQL里，有没有类似MySQL的内存表（Memory引擎）。 其实在PostgreSQL里，就只有一种表：堆</description>
    </item>
    
  </channel>
</rss>