<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on emacsist</title>
    <link>https://emacsist.github.io/categories/go/</link>
    <description>Recent content in go on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 24 Nov 2016 11:51:24 +0000</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 中的接口类型与指针</title>
      <link>https://emacsist.github.io/2016/11/24/golang-%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%8C%87%E9%92%88/</link>
      <pubDate>Thu, 24 Nov 2016 11:51:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/24/golang-%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%8C%87%E9%92%88/</guid>
      <description>这是在Google Golang的Nuts上看到的 golang-nuts 当作为in</description>
    </item>
    
    <item>
      <title>Golang 归并排序MergeSort</title>
      <link>https://emacsist.github.io/2016/11/22/golang-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmergesort/</link>
      <pubDate>Tue, 22 Nov 2016 19:10:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/22/golang-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmergesort/</guid>
      <description>思路 将一排数据，进行左右不断地进行划分（递[归]），然后再对</description>
    </item>
    
    <item>
      <title>Golang 快速排序</title>
      <link>https://emacsist.github.io/2016/11/21/golang-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 21 Nov 2016 23:54:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/21/golang-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>思路 data = [3 2 6 1 2 7] middle = 3 ? 2 6 1 2 7 //第一轮: // data[i] = 2 //</description>
    </item>
    
    <item>
      <title>Golang 希尔排序 VS 插入排序</title>
      <link>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F-vs-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 20 Nov 2016 23:02:52 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F-vs-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>希尔排序 VS 插入排序 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;helper/number&amp;quot; &amp;quot;helper/time&amp;quot; ) func main() { data := number.GenerateInt(100000, 1000) dataCopy := make([]int, len(data)) copy(dataCopy, data)</description>
    </item>
    
    <item>
      <title>Golang 希尔排序</title>
      <link>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 20 Nov 2016 22:40:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</guid>
      <description>希尔排序 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;helper/number&amp;quot; &amp;quot;helper/time&amp;quot; ) func main() { data := number.GenerateInt(100000, 100) start := time.CurrentMillis() shellSort(data) fmt.Printf(&amp;quot;cost %v ms\n&amp;quot;, time.CurrentMillis()-start) } func shellSort(data</description>
    </item>
    
    <item>
      <title>Golang 插入排序</title>
      <link>https://emacsist.github.io/2016/11/18/golang-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 18 Nov 2016 15:47:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/18/golang-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>插入排序 &amp;ndash; 初版 这个版本的思想是：先找出要交换的两个位置的 index ，</description>
    </item>
    
    <item>
      <title>Golang 堆排序与选择排序</title>
      <link>https://emacsist.github.io/2016/11/17/golang-%E5%A0%86%E6%8E%92%E5%BA%8F%E4%B8%8E%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 17 Nov 2016 19:12:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/17/golang-%E5%A0%86%E6%8E%92%E5%BA%8F%E4%B8%8E%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>选择排序 select.go，这里以选择最小的为例子 package main import &amp;quot;fmt&amp;quot; import</description>
    </item>
    
    <item>
      <title>Golang 中等待Goroutines 执行完毕</title>
      <link>https://emacsist.github.io/2016/11/13/golang-%E4%B8%AD%E7%AD%89%E5%BE%85goroutines-%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95/</link>
      <pubDate>Sun, 13 Nov 2016 23:16:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/13/golang-%E4%B8%AD%E7%AD%89%E5%BE%85goroutines-%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95/</guid>
      <description>方式一 使用 sync.WaitGroup package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math/rand&amp;quot; &amp;quot;strconv&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) func main() { workerNum := 10 var wg sync.WaitGroup wg.Add(workerNum) for i := 0;</description>
    </item>
    
    <item>
      <title>Golang中的select使用</title>
      <link>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84select%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 10 Nov 2016 19:31:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84select%E4%BD%BF%E7%94%A8/</guid>
      <description>package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; &amp;quot;sync&amp;quot; ) type resultData struct { Job int Result bool } func main() { n := 10 jobs := make(chan int, n) result :=</description>
    </item>
    
    <item>
      <title>Golang中的copy使用</title>
      <link>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84copy%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 10 Nov 2016 18:51:10 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84copy%E4%BD%BF%E7%94%A8/</guid>
      <description>注意 copy函数复制的元素个数=min(len(dest),</description>
    </item>
    
    <item>
      <title>Golang中接口常见用法</title>
      <link>https://emacsist.github.io/2016/11/06/golang%E4%B8%AD%E6%8E%A5%E5%8F%A3%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 06 Nov 2016 23:44:31 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/06/golang%E4%B8%AD%E6%8E%A5%E5%8F%A3%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</guid>
      <description>Talk is cheap, show me the code ^_^ package main import ( &amp;quot;fmt&amp;quot; ) // PrintString : test for interface type PrintString interface { String() string } // Person :</description>
    </item>
    
    <item>
      <title>Golang VS Java 在DSP系统对比</title>
      <link>https://emacsist.github.io/2016/11/02/golang-vs-java-%E5%9C%A8dsp%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Wed, 02 Nov 2016 14:28:25 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/02/golang-vs-java-%E5%9C%A8dsp%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94/</guid>
      <description>起因 最近一段时间在学Golang，突然间想着，将公司现在的D</description>
    </item>
    
    <item>
      <title>Golang的检查性能工具</title>
      <link>https://emacsist.github.io/2016/11/02/golang%E7%9A%84%E6%A3%80%E6%9F%A5%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 02 Nov 2016 12:45:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/02/golang%E7%9A%84%E6%A3%80%E6%9F%A5%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/</guid>
      <description>Go 自带的 pprof Web程序 只要添加如下代码即可： package main import ( _ &amp;quot;net/http/pprof&amp;quot; ) func main()</description>
    </item>
    
    <item>
      <title>Golang 中自定义 JSON 转换</title>
      <link>https://emacsist.github.io/2016/10/30/golang-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-json-%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 30 Oct 2016 21:55:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/30/golang-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-json-%E8%BD%AC%E6%8D%A2/</guid>
      <description>起因 Java 中的 Timestamp 转换为 JSON 是长整型，但在 Golang 中，却是完全不同。因为需</description>
    </item>
    
    <item>
      <title>Go学习</title>
      <link>https://emacsist.github.io/2016/10/18/go%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 18 Oct 2016 19:35:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/18/go%E5%AD%A6%E4%B9%A0/</guid>
      <description>安装多个版本的 go GVM Go依赖管理与 GOPATH 的关系. GOPATH环境变</description>
    </item>
    
  </channel>
</rss>