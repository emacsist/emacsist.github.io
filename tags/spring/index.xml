<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on emacsist</title>
    <link>https://emacsist.github.io/tags/spring/</link>
    <description>Recent content in spring on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Mar 2019 16:51:51 +0800</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>&lt;重新定义 SpringCloud 实战&gt;笔记</title>
      <link>https://emacsist.github.io/2019/03/13/%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89-springcloud-%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 13 Mar 2019 16:51:51 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/03/13/%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89-springcloud-%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</guid>
      <description>组件 github spring-cloud 组件 项目 分类 eureka spring-cloud-netflix 注册中心 zuul spring-cloud-netflix 第一代网关 sidecar spring-cloud-netflix 多语言 ribbon spring-cloud-netflix 负载均衡 hystrix spring-cloud-netflix 熔断器 turbine spring-cloud-netflix 集群监控器 feign spring-cloud-openfeign 声明式 http 客户端 consul spring-cloud-sonsul 注册中心 gateway spring-cloud-gateway 第二代网关 sleuth spring-cloud-sleuth</description>
    </item>
    
    <item>
      <title>Spring中XML与JavaBean相互转换</title>
      <link>https://emacsist.github.io/2018/11/09/spring%E4%B8%ADxml%E4%B8%8Ejavabean%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 09 Nov 2018 16:55:48 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/11/09/spring%E4%B8%ADxml%E4%B8%8Ejavabean%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</guid>
      <description>private static final ObjectMapper objectMapper = new XmlMapper(); public static &amp;lt;T&amp;gt; T xmlToObj(final String data, Class&amp;lt;T&amp;gt; clazz) { try { return objectMapper.readValue(data, clazz); } catch (Exception e) { log.error(&amp;quot;{}&amp;quot;, data); log.error(e.getMessage(), e); } return null; } public static String objToXML(final Object object) { try { return objectMapper.writeValueAsString(object); } catch (JsonProcessingException e) { log.error(e.getMessage(), e); } return &amp;quot;&amp;quot;; } //这个虽然是写着 JsonIgnoreProperties , 但</description>
    </item>
    
    <item>
      <title>SpringBoot自定义starter</title>
      <link>https://emacsist.github.io/2018/08/14/springboot%E8%87%AA%E5%AE%9A%E4%B9%89starter/</link>
      <pubDate>Tue, 14 Aug 2018 19:00:44 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/08/14/springboot%E8%87%AA%E5%AE%9A%E4%B9%89starter/</guid>
      <description>pom.xml &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.3.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-autoconfigure&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.25&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.code.gson&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;gson&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${guava.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;distributionManagement&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;uniweibo&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;uniweibo&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://10.0.0.40:8081/repository/uniweibo/&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/distributionManagement&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt; &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; 上面的,</description>
    </item>
    
    <item>
      <title>ThreadPoolExecutor中的异常捕获</title>
      <link>https://emacsist.github.io/2018/08/08/threadpoolexecutor%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</link>
      <pubDate>Wed, 08 Aug 2018 15:52:27 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/08/08/threadpoolexecutor%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</guid>
      <description>现象 线上服务日志发现有中断(即日志前面有打印, 但后面的日志没打印), 并且又没有异常信息输出. 原因 代码示例 private static final ThreadPoolTaskExecutor THREAD_POOL_TASK_EXECUTOR = new ThreadPoolTaskExecutor(); static { THREAD_POOL_TASK_EXECUTOR.setQueueCapacity(10000); THREAD_POOL_TASK_EXECUTOR.setDaemon(true); THREAD_POOL_TASK_EXECUTOR.setThreadNamePrefix(&amp;quot;global-%d&amp;quot;); THREAD_POOL_TASK_EXECUTOR.setRejectedExecutionHandler((r, executor) -&amp;gt; { L</description>
    </item>
    
    <item>
      <title>SpringBoot结合InfluxDB收集监控统计信息</title>
      <link>https://emacsist.github.io/2018/08/07/springboot%E7%BB%93%E5%90%88influxdb%E6%94%B6%E9%9B%86%E7%9B%91%E6%8E%A7%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Tue, 07 Aug 2018 15:37:42 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/08/07/springboot%E7%BB%93%E5%90%88influxdb%E6%94%B6%E9%9B%86%E7%9B%91%E6%8E%A7%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF/</guid>
      <description>pom.xml &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 统计信息输出到 influxdb --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.micrometer&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;micrometer-registry-influx&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; application.properties #### Spring Boot 监控 management.metrics.export.influx.enabled=true management.metrics.export.influx.auto-create-db=true management.metrics.export.influx.db=app_met</description>
    </item>
    
    <item>
      <title>SpringBoot结合MyBatis配置多数据源</title>
      <link>https://emacsist.github.io/2018/08/07/springboot%E7%BB%93%E5%90%88mybatis%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</link>
      <pubDate>Tue, 07 Aug 2018 15:15:49 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/08/07/springboot%E7%BB%93%E5%90%88mybatis%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</guid>
      <description>application.properties # mysql spring.datasource.jdbc-url=@config.jdbc.url@ spring.datasource.driver-class-name=com.mysql.jdbc.Driver spring.datasource.username=@config.jdbc.username@ spring.datasource.password=@config.jdbc.password@ # clickhouse ## clickhouse spring.clickhouse.jdbc-url=@config.clickhouse.url@ spring.clickhouse.driver-class-name=ru.yandex.clickhouse.ClickHouseDriver spring.clickhouse.username= spring.clickhouse.password= Java 代码配置 主 datasource package com.uniweibo.config; import org.apache.ibatis.session.SqlSessionFactory; import org.mybatis.spring.SqlSessionFactoryBean; import org.mybatis.spring.annotation.MapperScan; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.boot.jdbc.DataSourceBuilder; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Primary; import org.springframework.core.io.ClassPathResource; import javax.sql.DataSource; @Configuration @MapperScan(basePackages = {&amp;quot;com.uniweibo.dao.mapper&amp;quot;, &amp;quot;com.uniweibo.meitu.dao.mapper&amp;quot;, &amp;quot;com.uniweibo.xiaomi.dao.mapper&amp;quot;}, sqlSessionFactoryRef = &amp;quot;sqlSessionFactory&amp;quot; ) public class AppDataSourceConfig { /** 配置文件名, 放在 classpath</description>
    </item>
    
    <item>
      <title>从传统SpringMVC迁移到SpringBoot</title>
      <link>https://emacsist.github.io/2018/07/27/%E4%BB%8E%E4%BC%A0%E7%BB%9Fspringmvc%E8%BF%81%E7%A7%BB%E5%88%B0springboot/</link>
      <pubDate>Fri, 27 Jul 2018 16:57:33 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/07/27/%E4%BB%8E%E4%BC%A0%E7%BB%9Fspringmvc%E8%BF%81%E7%A7%BB%E5%88%B0springboot/</guid>
      <description>本文的迁移背景是: JDK7 + SpringMVC + 传统的 web.xml + 外部Tomcat 迁移到 JDK8 + SpringBoot2 + 嵌入式的Tomcat pom 注意事项 &amp;lt;build&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;**/*.*&amp;lt;/include&amp;gt; &amp;lt;!--&amp;lt;include&amp;gt;**/*.json&amp;lt;/include&amp;gt;--&amp;gt; &amp;lt;!--&amp;lt;include&amp;gt;**/*.properties&amp;lt;/include&amp;gt;--&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;**/*.*&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt; &amp;lt;/build&amp;gt; 改造 web.xml</description>
    </item>
    
    <item>
      <title>Guava与Spring集成时使用的注意事项</title>
      <link>https://emacsist.github.io/2018/04/08/guava%E4%B8%8Espring%E9%9B%86%E6%88%90%E6%97%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Sun, 08 Apr 2018 18:30:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/08/guava%E4%B8%8Espring%E9%9B%86%E6%88%90%E6%97%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>Bug 的起因 项目代码里, 利用了 Guava 缓存库作为本地缓存来使用, 但是构造时, 用了 Spring 注入的 properties . 示例代码如下: private static final Cache&amp;lt;Integer, Boolean&amp;gt; checkFlagCache = CacheBuilder.newBuilder().maximumSize(1000).expireAfterWrite(moneyNoCheckSec, TimeUnit.SECONDS).build(); 其中 moneyNoCheckSec 为 @Value(&amp;quot;${money.no.check.sec}&amp;quot;) private int moneyNoCheckSec; 因为这个 cache</description>
    </item>
    
    <item>
      <title>Spring 中 AOP 使用</title>
      <link>https://emacsist.github.io/2018/01/26/spring-%E4%B8%AD-aop-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 26 Jan 2018 16:30:12 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/26/spring-%E4%B8%AD-aop-%E4%BD%BF%E7%94%A8/</guid>
      <description>开启 @Configuration @EnableAspectJAutoProxy public class AppConfig { } 或xml中配置 &amp;lt;aop:aspectj-autoproxy/&amp;gt; 声明一个 Aspect @Aspect @Component public class NotVeryUsefulAspect { } 声明一个切点 @Pointcut(&amp;quot;execution(* transfer(..))&amp;quot;)// the pointcut expression private void anyOldTransfer() {}// the pointcut signature 支持的切点类型 execution within this target args @target @args @within @annotation 组合切点 @Pointcut(&amp;quot;execution(public * *(..))&amp;quot;)</description>
    </item>
    
    <item>
      <title>Spring框架中注解整理</title>
      <link>https://emacsist.github.io/2018/01/26/spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%B3%A8%E8%A7%A3%E6%95%B4%E7%90%86/</link>
      <pubDate>Fri, 26 Jan 2018 12:07:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/26/spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%B3%A8%E8%A7%A3%E6%95%B4%E7%90%86/</guid>
      <description>这里引用一下图片, 实在太赞了. 以下是自己的整理 下载PDF版</description>
    </item>
    
    <item>
      <title>Swagger2 &#43; SpringMVC 配置及使用</title>
      <link>https://emacsist.github.io/2018/01/25/swagger2-springmvc-%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 25 Jan 2018 14:08:01 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/25/swagger2-springmvc-%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>配置 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springfox-swagger-ui&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 注意, 是没有 @Configuration . 加了的话可能会报以下错误 NoSuchBeanDefinitionException: No qualifying bean of type [java.util.List] found for dependency [java.util.List&amp;lt;org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping&amp;gt; @EnableSwagger2 @Configuration @EnableWebMvc public class SwaggerConfig { @Bean public Docket api() { return new Docket(DocumentationType.SWAGGER_2) .select() .apis(RequestHandlerSelectors.any()) .paths(PathSelectors.any()) .build(); } } &amp;lt;mvc:annotation-driven/&amp;gt; &amp;lt;mvc:resources mapping=&amp;quot;swagger-ui.html&amp;quot; location=&amp;quot;classpath:/META-INF/resources/&amp;quot;/&amp;gt; &amp;lt;mvc:resources mapping=&amp;quot;/webjars/**&amp;quot;</description>
    </item>
    
    <item>
      <title>Spring IoC杂项</title>
      <link>https://emacsist.github.io/2018/01/24/spring-ioc%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Wed, 24 Jan 2018 15:15:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/24/spring-ioc%E6%9D%82%E9%A1%B9/</guid>
      <description>@Autowired 与 @Value , @Inject 这三个注解, 都是通过 AutowiredAnnotationBeanPostProcessor 类来处理的. 通过它的默认构造器可知 public AutowiredAnnotationBeanPostProcessor() { this.autowiredAnnotationTypes.add(Autowired.class); this.autowiredAnnotationTypes.add(Value.class); try { this.autowiredAnnotationTypes.add((Class&amp;lt;? extends Annotation&amp;gt;) ClassUtils.forName(&amp;quot;javax.inject.Inject&amp;quot;, AutowiredAnnotationBeanPostProcessor.class.getClassLoader())); logger.info(&amp;quot;JSR-330 &#39;javax.inject.Inject&#39; annotation found and supported for autowiring&amp;quot;); } catch (ClassNotFoundException ex) { // JSR-330 API not available - simply skip. } } 通过</description>
    </item>
    
    <item>
      <title>Spring中是如何为 @Value 注入的</title>
      <link>https://emacsist.github.io/2018/01/22/spring%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E4%B8%BA-value-%E6%B3%A8%E5%85%A5%E7%9A%84/</link>
      <pubDate>Mon, 22 Jan 2018 12:17:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/22/spring%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E4%B8%BA-value-%E6%B3%A8%E5%85%A5%E7%9A%84/</guid>
      <description>本文讨论的 Spring 版本为 4.3.13-RELEASE 加载 PropertySourcesPlaceholderConfigurer 这个是当前Spring环境的所有 properties 的抽象. 可以看到它在 postProcessBeanFactory 时开始初始化整个 properties 输入源 每个输入源, 都保存在 org.spr</description>
    </item>
    
    <item>
      <title>MyBatis中使用 like 及注意事项</title>
      <link>https://emacsist.github.io/2018/01/19/mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8-like-%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Fri, 19 Jan 2018 17:16:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/19/mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8-like-%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>常见错误用法 select * from tbl where title like &#39;%#{title}%&#39; 这种写法, 会报以下类似错: Error setting non null for parameter #5 with JdbcType null . Try setting a different JdbcType for this parameter or a different configuration property. Cause: java.sql.SQLException: Parameter index out of range (5 &amp;gt; number of parameters, which is 4). 正确用法</description>
    </item>
    
    <item>
      <title>Spring Data Redis 发布订阅</title>
      <link>https://emacsist.github.io/2018/01/17/spring-data-redis-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</link>
      <pubDate>Wed, 17 Jan 2018 17:32:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/17/spring-data-redis-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</guid>
      <description>因为线上项目因为 RabbitMQ 连接数过多(代码不良导致), 而导致 Redis 的 pub/sub 机制失效, 所以才有了这篇排查问题的文章. 记于 2018-1-17 事故日期: 2017-1-15 Spring Data Redis 中的 pub/sub @Bean RedisMessageListenerContainer container(RedisConnectionFactory connectionFactory, MessageListenerAdapter listenerAdapter)</description>
    </item>
    
    <item>
      <title>Spring中使用中间件服务注意事项</title>
      <link>https://emacsist.github.io/2018/01/15/spring%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9C%8D%E5%8A%A1%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 15 Jan 2018 14:47:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/15/spring%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9C%8D%E5%8A%A1%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>千万不要在Spring中手动来处理各种中间件的资源. 例如 redis connection 这些最好使用 Framework 自身带的连接池, 以及相应的模板类. 例如 RedisTemplate rabbitmq connection 以及 channel 最好使用 RabbitTemplate 原因 发</description>
    </item>
    
    <item>
      <title>Spring 的 RestTemplate 使用</title>
      <link>https://emacsist.github.io/2017/12/21/spring-%E7%9A%84-resttemplate-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 21 Dec 2017 12:25:12 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/21/spring-%E7%9A%84-resttemplate-%E4%BD%BF%E7%94%A8/</guid>
      <description>设置各种 timeout @Bean public RestTemplate restTemplate() { RestTemplate restTemplate = new RestTemplate(getClientHttpRequestFactory()); restTemplate.getMessageConverters().add(new FormHttpMessageConverter()); restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter()); log.info(&amp;quot;message converters {}&amp;quot;, restTemplate.getMessageConverters()); return restTemplate; } private ClientHttpRequestFactory getClientHttpRequestFactory() { int timeout = 5000; HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory(); clientHttpRequestFactory.setConnectTimeout(timeout); return clientHttpRequestFactory; } GET String body; if (value != null) { body = value.toString(); } else { body = restTemplate.getForObject(&amp;quot;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid={ID}&amp;amp;corpsecret={SECRECT}&amp;quot;, String.class, request.getCorpid(), request.getCorpsecret()); log.info(&amp;quot;send token http response {}&amp;quot;, body); }</description>
    </item>
    
    <item>
      <title>SpringMVC 的大概流程整理</title>
      <link>https://emacsist.github.io/2017/12/05/springmvc-%E7%9A%84%E5%A4%A7%E6%A6%82%E6%B5%81%E7%A8%8B%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 05 Dec 2017 16:44:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/05/springmvc-%E7%9A%84%E5%A4%A7%E6%A6%82%E6%B5%81%E7%A8%8B%E6%95%B4%E7%90%86/</guid>
      <description>入口: 从 Tomcat 到 SpringMVC 的 DispatcherServlet org.apache.catalina.core.StandardWrapperValve: 第一步: 获取 wrapper 容器 StandardWrapper wrapper = (StandardWrapper) getContainer(); 第二步: 根据容器 wrapper 获取相应的 servlet if (!unavailable) { servlet = wrapper.allocate(); } 第三步: 获取 filter 调用链 ApplicationFilterFactory 可以获取当前 Web 应用的所有 Filter</description>
    </item>
    
    <item>
      <title>SpringMVC 中 request.getInputStream() 为空解惑</title>
      <link>https://emacsist.github.io/2017/12/04/springmvc-%E4%B8%AD-request.getinputstream-%E4%B8%BA%E7%A9%BA%E8%A7%A3%E6%83%91/</link>
      <pubDate>Mon, 04 Dec 2017 17:31:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/04/springmvc-%E4%B8%AD-request.getinputstream-%E4%B8%BA%E7%A9%BA%E8%A7%A3%E6%83%91/</guid>
      <description>起缘 最近公司跟美图对接DSP系统, 我们公司使用的是Java语言的 Spring Boot 框架, 美图给的是一个 Google 的 proto 文件. 对接的时候, 我们在Spring的 Controller 里使用</description>
    </item>
    
    <item>
      <title>Spring Boot 多模块开发</title>
      <link>https://emacsist.github.io/2017/02/20/spring-boot-%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 20 Feb 2017 15:11:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/20/spring-boot-%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</guid>
      <description>本文假设项目名为 wxsdk，它有如下模块 wxsdk ├── bean ├── constant ├── dao ├── listener ├── service ├── utils ├── webapp ├── wx-plugin wxsdk 根目录下的 pom 文件如下 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;</description>
    </item>
    
    <item>
      <title>使用Spring session时 SessionListener 执行 2 次的分析</title>
      <link>https://emacsist.github.io/2017/02/14/%E4%BD%BF%E7%94%A8spring-session%E6%97%B6-sessionlistener-%E6%89%A7%E8%A1%8C-2-%E6%AC%A1%E7%9A%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 14 Feb 2017 16:56:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/14/%E4%BD%BF%E7%94%A8spring-session%E6%97%B6-sessionlistener-%E6%89%A7%E8%A1%8C-2-%E6%AC%A1%E7%9A%84%E5%88%86%E6%9E%90/</guid>
      <description>项目中使用 Spring-session 这个分布式 session 作为负载均衡的 session 中间件，以便统一 session 的管理。 然后我们自己添加了一个 HttpSessionListener, 但是发现它执行了 2 次，实在是太诡异了。（其实是太菜</description>
    </item>
    
    <item>
      <title>Spring Boot 中使用MyBatis</title>
      <link>https://emacsist.github.io/2016/09/28/spring-boot-%E4%B8%AD%E4%BD%BF%E7%94%A8mybatis/</link>
      <pubDate>Wed, 28 Sep 2016 16:42:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/28/spring-boot-%E4%B8%AD%E4%BD%BF%E7%94%A8mybatis/</guid>
      <description>pom.xml &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-dbcp&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-dbcp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;build&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;**/*.xml&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;filtering&amp;gt;false&amp;lt;/filtering&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;**/*.*&amp;lt;/include&amp;gt; &amp;lt;include&amp;gt;**/*&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; 注意上面的，如果你的mapper接口与xml文件是放在同一个目录下的</description>
    </item>
    
    <item>
      <title>SpringMVC单元测试controller</title>
      <link>https://emacsist.github.io/2016/07/21/springmvc%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95controller/</link>
      <pubDate>Thu, 21 Jul 2016 11:34:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/21/springmvc%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95controller/</guid>
      <description>import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpServletRequest; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.test.context.web.WebAppConfiguration; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.MvcResult; import org.springframework.test.web.servlet.setup.MockMvcBuilders; import org.springframework.web.context.WebApplicationContext; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*; /** * Created by sky on 16-7-20. */ @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration @ContextConfiguration(&amp;quot;classpath:spring-servlet.xml&amp;quot;) public class TestMVC { @Autowired WebApplicationContext wac; @Autowired MockHttpSession session; @Autowired MockHttpServletRequest request; private MockMvc mockMvc; @Before public void setup() { this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(); }</description>
    </item>
    
    <item>
      <title>使用SLF4J以及Spring中遇到的难以理解的问题</title>
      <link>https://emacsist.github.io/2016/06/20/%E4%BD%BF%E7%94%A8slf4j%E4%BB%A5%E5%8F%8Aspring%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E4%BB%A5%E7%90%86%E8%A7%A3%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 20 Jun 2016 11:10:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/20/%E4%BD%BF%E7%94%A8slf4j%E4%BB%A5%E5%8F%8Aspring%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E4%BB%A5%E7%90%86%E8%A7%A3%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>问题 问题1 Registering current configuration as safe fallback point 19:48:05,562 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration. 19:48:05,564 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@5f7db6c4 - Registering current configuration as safe fallback point 问题2 root of factory hierarchy SpringMVC启动时，就一直停留在这里 原因 以上这两个问题，</description>
    </item>
    
    <item>
      <title>Java中关于数组转换成List的注意事项</title>
      <link>https://emacsist.github.io/2016/02/14/java%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%88%90list%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Sun, 14 Feb 2016 15:25:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/14/java%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%88%90list%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>问题代码 package org.emacsist; import java.util.Arrays; import java.util.List; /** * Created by sky on 16-2-14. */ public class TestHello { public static void main(String[] args) { List&amp;lt;String&amp;gt; arg = Arrays.asList(args); arg.add(&amp;quot;出现问题了.&amp;quot;); System.out.println(arg); } } 一运行，就报如</description>
    </item>
    
    <item>
      <title>Spring Boot 学习之基本概念及使用</title>
      <link>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 14 Feb 2016 12:11:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>官方建议的代码目录 com +- example +- myproject +- Application.java | +- domain | +- Customer.java | +- CustomerRepository.java | +- service | +- CustomerService.java | +- web +- CustomerController.java Application.java 典型的代码 package com.example.myproject; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } @ComponentScan</description>
    </item>
    
    <item>
      <title>Spring Boot 学习之Hello World（一）</title>
      <link>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8Bhello-world%E4%B8%80/</link>
      <pubDate>Sun, 14 Feb 2016 11:17:50 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8Bhello-world%E4%B8%80/</guid>
      <description>POM 文件 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myproject&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.0.BUILD-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;!-- Additional lines to be added here... --&amp;gt; &amp;lt;!-- (you don&#39;t need this if you are using a .RELEASE version) --&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/snapshot&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt;&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/milestone&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;pluginRepositories&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/snapshot&amp;lt;/url&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/milestone&amp;lt;/url&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;/pluginRepositories&amp;gt; &amp;lt;/project&amp;gt; HelloWorldSpringBoot.java package org.emacsist; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</description>
    </item>
    
    <item>
      <title>Spring AOP 学习</title>
      <link>https://emacsist.github.io/2016/01/05/spring-aop-%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 05 Jan 2016 11:37:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/05/spring-aop-%E5%AD%A6%E4%B9%A0/</guid>
      <description>AOP 面向切面编程.百度百科里的定义是：在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期</description>
    </item>
    
    <item>
      <title>Spring 中文响应处理</title>
      <link>https://emacsist.github.io/2015/12/28/spring-%E4%B8%AD%E6%96%87%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 28 Dec 2015 14:19:18 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/28/spring-%E4%B8%AD%E6%96%87%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86/</guid>
      <description>为什么 CharacterEncodingFilter 没有生效 &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;CharacterEncodingFilter&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;utf-8&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;forceEncoding&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;filter-mapping&amp;gt; &amp;lt;filter-name&amp;gt;CharacterEncodingFilter&amp;lt;/filter-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/filter-mapping&amp;gt; 这个配置， 只有在 Controller 里，调用 HttpServletResponse 直接写数据时才会生效的 .如果是直接利用HttpServletRe</description>
    </item>
    
    <item>
      <title>Spring中添加@ControllerAdvice增强Controller</title>
      <link>https://emacsist.github.io/2015/12/28/spring%E4%B8%AD%E6%B7%BB%E5%8A%A0controlleradvice%E5%A2%9E%E5%BC%BAcontroller/</link>
      <pubDate>Mon, 28 Dec 2015 12:37:16 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/28/spring%E4%B8%AD%E6%B7%BB%E5%8A%A0controlleradvice%E5%A2%9E%E5%BC%BAcontroller/</guid>
      <description>@ControllerAdvice 注解，会应用到所有的Controller中的@RequestMapping注解的方法中. 配置 要注意，经自己测试，这个注解的类，要被 org.</description>
    </item>
    
    <item>
      <title>彻底了解Spring-中-RabbitMQ配置的concurrency-和-task-executor（异步)</title>
      <link>https://emacsist.github.io/2015/12/18/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor%E5%BC%82%E6%AD%A5/</link>
      <pubDate>Fri, 18 Dec 2015 14:05:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/18/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor%E5%BC%82%E6%AD%A5/</guid>
      <description>上一篇只是说了同步彻底了解Spring 中 RabbitMQ配置的concurrency 和 task-executor. 现在来了解异步的情况.（感谢同事聪哥的指引) 如果li</description>
    </item>
    
    <item>
      <title>彻底了解Spring 中 RabbitMQ配置的concurrency 和 task-executor</title>
      <link>https://emacsist.github.io/2015/12/17/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor/</link>
      <pubDate>Thu, 17 Dec 2015 12:12:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/17/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor/</guid>
      <description>问题 在生产环境中，突然发现有个Tomcat报如下类似错误: Caused by: org.springframework.amqp.UncategorizedAmqpException: java.util.concurrent.TimeoutException: Timed out waiting for startup at org.springframework.amqp.rabbit.connection.RabbitUtils.convertRabbitAccessException(RabbitUtils.java:118) at org.springframework.amqp.rabbit.connection.RabbitAccessor.convertRabbitAccessException(RabbitAccessor.java:106) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:365) at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:167) ... 59 common frames omitted Caused by: java.util.concurrent.TimeoutException: Timed out waiting for startup at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.getStartupException(SimpleMessageListenerContainer.java:512) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doStart(SimpleMessageListenerContainer.java:337) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:363) ... 60 common frames omitted</description>
    </item>
    
    <item>
      <title>OkHttp 中注意事项</title>
      <link>https://emacsist.github.io/2015/12/15/okhttp-%E4%B8%AD%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Tue, 15 Dec 2015 10:44:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/15/okhttp-%E4%B8%AD%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>问题 在生产环境中，突然发现RabbitMQ中的某条队列的数据没有被消费掉，而是一直停留在那里，并到好几个小时了，消息一直在Unacknowl</description>
    </item>
    
    <item>
      <title>Spring 与 RabbitMQ 结合配置以及注意事项</title>
      <link>https://emacsist.github.io/2015/12/14/spring-%E4%B8%8E-rabbitmq-%E7%BB%93%E5%90%88%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 14 Dec 2015 18:27:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/14/spring-%E4%B8%8E-rabbitmq-%E7%BB%93%E5%90%88%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>主要是listener-container配置 &amp;lt;rabbit:listener-container connection-factory=&amp;quot;rabbitConnectionFactory&amp;quot; error-handler=&amp;quot;MessageErrorHandler&amp;quot; task-executor=&amp;quot;myExecutor&amp;quot; concurrency=&amp;quot;10&amp;quot;&amp;gt; &amp;lt;/rabbit:listener-container&amp;gt; 属性说明 task-executor 这个属性表示，在执行listener时，使用的线程行为。默认为Simpl</description>
    </item>
    
    <item>
      <title>Spring 中的 @Async 和 @Scheduled 理解</title>
      <link>https://emacsist.github.io/2015/12/04/spring-%E4%B8%AD%E7%9A%84-async-%E5%92%8C-scheduled-%E7%90%86%E8%A7%A3/</link>
      <pubDate>Fri, 04 Dec 2015 11:00:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/04/spring-%E4%B8%AD%E7%9A%84-async-%E5%92%8C-scheduled-%E7%90%86%E8%A7%A3/</guid>
      <description>@Async spring-test.xml文件 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xmlns:task=&amp;quot;http://www.springframework.org/schema/task&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd&amp;quot;&amp;gt; &amp;lt;task:annotation-driven scheduler=&amp;quot;myScheduler&amp;quot; executor=&amp;quot;myExecutor&amp;quot;/&amp;gt; &amp;lt;task:executor id=&amp;quot;myExecutor&amp;quot; pool-size=&amp;quot;20&amp;quot;/&amp;gt; &amp;lt;task:scheduler id=&amp;quot;myScheduler&amp;quot; pool-size=&amp;quot;5&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;hello&amp;quot; class=&amp;quot;hello.world.task.TestTask&amp;quot; /&amp;gt; &amp;lt;/beans&amp;gt; spring官网例子 import java.util.concurrent.Future; import org.springframework.scheduling.annotation.Async; import org.springframework.scheduling.annotation.AsyncResult; import org.springframework.stereotype.Service; import org.springframework.web.client.RestTemplate; @Service public class GitHubLookupService</description>
    </item>
    
    <item>
      <title>Spring Rabbit使用</title>
      <link>https://emacsist.github.io/2015/11/30/spring-rabbit%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 30 Nov 2015 18:36:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/30/spring-rabbit%E4%BD%BF%E7%94%A8/</guid>
      <description>Demo &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xmlns:task=&amp;quot;http://www.springframework.org/schema/task&amp;quot; xmlns:aop=&amp;quot;http://www.springframework.org/schema/aop&amp;quot; xmlns:rabbit=&amp;quot;http://www.springframework.org/schema/rabbit&amp;quot; xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot; xmlns:mvc=&amp;quot;http://www.springframework.org/schema/mvc&amp;quot; xsi:schemaLocation=&amp;quot; http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.1.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&amp;quot;&amp;gt; &amp;lt;bean id=&amp;quot;rabbitConnectionFactory&amp;quot; class=&amp;quot;org.springframework.amqp.rabbit.connection.CachingConnectionFactory&amp;quot;&amp;gt; &amp;lt;constructor-arg value=&amp;quot;10.0.0.11&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;guest&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;guest&amp;quot;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;quot;converter&amp;quot; class=&amp;quot;org.springframework.amqp.support.converter.JsonMessageConverter&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;defaultCharset&amp;quot; value=&amp;quot;UTF-8&amp;quot;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;rabbit:template id=&amp;quot;rabbitTemplate&amp;quot; connection-factory=&amp;quot;rabbitConnectionFactory&amp;quot; message-converter=&amp;quot;converter&amp;quot; /&amp;gt; &amp;lt;rabbit:admin connection-factory=&amp;quot;rabbitConnectionFactory&amp;quot;/&amp;gt; &amp;lt;rabbit:queue name=&amp;quot;ttt.ttt.tt.tt&amp;quot;/&amp;gt; &amp;lt;/beans&amp;gt; Java文件 package yourcompany; import com.yourcompany.pojo.ParamsPojo; import org.junit.Test;</description>
    </item>
    
    <item>
      <title>Spring Task 中集群带来的问题</title>
      <link>https://emacsist.github.io/2015/11/27/spring-task-%E4%B8%AD%E9%9B%86%E7%BE%A4%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 27 Nov 2015 10:59:11 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/27/spring-task-%E4%B8%AD%E9%9B%86%E7%BE%A4%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>问题 当多台Tomcat同时进行调度时，如果没有处理好并发的问题，就会出现本应只是执行一次的Task，执行了两次（比如修改DB）。 DB解决办法</description>
    </item>
    
    <item>
      <title>Spring里的Executor使用</title>
      <link>https://emacsist.github.io/2015/11/26/spring%E9%87%8C%E7%9A%84executor%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 26 Nov 2015 12:02:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/26/spring%E9%87%8C%E7%9A%84executor%E4%BD%BF%E7%94%A8/</guid>
      <description>在生产环境中，发现我们Tomcat的应用导致超高的CPU（170%)及负载(90+)[Intel&amp;reg; Xeon&amp;reg; CPU E31230 @ 3.20GHz 四核心，8线程]. 原因 经</description>
    </item>
    
    <item>
      <title>Spring Redis 使用</title>
      <link>https://emacsist.github.io/2015/11/23/spring-redis-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 23 Nov 2015 18:28:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/spring-redis-%E4%BD%BF%E7%94%A8/</guid>
      <description>Pipelining 共享一条connection，以减少因为网络连接导致的性能问题: List&amp;lt;Object&amp;gt; results = stringRedisTemplate.executePipelined( new RedisCallback&amp;lt;Object&amp;gt;() { public Object doInRedis(RedisConnection connection) throws DataAccessException { StringRedisConnection stringRedisConn = (StringRedisConnection)connection; for(int i=0; i&amp;lt; batchSize; i++) { stringRedisConn.rPop(&amp;quot;myqueue&amp;quot;); } return null; } }); transaction redis中</description>
    </item>
    
    <item>
      <title>Spring MVC 里加载两次Bean的解决办法</title>
      <link>https://emacsist.github.io/2015/11/23/spring-mvc-%E9%87%8C%E5%8A%A0%E8%BD%BD%E4%B8%A4%E6%AC%A1bean%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Mon, 23 Nov 2015 11:31:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/spring-mvc-%E9%87%8C%E5%8A%A0%E8%BD%BD%E4%B8%A4%E6%AC%A1bean%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>SpringMVC 里上下文的概念 web.xml 里的配置 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; version=&amp;quot;2.5&amp;quot;&amp;gt; &amp;lt;display-name&amp;gt;uniweibov2&amp;lt;/display-name&amp;gt; &amp;lt;listener&amp;gt; &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt; &amp;lt;/listener&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath:spring.xml&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;mvc-dispatcher&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath:spring-servlet.xml&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;mvc-dispatcher&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;/web-app&amp;gt; 在SpringMVC里，有两种上下文。一种是：App</description>
    </item>
    
    <item>
      <title>Spring session 添加HttpSessionListener</title>
      <link>https://emacsist.github.io/2015/11/23/spring-session-%E6%B7%BB%E5%8A%A0httpsessionlistener/</link>
      <pubDate>Mon, 23 Nov 2015 10:44:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/spring-session-%E6%B7%BB%E5%8A%A0httpsessionlistener/</guid>
      <description>这时介绍的版本，是基于以下版本: &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.session&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-session&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.0.M1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 先上示例demo &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd&amp;quot;&amp;gt; &amp;lt;context:annotation-config /&amp;gt; &amp;lt;bean id=&amp;quot;v2redisConnectionFactory&amp;quot; class=&amp;quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&amp;quot; p:host-name=&amp;quot;${config.redis.host}&amp;quot; p:port=&amp;quot;${redis.port}&amp;quot; p:use-pool=&amp;quot;true&amp;quot; p:database=&amp;quot;${redis.database}&amp;quot; p:password=&amp;quot;${config.redis.password}&amp;quot; /&amp;gt; &amp;lt;bean id=&amp;quot;stringRedisSerializer&amp;quot; class=&amp;quot;org.springframework.data.redis.serializer.StringRedisSerializer&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;genericToStringSerializer&amp;quot; class=&amp;quot;org.springframework.data.redis.serializer.GenericToStringSerializer&amp;quot;&amp;gt; &amp;lt;constructor-arg type=&amp;quot;java.lang.Class&amp;quot; value=&amp;quot;java.lang.Object&amp;quot;&amp;gt;&amp;lt;/constructor-arg&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;quot;object&amp;quot; class=&amp;quot;java.lang.Object&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;v2redisTemplate&amp;quot; class=&amp;quot;org.springframework.data.redis.core.RedisTemplate&amp;quot; p:connection-factory-ref=&amp;quot;v2redisConnectionFactory&amp;quot; p:keySerializer-ref=&amp;quot;stringRedisSerializer&amp;quot;</description>
    </item>
    
    <item>
      <title>Spring Task 使用</title>
      <link>https://emacsist.github.io/2015/11/10/spring-task-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 10 Nov 2015 16:45:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/10/spring-task-%E4%BD%BF%E7%94%A8/</guid>
      <description>使用 &amp;lt;bean id=&amp;quot;updateRsstask&amp;quot; class=&amp;quot;xxxx.xxx.xx&amp;quot; /&amp;gt; &amp;lt;task:executor id=&amp;quot;myexecutor&amp;quot; pool-size=&amp;quot;10&amp;quot; /&amp;gt; &amp;lt;task:scheduler id=&amp;quot;myscheduler&amp;quot; pool-size=&amp;quot;10&amp;quot; /&amp;gt; &amp;lt;task:scheduled-tasks scheduler=&amp;quot;myscheduler&amp;quot;&amp;gt; &amp;lt;!-- 每隔一个小时更新rss --&amp;gt; &amp;lt;task:scheduled ref=&amp;quot;updateRssTask&amp;quot; method=&amp;quot;execute&amp;quot; cron=&amp;quot;0 0 * * * *&amp;quot; /&amp;gt; &amp;lt;/task:scheduled-tasks&amp;gt; 注意事项 &amp;lt;task:schedule-tasks scheduler=&amp;quot;myscheduler&amp;quot;&amp;gt; 这里的scheduler必须显式指定，否则它只会</description>
    </item>
    
    <item>
      <title>关于Java应用启动时报 could not find the document 错误的问题及解决</title>
      <link>https://emacsist.github.io/2015/07/30/%E5%85%B3%E4%BA%8Ejava%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5-could-not-find-the-document-%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Thu, 30 Jul 2015 14:56:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/30/%E5%85%B3%E4%BA%8Ejava%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5-could-not-find-the-document-%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</guid>
      <description>这两天发现到一个很奇怪的问题，就是应用有时候在启动的时候，会报 o.s.b.f.x.XmlBeanDefinitionReader.warning[2015-07-30 14:19:05] : Ignored XML validation warningorg.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document &#39;http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd&#39;, because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not &amp;lt;xsd:schema&amp;gt;. at</description>
    </item>
    
    <item>
      <title>Java Web 项目包建议设计</title>
      <link>https://emacsist.github.io/2015/07/21/java-web-%E9%A1%B9%E7%9B%AE%E5%8C%85%E5%BB%BA%E8%AE%AE%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 21 Jul 2015 17:51:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/21/java-web-%E9%A1%B9%E7%9B%AE%E5%8C%85%E5%BB%BA%E8%AE%AE%E8%AE%BE%E8%AE%A1/</guid>
      <description>以下这些都只是从工作中，思考出来的，只是在下自己的拙见。一个好的包设计， 可以让项目更加清晰具体。 com.company.dao.pojo 这里存放的是与数据库对应的表的POJO com.company.dao 这</description>
    </item>
    
    <item>
      <title>Spring中的事务回滚</title>
      <link>https://emacsist.github.io/2015/07/16/spring%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A/</link>
      <pubDate>Thu, 16 Jul 2015 15:25:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/16/spring%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A/</guid>
      <description>开启声明式事务 spring.xml里配置 &amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;org.apache.commons.dbcp.BasicDataSource&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;${jdbc.driverClassName}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${jdbc.url}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${jdbc.username}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${jdbc.password}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;maxActive&amp;quot;&amp;gt; &amp;lt;value&amp;gt;64&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;maxIdle&amp;quot;&amp;gt; &amp;lt;value&amp;gt;64&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;maxWait&amp;quot;&amp;gt; &amp;lt;value&amp;gt;0&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;validationQuery&amp;quot;&amp;gt; &amp;lt;value&amp;gt;select 1&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;testWhileIdle&amp;quot;&amp;gt; &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;minEvictableIdleTimeMillis&amp;quot;&amp;gt; &amp;lt;value&amp;gt;20000000&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;timeBetweenEvictionRunsMillis&amp;quot;&amp;gt; &amp;lt;value&amp;gt;3600000&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean</description>
    </item>
    
    <item>
      <title>Spring单元测试</title>
      <link>https://emacsist.github.io/2015/07/14/spring%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Tue, 14 Jul 2015 16:12:03 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/14/spring%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>资源文件 将所有的资源文件, 放到测试包及测试资源下(如果没有的话).以免麻烦, 统一放到 classpath 下. # 这放测试代码文件 src/test/java # 这放测试资源文件 src/test/resource 进行单元测</description>
    </item>
    
  </channel>
</rss>