<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on emacsist</title>
    <link>https://emacsist.github.io/tags/golang/</link>
    <description>Recent content in golang on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Apr 2018 11:26:04 +0000</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 中HTTP请求头 Accept-Encoding 注意事项</title>
      <link>https://emacsist.github.io/2018/04/04/golang-%E4%B8%ADhttp%E8%AF%B7%E6%B1%82%E5%A4%B4-accept-encoding-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Wed, 04 Apr 2018 11:26:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/04/golang-%E4%B8%ADhttp%E8%AF%B7%E6%B1%82%E5%A4%B4-accept-encoding-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>平时自己写了个抓取网页内容分析的小工具, 通过 Chrome 的 copy as curl 功能复</description>
    </item>
    
    <item>
      <title>Go 的 项目依赖管理工具 dep 学习</title>
      <link>https://emacsist.github.io/2018/03/26/go-%E7%9A%84-%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-dep-%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 26 Mar 2018 16:21:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/03/26/go-%E7%9A%84-%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-dep-%E5%AD%A6%E4%B9%A0/</guid>
      <description>安装 curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh 或 mac: brew install dep brew upgrade dep 使用 参考: Go 的标准项目目录结构示</description>
    </item>
    
    <item>
      <title>Golang中关于逃逸分析以及变量与堆栈的分配问题</title>
      <link>https://emacsist.github.io/2017/06/18/golang%E4%B8%AD%E5%85%B3%E4%BA%8E%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%A0%86%E6%A0%88%E7%9A%84%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 18 Jun 2017 12:30:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/18/golang%E4%B8%AD%E5%85%B3%E4%BA%8E%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%A0%86%E6%A0%88%E7%9A%84%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/</guid>
      <description>变量是如何分配 今天看到 《Go程序设计语言&amp;ndash; 艾伦 A.</description>
    </item>
    
    <item>
      <title>DSP系统中JSON解析性能对比Java 与 Golang</title>
      <link>https://emacsist.github.io/2017/06/12/dsp%E7%B3%BB%E7%BB%9F%E4%B8%ADjson%E8%A7%A3%E6%9E%90%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94java-%E4%B8%8E-golang/</link>
      <pubDate>Mon, 12 Jun 2017 16:21:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/12/dsp%E7%B3%BB%E7%BB%9F%E4%B8%ADjson%E8%A7%A3%E6%9E%90%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94java-%E4%B8%8E-golang/</guid>
      <description>Java中的性能 测试代码: ```bash package com.company.benchmark; import com.fasterxml.jackson.databind.JsonNode; import com.company.util.JsonUtil; import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder;</description>
    </item>
    
    <item>
      <title>Golang优化DSP系统一例</title>
      <link>https://emacsist.github.io/2017/06/08/golang%E4%BC%98%E5%8C%96dsp%E7%B3%BB%E7%BB%9F%E4%B8%80%E4%BE%8B/</link>
      <pubDate>Thu, 08 Jun 2017 10:51:25 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/08/golang%E4%BC%98%E5%8C%96dsp%E7%B3%BB%E7%BB%9F%E4%B8%80%E4%BE%8B/</guid>
      <description>JSON 解析 更新：2017-6-12 ！！这里有问题，参考下文 因为是</description>
    </item>
    
    <item>
      <title>Golang 汇编杂项</title>
      <link>https://emacsist.github.io/2017/06/02/golang-%E6%B1%87%E7%BC%96%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Fri, 02 Jun 2017 18:08:31 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/02/golang-%E6%B1%87%E7%BC%96%E6%9D%82%E9%A1%B9/</guid>
      <description>查看Go源码输出的汇编代码 go tool compile -S hello.go 或 go tool objdump -s &amp;#34;main\.main&amp;#34; hello 或 go tool compile -N</description>
    </item>
    
    <item>
      <title>Golang中遇到的[坑]</title>
      <link>https://emacsist.github.io/2017/05/21/golang%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</link>
      <pubDate>Sun, 21 May 2017 12:36:58 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/21/golang%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</guid>
      <description>匿名函数 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { for i := 0; i &amp;lt; 10; i++ { go show(i) } for i := 0;</description>
    </item>
    
    <item>
      <title>Golang 中的接口类型与指针</title>
      <link>https://emacsist.github.io/2016/11/24/golang-%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%8C%87%E9%92%88/</link>
      <pubDate>Thu, 24 Nov 2016 11:51:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/24/golang-%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%8C%87%E9%92%88/</guid>
      <description>这是在Google Golang的Nuts上看到的 golang-nuts 当作为in</description>
    </item>
    
    <item>
      <title>Golang 归并排序MergeSort</title>
      <link>https://emacsist.github.io/2016/11/22/golang-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmergesort/</link>
      <pubDate>Tue, 22 Nov 2016 19:10:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/22/golang-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmergesort/</guid>
      <description>思路 将一排数据，进行左右不断地进行划分（递[归]），然后再对</description>
    </item>
    
    <item>
      <title>Golang 快速排序</title>
      <link>https://emacsist.github.io/2016/11/21/golang-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 21 Nov 2016 23:54:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/21/golang-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>思路 data = [3 2 6 1 2 7] middle = 3 ? 2 6 1 2 7 //第一轮: // data[i] = 2 //</description>
    </item>
    
    <item>
      <title>Golang 希尔排序 VS 插入排序</title>
      <link>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F-vs-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 20 Nov 2016 23:02:52 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F-vs-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>希尔排序 VS 插入排序 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;helper/number&amp;#34; &amp;#34;helper/time&amp;#34; ) func main() { data := number.GenerateInt(100000, 1000) dataCopy := make([]int, len(data)) copy(dataCopy, data)</description>
    </item>
    
    <item>
      <title>Golang 希尔排序</title>
      <link>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 20 Nov 2016 22:40:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/20/golang-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</guid>
      <description>希尔排序 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;helper/number&amp;#34; &amp;#34;helper/time&amp;#34; ) func main() { data := number.GenerateInt(100000, 100) start := time.CurrentMillis() shellSort(data) fmt.Printf(&amp;#34;cost %v ms\n&amp;#34;, time.CurrentMillis()-start) } func shellSort(data</description>
    </item>
    
    <item>
      <title>Golang 插入排序</title>
      <link>https://emacsist.github.io/2016/11/18/golang-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 18 Nov 2016 15:47:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/18/golang-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>插入排序 &amp;ndash; 初版 这个版本的思想是：先找出要交换的两个位置的 index ，</description>
    </item>
    
    <item>
      <title>Golang 堆排序与选择排序</title>
      <link>https://emacsist.github.io/2016/11/17/golang-%E5%A0%86%E6%8E%92%E5%BA%8F%E4%B8%8E%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 17 Nov 2016 19:12:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/17/golang-%E5%A0%86%E6%8E%92%E5%BA%8F%E4%B8%8E%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>选择排序 select.go，这里以选择最小的为例子 package main import &amp;#34;fmt&amp;#34; import</description>
    </item>
    
    <item>
      <title>Golang 中等待Goroutines 执行完毕</title>
      <link>https://emacsist.github.io/2016/11/13/golang-%E4%B8%AD%E7%AD%89%E5%BE%85goroutines-%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95/</link>
      <pubDate>Sun, 13 Nov 2016 23:16:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/13/golang-%E4%B8%AD%E7%AD%89%E5%BE%85goroutines-%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95/</guid>
      <description>方式一 使用 sync.WaitGroup package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) func main() { workerNum := 10 var wg sync.WaitGroup wg.Add(workerNum) for i := 0;</description>
    </item>
    
    <item>
      <title>Golang中的select使用</title>
      <link>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84select%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 10 Nov 2016 19:31:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84select%E4%BD%BF%E7%94%A8/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; &amp;#34;sync&amp;#34; ) type resultData struct { Job int Result bool } func main() { n := 10 jobs := make(chan int, n) result :=</description>
    </item>
    
    <item>
      <title>Golang中的copy使用</title>
      <link>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84copy%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 10 Nov 2016 18:51:10 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/10/golang%E4%B8%AD%E7%9A%84copy%E4%BD%BF%E7%94%A8/</guid>
      <description>注意 copy函数复制的元素个数=min(len(dest),</description>
    </item>
    
    <item>
      <title>Golang中接口常见用法</title>
      <link>https://emacsist.github.io/2016/11/06/golang%E4%B8%AD%E6%8E%A5%E5%8F%A3%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 06 Nov 2016 23:44:31 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/06/golang%E4%B8%AD%E6%8E%A5%E5%8F%A3%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</guid>
      <description>Talk is cheap, show me the code ^_^ package main import ( &amp;#34;fmt&amp;#34; ) // PrintString : test for interface type PrintString interface { String() string } // Person :</description>
    </item>
    
    <item>
      <title>Golang VS Java 在DSP系统对比</title>
      <link>https://emacsist.github.io/2016/11/02/golang-vs-java-%E5%9C%A8dsp%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Wed, 02 Nov 2016 14:28:25 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/02/golang-vs-java-%E5%9C%A8dsp%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94/</guid>
      <description>起因 最近一段时间在学Golang，突然间想着，将公司现在的D</description>
    </item>
    
    <item>
      <title>Golang的检查性能工具</title>
      <link>https://emacsist.github.io/2016/11/02/golang%E7%9A%84%E6%A3%80%E6%9F%A5%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 02 Nov 2016 12:45:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/02/golang%E7%9A%84%E6%A3%80%E6%9F%A5%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/</guid>
      <description>Go 自带的 pprof Web程序 只要添加如下代码即可： package main import ( _ &amp;#34;net/http/pprof&amp;#34; ) func main()</description>
    </item>
    
    <item>
      <title>Golang 中自定义 JSON 转换</title>
      <link>https://emacsist.github.io/2016/10/30/golang-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-json-%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 30 Oct 2016 21:55:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/30/golang-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-json-%E8%BD%AC%E6%8D%A2/</guid>
      <description>起因 Java 中的 Timestamp 转换为 JSON 是长整型，但在 Golang 中，却是完全不同。因为需</description>
    </item>
    
    <item>
      <title>Go学习</title>
      <link>https://emacsist.github.io/2016/10/18/go%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 18 Oct 2016 19:35:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/18/go%E5%AD%A6%E4%B9%A0/</guid>
      <description>安装多个版本的 go GVM Go依赖管理与 GOPATH 的关系. GOPATH环境变</description>
    </item>
    
  </channel>
</rss>