<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>json on emacsist</title>
    <link>https://emacsist.github.io/tags/json/</link>
    <description>Recent content in json on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 28 Apr 2018 10:58:11 +0800</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jackson序列化没有get, Set方法的POJO</title>
      <link>https://emacsist.github.io/2018/04/28/jackson%E5%BA%8F%E5%88%97%E5%8C%96%E6%B2%A1%E6%9C%89get-set%E6%96%B9%E6%B3%95%E7%9A%84pojo/</link>
      <pubDate>Sat, 28 Apr 2018 10:58:11 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/28/jackson%E5%BA%8F%E5%88%97%E5%8C%96%E6%B2%A1%E6%9C%89get-set%E6%96%B9%E6%B3%95%E7%9A%84pojo/</guid>
      <description>异常 重现代码 @Test public void testObjectMapper() throws JsonProcessingException { ObjectMapper objectMapper = new ObjectMapper(); Man man = new Man(); System.out.println(objectMapper.writeValueAsString(man)); } public static class Man { private int age; private String name; } 当 Jackson 遇到没有 getter, setter 方法的 POJO 时, 会抛出这个异常: com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class JUnitTest$Man and no properties discovered</description>
    </item>
    
    <item>
      <title>[翻译]Jackson 的性能描述</title>
      <link>https://emacsist.github.io/2018/03/19/%E7%BF%BB%E8%AF%91jackson-%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%8F%E8%BF%B0/</link>
      <pubDate>Mon, 19 Mar 2018 14:16:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/03/19/%E7%BF%BB%E8%AF%91jackson-%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%8F%E8%BF%B0/</guid>
      <description>原文 项目中要测一下 jackson vs gson 的性能对比, 所以就查找了下 jackson 的性能方面的资料.发现官方文档就有很好的介绍了.特此翻译, 以备下次再查用. Jackson 的涡轮增压 尽</description>
    </item>
    
    <item>
      <title>DSP系统中JSON解析性能对比Java 与 Golang</title>
      <link>https://emacsist.github.io/2017/06/12/dsp%E7%B3%BB%E7%BB%9F%E4%B8%ADjson%E8%A7%A3%E6%9E%90%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94java-%E4%B8%8E-golang/</link>
      <pubDate>Mon, 12 Jun 2017 16:21:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/12/dsp%E7%B3%BB%E7%BB%9F%E4%B8%ADjson%E8%A7%A3%E6%9E%90%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94java-%E4%B8%8E-golang/</guid>
      <description>Java中的性能 测试代码: bash package com.company.benchmark; import com.fasterxml.jackson.databind.JsonNode; import com.company.util.JsonUtil; import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder; import java.util.concurrent.TimeUnit; /** * Created by emacsist on 2017/6/12. */ @BenchmarkMode(Mode.SingleShotTime) @OutputTimeUnit(TimeUnit.NANOSECONDS) @State(Scope.Thread) public class BenchmarkJSON { @Benchmark public void testJSON(){ String json = &amp;ldquo;{\&amp;ldquo;id\&amp;rdquo;:\&amp;ldquo;1\&amp;ldquo;,\&amp;ldquo;user\&amp;rdquo;:{\&amp;ldquo;id\&amp;rdquo;:\&amp;ldquo;426b466fe00e698a2b718079afff962f\&amp;ldquo;},\&amp;ldquo;rule\&amp;rdquo;:[\&amp;ldquo;50284\&amp;ldquo;,\&amp;ldquo;56415\&amp;ldquo;,\&amp;ldquo;56416\&amp;ldquo;,\&amp;ldquo;56417\&amp;ldquo;,\&amp;ldquo;56418\&amp;ldquo;,\&amp;ldquo;56419\&amp;ldquo;,\&amp;ldquo;56420\&amp;ldquo;,\&amp;ldquo;56421\&amp;ldquo;,\&amp;ldquo;56422\&amp;ldquo;,\&amp;ldquo;56423\&amp;ldquo;,\&amp;ldquo;57034\&amp;ldquo;,\&amp;ldquo;57036\&amp;ldquo;,\&amp;ldquo;9078\&amp;ldquo;],\&amp;ldquo;imp\&amp;rdquo;:[{\&amp;ldquo;bidfloor\&amp;rdquo;:800,\&amp;ldquo;ext\&amp;rdquo;:{\&amp;ldquo;repeat\&amp;rdquo;:1},\&amp;ldquo;feed\&amp;rdquo;:{\&amp;ldquo;type\&amp;rdquo;:0},\&amp;ldquo;id\&amp;rdquo;:\&amp;ldquo;25263317556521\&amp;ldquo;,\&amp;ldquo;bidfloorcur\&amp;rdquo;:\&amp;ldquo;RMB\&amp;ldquo;,\&amp;ldquo;tagid\&amp;rdquo;:\&amp;ldquo;1000000002\&amp;ldquo;},{\&amp;ldquo;bidfloor\&amp;rdquo;:100000,\&amp;ldquo;ext\&amp;rdquo;:{\&amp;ldquo;repeat\&amp;rdquo;:1},\&amp;ldquo;feed\&amp;rdquo;:{\&amp;ldquo;type\&amp;rdquo;:0},\&amp;ldquo;id\&amp;rdquo;:\&amp;ldquo;25263317556522\&amp;ldquo;,\&amp;ldquo;bidfloorcur\&amp;rdquo;:\&amp;ldquo;RMB\&amp;ldquo;,\&amp;ldquo;tagid\&amp;rdquo;:\&amp;ldquo;1000000002\&amp;ldquo;}],\&amp;ldquo;app\&amp;rdquo;:{\&amp;ldquo;name\&amp;rdquo;:\&amp;ldquo;weibo\&amp;ldquo;,\&amp;ldquo;id\&amp;rdquo;:\&amp;ldquo;iamappidinwax\&amp;ldquo;},\&amp;ldquo;device\&amp;rdquo;:{\&amp;ldquo;geo\&amp;rdquo;:{},\&amp;ldquo;carrier\&amp;rdquo;:\&amp;rdquo;\&amp;ldquo;,\&amp;ldquo;model\&amp;rdquo;:\&amp;ldquo;OPPO_OPPO A37t\&amp;ldquo;,\&amp;ldquo;ua\&amp;rdquo;:\&amp;ldquo;OPPO-OPPO A37tweibo6.11.1androidandroid5.1\&amp;ldquo;,\&amp;ldquo;ip\&amp;rdquo;:\&amp;ldquo;113.227.98.236\&amp;ldquo;,\&amp;ldquo;ext\&amp;rdquo;:{},\&amp;ldquo;connectiontype\&amp;rdquo;:2,\&amp;ldquo;os\&amp;rdquo;:\&amp;ldquo;android\&amp;ldquo;,\&amp;ldquo;osv\&amp;rdquo;:\&amp;ldquo;5.1\&amp;ldquo;},\&amp;ldquo;dealid\&amp;rdquo;:\&amp;ldquo;47cd7e122ade3d12e312c5eb6e68bc6e\&amp;ldquo;,\&amp;ldquo;at\&amp;rdquo;:2}&amp;ldquo;; JsonNode node = JsonUtil.readTree(json); } public static void main(String[] args) throws RunnerException {</description>
    </item>
    
    <item>
      <title>Golang 中自定义 JSON 转换</title>
      <link>https://emacsist.github.io/2016/10/30/golang-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-json-%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 30 Oct 2016 21:55:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/30/golang-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-json-%E8%BD%AC%E6%8D%A2/</guid>
      <description>起因 Java 中的 Timestamp 转换为 JSON 是长整型，但在 Golang 中，却是完全不同。因为需要将 Java 的代码转换为 Golang，所以遇到这种相互转换的问题。在 Golang中，默</description>
    </item>
    
    <item>
      <title>PostgreSQL中的json与jsonb</title>
      <link>https://emacsist.github.io/2016/10/09/postgresql%E4%B8%AD%E7%9A%84json%E4%B8%8Ejsonb/</link>
      <pubDate>Sun, 09 Oct 2016 15:30:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/09/postgresql%E4%B8%AD%E7%9A%84json%E4%B8%8Ejsonb/</guid>
      <description>hstore vs json vs jsonb stackoverflow 首先，hstore是一个扩展模块，它允许你保存key=&amp;gt;values键值对，且键值都只能是texts类型（但是，值也允许s</description>
    </item>
    
    <item>
      <title>Jackson JSON 库使用例子</title>
      <link>https://emacsist.github.io/2015/06/25/jackson-json-%E5%BA%93%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Thu, 25 Jun 2015 12:11:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/25/jackson-json-%E5%BA%93%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</guid>
      <description>ObjectMapper 它是线程安全的，所以建议使用它时，作为单例使用： private static final ObjectMapper mapper = new ObjectMapper(); Quick Parsing String jsonString = &amp;quot;{\&amp;quot;k1\&amp;quot;:\&amp;quot;v1\&amp;quot;,\&amp;quot;k2\&amp;quot;:\&amp;quot;v2\&amp;quot;}&amp;quot;; ObjectMapper mapper = new ObjectMapper(); JsonNode actualObj = mapper.readTree(jsonString); assertNotNull(actualObj); Convert JSON to Java Map JsonFactory factory = new JsonFactory(); ObjectMapper mapper = new ObjectMapper(factory); File from = new File(&amp;quot;albumnList.txt&amp;quot;); TypeReference&amp;lt;HashMap&amp;lt;String,Object&amp;gt;&amp;gt;</description>
    </item>
    
  </channel>
</rss>