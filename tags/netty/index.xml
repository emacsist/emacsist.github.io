<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>netty on emacsist</title>
    <link>https://emacsist.github.io/tags/netty/</link>
    <description>Recent content in netty on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Jun 2018 16:04:14 +0800</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/netty/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Netty与epoll资料收集</title>
      <link>https://emacsist.github.io/2018/06/20/netty%E4%B8%8Eepoll%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</link>
      <pubDate>Wed, 20 Jun 2018 16:04:14 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/20/netty%E4%B8%8Eepoll%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</guid>
      <description>为什么 Netty 支持 native epoll ? stackoverflow.com Netty 的 epoll transport 使用 epoll edge-triggered , 而 java 的 NIO 库珍的是 level-triggered. 除此</description>
    </item>
    
    <item>
      <title>基于Netty的简单HTTP服务例子</title>
      <link>https://emacsist.github.io/2018/05/18/%E5%9F%BA%E4%BA%8Enetty%E7%9A%84%E7%AE%80%E5%8D%95http%E6%9C%8D%E5%8A%A1%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Fri, 18 May 2018 16:54:08 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/18/%E5%9F%BA%E4%BA%8Enetty%E7%9A%84%E7%AE%80%E5%8D%95http%E6%9C%8D%E5%8A%A1%E4%BE%8B%E5%AD%90/</guid>
      <description>例子是基于 Netty 4.1.25.Final + Spring Boot 2 + JDK 1.8 + Maven github netty http demo AppInitializer.java package io.github.emacsist.netty.httpdemo.config; import io.github.emacsist.netty.httpdemo.handler.AppHandler; import io.netty.channel.Channel; import io.netty.channel.ChannelHandler; import</description>
    </item>
    
    <item>
      <title>Netty粘包和拆包资料收集</title>
      <link>https://emacsist.github.io/2018/05/03/netty%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</link>
      <pubDate>Thu, 03 May 2018 12:28:35 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/03/netty%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</guid>
      <description>维基百科对 TCP 的定义为: 传输控制协议（英语：Transmiss</description>
    </item>
    
    <item>
      <title>Netty中常见的IllegalReferenceCountException异常原因及解决</title>
      <link>https://emacsist.github.io/2018/04/28/netty%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84illegalreferencecountexception%E5%BC%82%E5%B8%B8%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Sat, 28 Apr 2018 17:52:30 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/28/netty%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84illegalreferencecountexception%E5%BC%82%E5%B8%B8%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3/</guid>
      <description>问题代码 package hello.in; import io.netty.buffer.ByteBuf; import io.netty.buffer.ByteBufUtil; import io.netty.channel.ChannelHandlerContext; import io.netty.channel.SimpleChannelInboundHandler; import io.netty.handler.codec.http.DefaultFullHttpResponse; import io.netty.handler.codec.http.HttpContent; import io.netty.handler.codec.http.HttpResponseStatus; import io.netty.handler.codec.http.HttpVersion; public class EchoHandler extends SimpleChannelInboundHandler&amp;lt;HttpContent&amp;gt; { @Override protected</description>
    </item>
    
    <item>
      <title>[翻译]Netty中的引用计数对象</title>
      <link>https://emacsist.github.io/2018/04/28/%E7%BF%BB%E8%AF%91netty%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 28 Apr 2018 12:38:50 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/28/%E7%BF%BB%E8%AF%91netty%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%AF%B9%E8%B1%A1/</guid>
      <description>原文 http://netty.io/wiki/reference-counted-objects.html 从 Netty 4 版本开始, 某些对象的生命周期是通过它们的引用计数</description>
    </item>
    
    <item>
      <title>[翻译]Netty4中 Ctx.close 与 Ctx.channel.close 的区别</title>
      <link>https://emacsist.github.io/2018/04/27/%E7%BF%BB%E8%AF%91netty4%E4%B8%AD-ctx.close-%E4%B8%8E-ctx.channel.close-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 27 Apr 2018 16:48:32 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/27/%E7%BF%BB%E8%AF%91netty4%E4%B8%AD-ctx.close-%E4%B8%8E-ctx.channel.close-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>翻译 原文 stackoverflow 让我们假设在 pipeline 里有三个 handlers , 它们都都拦截 close() 方法操作,</description>
    </item>
    
    <item>
      <title>Netty 中的流控与统计</title>
      <link>https://emacsist.github.io/2018/04/26/netty-%E4%B8%AD%E7%9A%84%E6%B5%81%E6%8E%A7%E4%B8%8E%E7%BB%9F%E8%AE%A1/</link>
      <pubDate>Thu, 26 Apr 2018 14:22:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/26/netty-%E4%B8%AD%E7%9A%84%E6%B5%81%E6%8E%A7%E4%B8%8E%E7%BB%9F%E8%AE%A1/</guid>
      <description>Netty 流量相关的包 io.netty.handler.traffic ChannelTrafficShapingHandler : Channel 级别的 GlobalChannelTrafficShapingHandler : 全局级别的(无论打开多少Ch</description>
    </item>
    
    <item>
      <title>Netty资料收集与整理</title>
      <link>https://emacsist.github.io/2018/04/24/netty%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 24 Apr 2018 15:57:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/24/netty%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</guid>
      <description>ChannelInitializer 它每次在 Channel 初始化时都会进行调用.一般会在这里, 初始化相应的</description>
    </item>
    
    <item>
      <title>《Netty实战》读书笔记</title>
      <link>https://emacsist.github.io/2017/06/25/netty%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 25 Jun 2017 12:30:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/25/netty%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>Netty 核心组件 Channel : 传入或传出数据的载体 回调 : 一个被提供给另一个方</description>
    </item>
    
  </channel>
</rss>