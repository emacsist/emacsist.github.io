<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on emacsist</title>
    <link>https://emacsist.github.io/tags/redis/</link>
    <description>Recent content in redis on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 05 Sep 2019 15:05:52 +0800</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis最佳实践</title>
      <link>https://emacsist.github.io/2019/09/05/redis%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 05 Sep 2019 15:05:52 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/09/05/redis%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>部署 # 用 root 身份执行下面命令, 最后再启动 redis server echo never &amp;gt; /sys/kernel/mm/transparent_hugepage/enabled cat /sys/kernel/mm/transparent_hugepage/defrag echo never &amp;gt; /sys/kernel/mm/transparent_hugepage/defrag cat /sys/kernel/mm/transparent_hugepage/defrag sysctl -w net.core.somaxconn=262144 sysctl -w vm.overcommit_memory=1 sysctl -p # swappiness, 该数值表示在激活 swap 前的空闲内存百分比. # 比如, 60, 表示内</description>
    </item>
    
    <item>
      <title>Redis Cli自动发送COMMAND命令的问题</title>
      <link>https://emacsist.github.io/2019/08/23/redis-cli%E8%87%AA%E5%8A%A8%E5%8F%91%E9%80%81command%E5%91%BD%E4%BB%A4%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 23 Aug 2019 12:08:02 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/08/23/redis-cli%E8%87%AA%E5%8A%A8%E5%8F%91%E9%80%81command%E5%91%BD%E4%BB%A4%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>问题 线上 redis 在排查慢查询时, 发现很多COMMAND 的 slowlog. 如下 定位问题才发现, 是平时一些维护脚本, 通过 redis-cli 来访问数据, 然后 redis-cli 会自动发送 COMMAND 命令来获取命</description>
    </item>
    
    <item>
      <title>使用GDB调试Redis</title>
      <link>https://emacsist.github.io/2019/08/09/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95redis/</link>
      <pubDate>Fri, 09 Aug 2019 11:36:00 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/08/09/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95redis/</guid>
      <description>环境准备 以 Redis 4.0.14 为例子. Linux 环境 下载 redis 源码 redis-4.0.14.tar.gz 编译时使用 make noopt 然后启动 redis-server 安装 GDB : sudo apt-get install gdb 禁用 ptrace : sudo echo 0 &amp;gt; /proc/sys/kernel/yama/ptrace_scope 调试 gdb ./src/redis-server # 在 main 函数中打断点 (gdb) b main # 执行. 这</description>
    </item>
    
    <item>
      <title>Spring Data Redis与Lettuce 使用 pipeline 时注意事项</title>
      <link>https://emacsist.github.io/2019/07/30/spring-data-redis%E4%B8%8Elettuce-%E4%BD%BF%E7%94%A8-pipeline-%E6%97%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Tue, 30 Jul 2019 16:11:27 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/07/30/spring-data-redis%E4%B8%8Elettuce-%E4%BD%BF%E7%94%A8-pipeline-%E6%97%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>起因 在优化线上系统代码时, 通过抓包发现当 Spring 中的 RedisTemplate 底层使用 Lettuce 库时, 并不是真正的 pipeline . 代码如下 @Bean public RedisConnectionFactory redisConnectionFactory() { RedisStandaloneConfiguration config = new RedisStandaloneConfiguration(&amp;quot;10.0.0.40&amp;quot;, 6479); config.setPassword(&amp;quot;pwd&amp;quot;); LettuceConnectionFactory factory = new LettuceConnectionFactory(config); return factory; } // 调用代码:</description>
    </item>
    
    <item>
      <title>Spring Data Redis 发布订阅</title>
      <link>https://emacsist.github.io/2018/01/17/spring-data-redis-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</link>
      <pubDate>Wed, 17 Jan 2018 17:32:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/17/spring-data-redis-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</guid>
      <description>因为线上项目因为 RabbitMQ 连接数过多(代码不良导致), 而导致 Redis 的 pub/sub 机制失效, 所以才有了这篇排查问题的文章. 记于 2018-1-17 事故日期: 2017-1-15 Spring Data Redis 中的 pub/sub @Bean RedisMessageListenerContainer container(RedisConnectionFactory connectionFactory, MessageListenerAdapter listenerAdapter)</description>
    </item>
    
    <item>
      <title>Mac下源码调试Redis</title>
      <link>https://emacsist.github.io/2017/06/05/mac%E4%B8%8B%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95redis/</link>
      <pubDate>Mon, 05 Jun 2017 15:39:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/05/mac%E4%B8%8B%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95redis/</guid>
      <description>安装和配置好GDB权限 参考下面安装GNU工具集 Mac下安装GNU工具集 然后还要进行 GDB 签名 codesign GDB 重新编译 redis redis 官方文档Debug指南</description>
    </item>
    
    <item>
      <title>使用Spring session时 SessionListener 执行 2 次的分析</title>
      <link>https://emacsist.github.io/2017/02/14/%E4%BD%BF%E7%94%A8spring-session%E6%97%B6-sessionlistener-%E6%89%A7%E8%A1%8C-2-%E6%AC%A1%E7%9A%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 14 Feb 2017 16:56:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/14/%E4%BD%BF%E7%94%A8spring-session%E6%97%B6-sessionlistener-%E6%89%A7%E8%A1%8C-2-%E6%AC%A1%E7%9A%84%E5%88%86%E6%9E%90/</guid>
      <description>项目中使用 Spring-session 这个分布式 session 作为负载均衡的 session 中间件，以便统一 session 的管理。 然后我们自己添加了一个 HttpSessionListener, 但是发现它执行了 2 次，实在是太诡异了。（其实是太菜</description>
    </item>
    
    <item>
      <title>Redis中缓存策略</title>
      <link>https://emacsist.github.io/2016/09/09/redis%E4%B8%AD%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/</link>
      <pubDate>Fri, 09 Sep 2016 14:21:17 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/09/redis%E4%B8%AD%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/</guid>
      <description>Redis中缓存策略 volatile-lru：从数据集中，将设置了过期时间的key,按最近最少使用的数据淘汰。 volatile-ttl：从数</description>
    </item>
    
    <item>
      <title>生产环境一次Redis导致OOM Killer的问题</title>
      <link>https://emacsist.github.io/2016/09/06/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%80%E6%AC%A1redis%E5%AF%BC%E8%87%B4oom-killer%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 06 Sep 2016 14:18:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/06/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%80%E6%AC%A1redis%E5%AF%BC%E8%87%B4oom-killer%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>Redis 引发系统OOM Killer 昨晚（2016-9-5），生产环境的Redis发生警报，一段时间后，内存被降到50%多（之前一直在90%左右），然后发现R</description>
    </item>
    
    <item>
      <title>生产环境中禁止Redis执行Keys命令</title>
      <link>https://emacsist.github.io/2016/06/15/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%A6%81%E6%AD%A2redis%E6%89%A7%E8%A1%8Ckeys%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 15 Jun 2016 17:17:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/15/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%A6%81%E6%AD%A2redis%E6%89%A7%E8%A1%8Ckeys%E5%91%BD%E4%BB%A4/</guid>
      <description>配置文件 将想要禁止的命令，按以下格式加入配置文件中 rename-command FLUSHALL &amp;quot;&amp;quot; rename-command FLUSHDB &amp;quot;&amp;quot; rename-command KEYS &amp;quot;&amp;quot; 在Spring Data Redis 中使用Scan代替 keys 注意： 版本要大于 1.6.0.REL</description>
    </item>
    
    <item>
      <title>Redis合并两实例的数据</title>
      <link>https://emacsist.github.io/2016/06/02/redis%E5%90%88%E5%B9%B6%E4%B8%A4%E5%AE%9E%E4%BE%8B%E7%9A%84%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 02 Jun 2016 16:31:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/02/redis%E5%90%88%E5%B9%B6%E4%B8%A4%E5%AE%9E%E4%BE%8B%E7%9A%84%E6%95%B0%E6%8D%AE/</guid>
      <description>AOF 与 RDB 这两个是Redis的备份方式。一个是快照（RDB），一个是记录所有的命令到文件（AOF,类似MySQL的binlog） RDB的备份与恢</description>
    </item>
    
    <item>
      <title>redis常用技巧</title>
      <link>https://emacsist.github.io/2016/05/26/redis%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 26 May 2016 12:08:05 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/26/redis%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>批量删除key cat /tmp/keys.txst | xargs -I{} -P 3 -t -n 10 ./redis-cli -p 6379 -n 0 del {} 查询QPS watch -n 60 &#39;/home/redis/bin/redis-cli -h 10.*.*.* -p 6379 info |grep total_commands_processe &amp;gt;&amp;gt; /tmp/qps2.txt &amp;amp;&amp;amp; date &amp;gt;&amp;gt; /tmp/qps2.txt&#39;</description>
    </item>
    
    <item>
      <title>Redis集群之twemproxy</title>
      <link>https://emacsist.github.io/2016/05/18/redis%E9%9B%86%E7%BE%A4%E4%B9%8Btwemproxy/</link>
      <pubDate>Wed, 18 May 2016 14:17:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/18/redis%E9%9B%86%E7%BE%A4%E4%B9%8Btwemproxy/</guid>
      <description>安装 git clone https://github.com/twitter/twemproxy.git cd twemproxy autoreconf -fvi ./configure --enable-debug=full --prefix=/ihome/db/redis/twemproxy make -j8 make install 安装完毕的结构： ╭─sky@sky-linux /ihome/db/redis/twemproxy ╰─➤ tree . . ├── sbin │ └── nutcracker └── share └── man └── man8 └──</description>
    </item>
    
    <item>
      <title>基于Redis分布式锁Redisson使用例子</title>
      <link>https://emacsist.github.io/2016/05/06/%E5%9F%BA%E4%BA%8Eredis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81redisson%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Fri, 06 May 2016 16:31:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/06/%E5%9F%BA%E4%BA%8Eredis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81redisson%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</guid>
      <description>@Test public void testDistributeLock() throws InterruptedException { final CountDownLatch cdl = new CountDownLatch(10); long time = System.currentTimeMillis(); RedissonClient redisson = Redisson.create(); final RLock rLock = redisson.getLock(&amp;quot;hello-lock&amp;quot;); final Map&amp;lt;String, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(1); map.put(&amp;quot;hello&amp;quot;, 0); for (int i = 0; i &amp;lt; 10; i++) { new Thread(new Runnable() { @Override public void run() { rLock.lock(10, TimeUnit.SECONDS); map.put(&amp;quot;hello&amp;quot;, map.get(&amp;quot;hello&amp;quot;) + 1); rLock.unlock(); cdl.countDown(); } }).start(); } cdl.await(); System.out.println(&amp;quot;result -&amp;gt;&amp;quot; + map.get(&amp;quot;hello&amp;quot;));</description>
    </item>
    
    <item>
      <title>Spring Redis 使用</title>
      <link>https://emacsist.github.io/2015/11/23/spring-redis-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 23 Nov 2015 18:28:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/spring-redis-%E4%BD%BF%E7%94%A8/</guid>
      <description>Pipelining 共享一条connection，以减少因为网络连接导致的性能问题: List&amp;lt;Object&amp;gt; results = stringRedisTemplate.executePipelined( new RedisCallback&amp;lt;Object&amp;gt;() { public Object doInRedis(RedisConnection connection) throws DataAccessException { StringRedisConnection stringRedisConn = (StringRedisConnection)connection; for(int i=0; i&amp;lt; batchSize; i++) { stringRedisConn.rPop(&amp;quot;myqueue&amp;quot;); } return null; } }); transaction redis中</description>
    </item>
    
    <item>
      <title>Redis升级</title>
      <link>https://emacsist.github.io/2015/11/23/redis%E5%8D%87%E7%BA%A7/</link>
      <pubDate>Mon, 23 Nov 2015 16:37:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/redis%E5%8D%87%E7%BA%A7/</guid>
      <description>创建一个新的实例 wget http://download.redis.io/redis-stable.tar.gz tar -xvf redis-stable.tar.gz cd redis-stable make make PREFIX=/some/other/directory install 启动slave实例 /some/other/directory/bin/redis-server /path/to/redis/redis.conf 开启复制 如果master要认证的话，要先认证下先,在slave的实例中的redi</description>
    </item>
    
    <item>
      <title>Redis入门指南--读书笔记</title>
      <link>https://emacsist.github.io/2015/07/26/redis%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 26 Jul 2015 15:05:17 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/26/redis%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>版本规则 x.y.z X: 大版本号 Y: 如果是偶数, 则是稳定版; 否则为不稳定版 Z: 修补号 安装(Linux) 最新稳定版: wget http://download.redis.io/redis-stable.tar.gz 编译及安装到指定目录(默认情况下,它会</description>
    </item>
    
    <item>
      <title>Redis与Java使用经验</title>
      <link>https://emacsist.github.io/2015/07/06/redis%E4%B8%8Ejava%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Mon, 06 Jul 2015 16:07:44 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/06/redis%E4%B8%8Ejava%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</guid>
      <description>Redis 中的数据类型 String——字符串 Hash——字典 List——列表 Set——集合 Sorted Set——有序集合 String (简单的 K-V 类型) 适合场景: 简单的 K-V 键</description>
    </item>
    
  </channel>
</rss>