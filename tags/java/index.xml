<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on emacsist</title>
    <link>https://emacsist.github.io/tags/java/</link>
    <description>Recent content in java on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 31 Jul 2019 16:28:07 +0800</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java内联inline相关资料</title>
      <link>https://emacsist.github.io/2019/07/31/java%E5%86%85%E8%81%94inline%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Wed, 31 Jul 2019 16:28:07 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/07/31/java%E5%86%85%E8%81%94inline%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description>JVM inline 相关的参数 # 获取所有 inline 匹配的参数 java -XX:+PrintFlagsFinal -version | grep -i &amp;quot;inline&amp;quot; # 如果生成的 native code 大小小于这个, 则 inline -XX:InlineSmallCode=2000 # 最大允许进行 inline 的 byte code 大小. 超过的话, 会提示 too big -XX:MaxInlineSize=35 # 经</description>
    </item>
    
    <item>
      <title>前后端断点续传思路及简单实现</title>
      <link>https://emacsist.github.io/2019/05/17/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E6%80%9D%E8%B7%AF%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 17 May 2019 11:37:31 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/05/17/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E6%80%9D%E8%B7%AF%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>Github 示例代码 前端 主要是利用 FileAPI 来进行按块大小分割, 然后一个一个上传. 主要就是利用 File 对象的 slice 方法进行按字节范围分割(一块), 然后一块一块地上传 还要</description>
    </item>
    
    <item>
      <title>浮点数在计算机内部表示原理</title>
      <link>https://emacsist.github.io/2018/12/30/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E9%83%A8%E8%A1%A8%E7%A4%BA%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 30 Dec 2018 20:12:58 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/12/30/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E9%83%A8%E8%A1%A8%E7%A4%BA%E5%8E%9F%E7%90%86/</guid>
      <description>科学计数法 浮点数在计算机表示中, 是以科学计数法来表示的. $$ -4.86 * 10^{11} \text { } = -4.86 * e11 $$ $$ 即 \text { } A * 10^N \text { } 等同于 \text { }AeN $$ 其中 A 满足 1&amp;lt;=|a|&amp;lt;10 一个科学计数</description>
    </item>
    
    <item>
      <title>&lt;Apache Kafka实践&gt;读书笔记</title>
      <link>https://emacsist.github.io/2018/12/27/apache-kafka%E5%AE%9E%E8%B7%B5%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 27 Dec 2018 11:26:50 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/12/27/apache-kafka%E5%AE%9E%E8%B7%B5%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>Kafka 版本 kafka_2.11-1.0.0.tar.gz 2.11 : 表示的是 Scala 语言版本 1.0.0 : 表示的是 Kafka 的版本 下载安装及使用 Download cd ~/Downloads tar -xvf kafka_2.11-1.0.0.tgz cd kafka_2.11-1.0.0 启动 要先安装好 Java 环境. 至少 JDK 1.7 及以上版本 zookeeper bin/zookeeper-server-start.sh config/zookeeper.properties 后台运行的话:</description>
    </item>
    
    <item>
      <title>Java中的文件锁</title>
      <link>https://emacsist.github.io/2018/10/30/java%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E9%94%81/</link>
      <pubDate>Tue, 30 Oct 2018 12:02:21 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/10/30/java%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E9%94%81/</guid>
      <description>假设这情况情况, 同一台服务器上有个服务有两个进程(一般用作负载均衡, 以及在更新时切换使用). 有个定时任务, 但只需要其中之一执行就可以了. 添加</description>
    </item>
    
    <item>
      <title>Java中读取ClassPath中的资源</title>
      <link>https://emacsist.github.io/2018/10/17/java%E4%B8%AD%E8%AF%BB%E5%8F%96classpath%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90/</link>
      <pubDate>Wed, 17 Oct 2018 14:58:09 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/10/17/java%E4%B8%AD%E8%AF%BB%E5%8F%96classpath%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90/</guid>
      <description>假设有个代码目录结构为 java ├── hello │ └── world │ ├── Test.java │ └── hello.txt └── hello1.txt 则可以这样子读取 hello.txt 和 hello1.txt 的资源 class 方式 package hello.world; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.stream.Collectors; public class Test { public static</description>
    </item>
    
    <item>
      <title>&lt;Java 9模块化开发&gt;读书笔记</title>
      <link>https://emacsist.github.io/2018/10/12/java-9%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 12 Oct 2018 16:00:28 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/10/12/java-9%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>模块描述符 module-info.java module your.module.name { //表示依赖某个模块. 即没有传递性的依赖. requires other.module.name; //表示依赖某个模块. 具有传递性的依赖 requires transitive other.module.name; //从当前模块中导出某些包, 以提</description>
    </item>
    
    <item>
      <title>Netty与epoll资料收集</title>
      <link>https://emacsist.github.io/2018/06/20/netty%E4%B8%8Eepoll%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</link>
      <pubDate>Wed, 20 Jun 2018 16:04:14 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/20/netty%E4%B8%8Eepoll%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</guid>
      <description>为什么 Netty 支持 native epoll ? stackoverflow.com Netty 的 epoll transport 使用 epoll edge-triggered , 而 java 的 NIO 库珍的是 level-triggered. 除此之外, epoll transport 暴露了一些在 Java NIO 中没出现的配置项, 例如: TCP_CORK, SO_REUSEPORT 等等. 什么是 edge-triggered 和 level-triggered? stackexchange 我没有</description>
    </item>
    
    <item>
      <title>[翻译]Oracle JDK 1.7.0_04 及之后可用的GC</title>
      <link>https://emacsist.github.io/2018/06/12/%E7%BF%BB%E8%AF%91oracle-jdk-1.7.0_04-%E5%8F%8A%E4%B9%8B%E5%90%8E%E5%8F%AF%E7%94%A8%E7%9A%84gc/</link>
      <pubDate>Tue, 12 Jun 2018 17:37:14 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/12/%E7%BF%BB%E8%AF%91oracle-jdk-1.7.0_04-%E5%8F%8A%E4%B9%8B%E5%90%8E%E5%8F%AF%E7%94%A8%E7%9A%84gc/</guid>
      <description>原文 Jack Shirazi 告诉你 Oracle Java 7 update 4 及更高版本可以使用哪些GC和GC的组合, 包括Java 8 和Java9 发布日期: June 2012, 更新日期: September 2015, 作者 Jack Shirazi 注意, 这已经更</description>
    </item>
    
    <item>
      <title>Java中多线程环境使用Random</title>
      <link>https://emacsist.github.io/2018/06/04/java%E4%B8%AD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8random/</link>
      <pubDate>Mon, 04 Jun 2018 17:13:26 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/04/java%E4%B8%AD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8random/</guid>
      <description>Random 根据 JDK 文档介绍, 它是线程安全的. Instances of {@code java.util.Random} are threadsafe. 但文档中说, 在跨线程使用 Random 时, 它的性能比较低下. ThreadLocalRandom 这个是在 JDK &amp;gt;= 1.7 时出现的, 当在多线程环境中使用</description>
    </item>
    
    <item>
      <title>Java开启远程VisualVM中的VisualGC</title>
      <link>https://emacsist.github.io/2018/06/01/java%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8Bvisualvm%E4%B8%AD%E7%9A%84visualgc/</link>
      <pubDate>Fri, 01 Jun 2018 14:44:19 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/01/java%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8Bvisualvm%E4%B8%AD%E7%9A%84visualgc/</guid>
      <description>开启远程Debug # jdk &amp;lt; java9 之前(默认监听所有) -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=n # jdk &amp;gt;= java9(默认只监听本地, 所以要 *:端口, 开启远程) -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=*:4000,suspend=n 开启 JMX -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false 开启 Jstatd 只有</description>
    </item>
    
    <item>
      <title>Java 8 中流式API性能基准测试</title>
      <link>https://emacsist.github.io/2018/05/23/java-8-%E4%B8%AD%E6%B5%81%E5%BC%8Fapi%E6%80%A7%E8%83%BD%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 23 May 2018 12:24:02 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/23/java-8-%E4%B8%AD%E6%B5%81%E5%BC%8Fapi%E6%80%A7%E8%83%BD%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</guid>
      <description>测试代码 package hello.test; import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder; import java.util.Arrays; import java.util.concurrent.TimeUnit; @BenchmarkMode(Mode.Throughput) @OutputTimeUnit(TimeUnit.MILLISECONDS) @State(Scope.Thread) public class BenchmarkTest { public static final String[] BRAND_ARRAY = {&amp;quot;iphone&amp;quot;, &amp;quot;huawei&amp;quot;, &amp;quot;xiaomi&amp;quot;, &amp;quot;samsung&amp;quot;, &amp;quot;vivo&amp;quot;, &amp;quot;bbk&amp;quot;, &amp;quot;oppo&amp;quot;, &amp;quot;meizu&amp;quot;, &amp;quot;sony&amp;quot;, &amp;quot;xperia&amp;quot;, &amp;quot;htc&amp;quot;, &amp;quot;oneplus&amp;quot;, &amp;quot;smartisan&amp;quot;, &amp;quot;lenovo&amp;quot;, &amp;quot;gionee&amp;quot;, &amp;quot;nubia&amp;quot;, &amp;quot;letv&amp;quot;, &amp;quot;vertu&amp;quot;}; private static final String bidRequestModel = &amp;quot;oneplus&amp;quot;; @Benchmark public static String findBidrequstBrandByStream() { final String lowBidRequestModel = bidRequestModel.toLowerCase(); return</description>
    </item>
    
    <item>
      <title>Java 8 指南</title>
      <link>https://emacsist.github.io/2018/05/21/java-8-%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 21 May 2018 18:02:45 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/21/java-8-%E6%8C%87%E5%8D%97/</guid>
      <description>参考资料 比较器 以前的用法: Comparator&amp;lt;Developer&amp;gt; byName = new Comparator&amp;lt;Developer&amp;gt;() { @Override public int compare(Developer o1, Developer o2) { return o1.getName().compareTo(o2.getName()); } }; lambda: Comparator&amp;lt;Developer&amp;gt; byName = (Developer o1, Developer o2)-&amp;gt;o1.getName().compareTo(o2.getName()); Map, List 中的 forEach Map Map&amp;lt;String, Integer&amp;gt; items = new HashMap&amp;lt;&amp;gt;(); items.forEach((k,v)-&amp;gt;System.out.println(&amp;quot;Item : &amp;quot; + k + &amp;quot; Count : &amp;quot; + v)); List List&amp;lt;String&amp;gt; items = new ArrayList&amp;lt;&amp;gt;(); items.forEach(item-&amp;gt;System.out.println(item));</description>
    </item>
    
    <item>
      <title>Java8 日期时间API</title>
      <link>https://emacsist.github.io/2018/05/18/java8-%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4api/</link>
      <pubDate>Fri, 18 May 2018 13:45:36 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/18/java8-%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4api/</guid>
      <description>Java 8 中, 将日期和时间, 以及日期时间可以分别处理的 获取当前日期 LocalDate.now(); //2018-05-18 获取当前时间 LocalTime.now(); //13:48:37.127 去掉纳秒: LocalTime.now().withNano(0); //13:49:03 格式化日期 DateTimeFormatter 对象是不可变的, 也就是线程安全的~</description>
    </item>
    
    <item>
      <title>[翻译]gRPC与deadlines</title>
      <link>https://emacsist.github.io/2018/05/16/%E7%BF%BB%E8%AF%91grpc%E4%B8%8Edeadlines/</link>
      <pubDate>Wed, 16 May 2018 15:09:00 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/16/%E7%BF%BB%E8%AF%91grpc%E4%B8%8Edeadlines/</guid>
      <description>原文: gRPC and Deadlines gRPC 与 Deadlines TL;DR(Too long, Don&amp;rsquo;t read 的首字母缩写, 也用于句首的消息摘要): 总是设置 deadline . 这篇文章解释了为什么我们建议要有意设置 deadlines, 以及展示了一些代码片断来</description>
    </item>
    
    <item>
      <title>Java生成词云</title>
      <link>https://emacsist.github.io/2018/05/15/java%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/</link>
      <pubDate>Tue, 15 May 2018 11:32:31 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/15/java%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/</guid>
      <description>github kumo 遇到Linux环境下, 中文显示不正常, 这是因为Linux环境中, 字体设置不正确导致的.这个可以参考 issue Java中安装字体 全局VM 将字体文件</description>
    </item>
    
    <item>
      <title>Netty粘包和拆包资料收集</title>
      <link>https://emacsist.github.io/2018/05/03/netty%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</link>
      <pubDate>Thu, 03 May 2018 12:28:35 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/05/03/netty%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</guid>
      <description>维基百科对 TCP 的定义为: 传输控制协议（英语：Transmission Control Protocol，缩写为 TCP）是一种面向连接的、可靠的、基于字节流的传</description>
    </item>
    
    <item>
      <title>Netty中常见的IllegalReferenceCountException异常原因及解决</title>
      <link>https://emacsist.github.io/2018/04/28/netty%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84illegalreferencecountexception%E5%BC%82%E5%B8%B8%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Sat, 28 Apr 2018 17:52:30 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/28/netty%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84illegalreferencecountexception%E5%BC%82%E5%B8%B8%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3/</guid>
      <description>问题代码 package hello.in; import io.netty.buffer.ByteBuf; import io.netty.buffer.ByteBufUtil; import io.netty.channel.ChannelHandlerContext; import io.netty.channel.SimpleChannelInboundHandler; import io.netty.handler.codec.http.DefaultFullHttpResponse; import io.netty.handler.codec.http.HttpContent; import io.netty.handler.codec.http.HttpResponseStatus; import io.netty.handler.codec.http.HttpVersion; public class EchoHandler extends SimpleChannelInboundHandler&amp;lt;HttpContent&amp;gt; { @Override protected void channelRead0(final ChannelHandlerContext ctx, final HttpContent msg) { System.out.println(&amp;quot;收到&amp;quot</description>
    </item>
    
    <item>
      <title>[翻译]Netty中的引用计数对象</title>
      <link>https://emacsist.github.io/2018/04/28/%E7%BF%BB%E8%AF%91netty%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 28 Apr 2018 12:38:50 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/28/%E7%BF%BB%E8%AF%91netty%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%AF%B9%E8%B1%A1/</guid>
      <description>原文 http://netty.io/wiki/reference-counted-objects.html 从 Netty 4 版本开始, 某些对象的生命周期是通过它们的引用计数来进行管理, 当它不再被使用时, 方便 Netty 尽可能快地可以回收它们(或者它们共享的资源)</description>
    </item>
    
    <item>
      <title>Jackson序列化没有get, Set方法的POJO</title>
      <link>https://emacsist.github.io/2018/04/28/jackson%E5%BA%8F%E5%88%97%E5%8C%96%E6%B2%A1%E6%9C%89get-set%E6%96%B9%E6%B3%95%E7%9A%84pojo/</link>
      <pubDate>Sat, 28 Apr 2018 10:58:11 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/28/jackson%E5%BA%8F%E5%88%97%E5%8C%96%E6%B2%A1%E6%9C%89get-set%E6%96%B9%E6%B3%95%E7%9A%84pojo/</guid>
      <description>异常 重现代码 @Test public void testObjectMapper() throws JsonProcessingException { ObjectMapper objectMapper = new ObjectMapper(); Man man = new Man(); System.out.println(objectMapper.writeValueAsString(man)); } public static class Man { private int age; private String name; } 当 Jackson 遇到没有 getter, setter 方法的 POJO 时, 会抛出这个异常: com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class JUnitTest$Man and no properties discovered</description>
    </item>
    
    <item>
      <title>Netty 中的流控与统计</title>
      <link>https://emacsist.github.io/2018/04/26/netty-%E4%B8%AD%E7%9A%84%E6%B5%81%E6%8E%A7%E4%B8%8E%E7%BB%9F%E8%AE%A1/</link>
      <pubDate>Thu, 26 Apr 2018 14:22:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/26/netty-%E4%B8%AD%E7%9A%84%E6%B5%81%E6%8E%A7%E4%B8%8E%E7%BB%9F%E8%AE%A1/</guid>
      <description>Netty 流量相关的包 io.netty.handler.traffic ChannelTrafficShapingHandler : Channel 级别的 GlobalChannelTrafficShapingHandler : 全局级别的(无论打开多少Channel) 以及 每条 Channel 级别的 GlobalTrafficShapingHandler : 全局级别的 具体构造, 可以参考它们的相关构造函数和</description>
    </item>
    
    <item>
      <title>Netty资料收集与整理</title>
      <link>https://emacsist.github.io/2018/04/24/netty%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 24 Apr 2018 15:57:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/24/netty%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</guid>
      <description>ChannelInitializer 它每次在 Channel 初始化时都会进行调用.一般会在这里, 初始化相应的编码器和解码器以及相应的 Handler. 例如 @Override protected void initChannel(final Channel ch) { ChannelPipeline p = ch.pipeline(); p.addLast(new HttpRequestDecoder()); p.addLast(new HttpResponseEncoder()); p.addLast(new HelloHandler()); } 为了调试, 我这</description>
    </item>
    
    <item>
      <title>位操作总结</title>
      <link>https://emacsist.github.io/2018/04/19/%E4%BD%8D%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 19 Apr 2018 14:20:52 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/19/%E4%BD%8D%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</guid>
      <description>注意 位, 是从最右边的位数开始的, 最右边的位为第0位. 位移 左移 int a = 1 &amp;lt;&amp;lt; 0 int b = 1 &amp;lt;&amp;lt; 1 右移 int a = 1 &amp;gt;&amp;gt; 0; int b = 1 &amp;gt;&amp;gt; 1; 设置第 x 位 number |= (1 &amp;lt;&amp;lt; x) 例如: int</description>
    </item>
    
    <item>
      <title>Guava 常用代码片段</title>
      <link>https://emacsist.github.io/2018/04/17/guava-%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</link>
      <pubDate>Tue, 17 Apr 2018 17:54:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/17/guava-%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</guid>
      <description>构建不可变的 Map ImmutableMap&amp;lt;String, Integer&amp;gt; immutableMap = ImmutableMap.of(&amp;quot;k1&amp;quot;, 1, &amp;quot;k2&amp;quot;, 2); ImmutableMap&amp;lt;String, Integer&amp;gt; immutableMap2 = new ImmutableMap.Builder&amp;lt;String, Integer&amp;gt;().put(&amp;quot;k1&amp;quot;, 1).put(&amp;quot;k2&amp;quot;, 2).build(); List 转换为 List 或 List final Iterable&amp;lt;Integer&amp;gt; ages = Ints.stringConverter().convertAll(Splitter.on(&#39;,&#39;).trimResults().omitEmptyStrings().splitToList(ageArr)); Longs.stringConverter()... Floats.stringConverter()... Shorts.stringConverter()... Doubles.stringConverter()... 获取 list 的前 N 个元素 List&amp;lt;Integer&amp;gt; list = FluentIterable.from(p.getList()).limit(2).toList(); 分割 string Splitter.on(&#39;,&#39;).trimResults().omitEmptyStrings().splitToList(&amp;quot;your string&amp;quot;) 或 Splitter.on(CharMatcher.anyOf(&amp;quot;,;&amp;quot;)).trimResults().splitToList(&amp;quot;your string&amp;quot;); List to String Joiner.on(&amp;quot;,&amp;quot;).skipNulls().join(your list) Cache public static final</description>
    </item>
    
    <item>
      <title>Kotlin lang 学习笔记</title>
      <link>https://emacsist.github.io/2018/03/01/kotlin-lang-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 01 Mar 2018 11:25:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/03/01/kotlin-lang-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>基本语法 定义 package 不要求目录与包相匹配~: 源文件可以放在文件系统的任意位置 源文件中的所有内容, 都是通过包声明来包含的. 即: 名包.方法名 等 特别地,</description>
    </item>
    
    <item>
      <title>我的Java开发环境</title>
      <link>https://emacsist.github.io/2018/02/28/%E6%88%91%E7%9A%84java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 28 Feb 2018 15:24:31 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/02/28/%E6%88%91%E7%9A%84java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>IDEA 插件 alibaba code style CamelCase JVM Debugger Memory View Bytecode Viewer FindBugs Maven, Gradle Gradle 的性能快的一逼~ 如果能选 Gradle 则尽可能选 Gradle Maven 性能加速 开启多线程以及分层编译(加快启动) set MAVEN_OPTS=&amp;quot;-XX:+TieredCompilation -XX:TieredStopAtLevel=1&amp;quot; mvn -T 1C package [--offline] 代码质量</description>
    </item>
    
    <item>
      <title>Java logback 中的 SocketAppender 的使用及与 RabbitMQ 的性能对比</title>
      <link>https://emacsist.github.io/2018/02/23/java-logback-%E4%B8%AD%E7%9A%84-socketappender-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%B8%8E-rabbitmq-%E7%9A%84%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Fri, 23 Feb 2018 17:06:12 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/02/23/java-logback-%E4%B8%AD%E7%9A%84-socketappender-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%B8%8E-rabbitmq-%E7%9A%84%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</guid>
      <description>loback 中的 socketAppender 的配置及使用 配置文件都是用官网的示例 server &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt; &amp;lt;!-- ==================================================================== --&amp;gt; &amp;lt;!-- This config file is intended to be used by a SocketServer that logs --&amp;gt; &amp;lt;!-- events received from various clients on the console and to a file --&amp;gt; &amp;lt;!-- that is rolled over when appropriate. The interesting point to</description>
    </item>
    
    <item>
      <title>Java 中的线程池创建规则</title>
      <link>https://emacsist.github.io/2018/02/23/java-%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9B%E5%BB%BA%E8%A7%84%E5%88%99/</link>
      <pubDate>Fri, 23 Feb 2018 11:46:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/02/23/java-%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9B%E5%BB%BA%E8%A7%84%E5%88%99/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ThreadLocal 中的内存泄漏</title>
      <link>https://emacsist.github.io/2018/01/29/threadlocal-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</link>
      <pubDate>Mon, 29 Jan 2018 11:42:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/29/threadlocal-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</guid>
      <description>缘起 发现线上项目, 在 Tomcat shutdown 时会报告可能的内存泄漏问题 日志如下 Sep 20, 2016 12:41:33 PM org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc SEVERE: The web application [] registered the JDBC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered. Sep</description>
    </item>
    
    <item>
      <title>Spring 中 AOP 使用</title>
      <link>https://emacsist.github.io/2018/01/26/spring-%E4%B8%AD-aop-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 26 Jan 2018 16:30:12 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/26/spring-%E4%B8%AD-aop-%E4%BD%BF%E7%94%A8/</guid>
      <description>开启 @Configuration @EnableAspectJAutoProxy public class AppConfig { } 或xml中配置 &amp;lt;aop:aspectj-autoproxy/&amp;gt; 声明一个 Aspect @Aspect @Component public class NotVeryUsefulAspect { } 声明一个切点 @Pointcut(&amp;quot;execution(* transfer(..))&amp;quot;)// the pointcut expression private void anyOldTransfer() {}// the pointcut signature 支持的切点类型 execution within this target args @target @args @within @annotation 组合切点 @Pointcut(&amp;quot;execution(public * *(..))&amp;quot;)</description>
    </item>
    
    <item>
      <title>Spring框架中注解整理</title>
      <link>https://emacsist.github.io/2018/01/26/spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%B3%A8%E8%A7%A3%E6%95%B4%E7%90%86/</link>
      <pubDate>Fri, 26 Jan 2018 12:07:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/26/spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%B3%A8%E8%A7%A3%E6%95%B4%E7%90%86/</guid>
      <description>这里引用一下图片, 实在太赞了. 以下是自己的整理 下载PDF版</description>
    </item>
    
    <item>
      <title>IntelliJ 中按条件进行断点调试</title>
      <link>https://emacsist.github.io/2018/01/22/intellij-%E4%B8%AD%E6%8C%89%E6%9D%A1%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</link>
      <pubDate>Mon, 22 Jan 2018 12:05:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/22/intellij-%E4%B8%AD%E6%8C%89%E6%9D%A1%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</guid>
      <description>在我们调试程序的时候, 往往会遇到在循环中要打断点, 然后进行过滤调试的情况, 这时就可以用上按条件来进行打断点调试了. 比如在 Spring 源码中有如下代码 protected</description>
    </item>
    
    <item>
      <title>&lt;Java多线程编程实践指南-核心篇&gt;读书笔记</title>
      <link>https://emacsist.github.io/2018/01/16/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97-%E6%A0%B8%E5%BF%83%E7%AF%87%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 16 Jan 2018 21:48:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/01/16/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97-%E6%A0%B8%E5%BF%83%E7%AF%87%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>用户线程VS守护线程 用户线程 它会阻止 Java 虚拟机的正常停止, 即一个 Java 虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止 正常停止 指不是通过 System.exit</description>
    </item>
    
    <item>
      <title>Java Web 中动态修改配置文件属性值</title>
      <link>https://emacsist.github.io/2017/12/29/java-web-%E4%B8%AD%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E5%80%BC/</link>
      <pubDate>Fri, 29 Dec 2017 10:42:37 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/29/java-web-%E4%B8%AD%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E5%80%BC/</guid>
      <description>缘起 由于项目复杂起来, 导致平时部署的时候常常会有多个Tomcat实例来运行支撑. 比如我们公司里有个 DSP 项目, 分为三个大类的 Tomcat(Web 处理用户请求, Task 定</description>
    </item>
    
    <item>
      <title>&lt;Java 8 实战&gt; 学习笔记</title>
      <link>https://emacsist.github.io/2017/12/21/java-8-%E5%AE%9E%E6%88%98-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 21 Dec 2017 12:27:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/12/21/java-8-%E5%AE%9E%E6%88%98-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>流处理 流, 是一系列数据项, 一次只生成一项. 程序可以从输入流中一个一个读取数据项, 然后以同样的方式将数据项写入输出流. 一个程序的输出流, 很可能</description>
    </item>
    
    <item>
      <title>HashMap Vs. ConcurrentHashMap Vs. SynchronizedMap – 如何在Java中同步HashMap</title>
      <link>https://emacsist.github.io/2017/10/10/hashmap-vs.-concurrenthashmap-vs.-synchronizedmap-%E5%A6%82%E4%BD%95%E5%9C%A8java%E4%B8%AD%E5%90%8C%E6%AD%A5hashmap/</link>
      <pubDate>Tue, 10 Oct 2017 15:05:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/10/10/hashmap-vs.-concurrenthashmap-vs.-synchronizedmap-%E5%A6%82%E4%BD%95%E5%9C%A8java%E4%B8%AD%E5%90%8C%E6%AD%A5hashmap/</guid>
      <description>原文 HashMap 在Java中是一种非常强大的数据结构。我们会经常使用它并且在绝大多数的应用中都会使用到它。这里有一些我之前写的例子: 如何实现线程安全的</description>
    </item>
    
    <item>
      <title>Java 中假泛型导致的一个坑</title>
      <link>https://emacsist.github.io/2017/09/21/java-%E4%B8%AD%E5%81%87%E6%B3%9B%E5%9E%8B%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</link>
      <pubDate>Thu, 21 Sep 2017 17:22:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/09/21/java-%E4%B8%AD%E5%81%87%E6%B3%9B%E5%9E%8B%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</guid>
      <description>情景 公司里一位程序员，写了段代码: @Override public Set&amp;lt;Integer&amp;gt; getUserId() { Set&amp;lt;Integer&amp;gt; userIdSet; Object value = LocalCache.getValue(CacheConstants.USERID_KEY); if (value != null) { userIdSet = (Set&amp;lt;Integer&amp;gt;) value; } else { userIdSet = redisTemplate.opsForSet().members(CacheConstants.USERID_KEY); LocalCache.putValue(CacheConstants.USERID_KEY, userIdSet, 300); } return userIdSet; } 然后判断 Set&amp;lt;Integer&amp;gt; userIdSet = taskService.getUserId(); if (task != null &amp;amp;&amp;amp; userIdSet.contains(task.getUserId())) { //do somehting } else {</description>
    </item>
    
    <item>
      <title>MyBatis 源码分析及学习</title>
      <link>https://emacsist.github.io/2017/07/21/mybatis-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 21 Jul 2017 15:32:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/21/mybatis-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E5%AD%A6%E4%B9%A0/</guid>
      <description>搭建环境 本要将相应的工程，放在 github 了，这个是最小的 MyBatis 应用了，导入工程到自己喜欢的IDE里，就可以开始一步一步调试了。 github emacsist mybatis-hello-world 概要 public static void main(String[] args) throws IOException {</description>
    </item>
    
    <item>
      <title>Java中的 finally 与 return</title>
      <link>https://emacsist.github.io/2017/07/17/java%E4%B8%AD%E7%9A%84-finally-%E4%B8%8E-return/</link>
      <pubDate>Mon, 17 Jul 2017 18:20:09 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/17/java%E4%B8%AD%E7%9A%84-finally-%E4%B8%8E-return/</guid>
      <description>实验代码 package org.agoncal.sample.jmh; /** * Created by emacsist on 2017/7/14. */ public class TestFinallyClass { public static void main(String[] args) { System.out.println(testFinally(10)); } public static int testFinally(int i) { try { return i + 1; } finally { i+=10; return i + 2; } } } 字节码 Code: stack=2, locals=3, args_size=1 0: iload_0 将 LocalVariableTable 中 slot 为 0 的变量压入栈</description>
    </item>
    
    <item>
      <title>Java 中私有字段的继承问题</title>
      <link>https://emacsist.github.io/2017/07/11/java-%E4%B8%AD%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5%E7%9A%84%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 11 Jul 2017 11:24:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/11/java-%E4%B8%AD%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5%E7%9A%84%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/</guid>
      <description>父类中的私有字段会不会被子类继承？ 父类(没有 get , set) package org.agoncal.sample.jmh; public class Test { private int age; } 子类: package org.agoncal.sample.jmh; /** * Created by emacsist on 2017/7/10. */ public class Test2 extends Test { private String name; } 反射获取 age getField package org.agoncal.sample.jmh; import java.lang.reflect.Field; /** *</description>
    </item>
    
    <item>
      <title>Java 中关于局部变量位置及其对应的字节码</title>
      <link>https://emacsist.github.io/2017/07/07/java-%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BD%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AD%97%E8%8A%82%E7%A0%81/</link>
      <pubDate>Fri, 07 Jul 2017 16:09:38 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/07/java-%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BD%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AD%97%E8%8A%82%E7%A0%81/</guid>
      <description>局部变量位置 package org.agoncal.sample.jmh; public class Test { public void t1() { Object a; for (int i = 0; i &amp;lt; 100; i++) { a = new Object(); System.out.println(a.getClass()); } } public void t2() { for (int i = 0; i &amp;lt; 100; i++) { Object a = new Object(); System.out.println(a.getClass()); } } } 看资料网上大多说倾向 t1 更</description>
    </item>
    
    <item>
      <title>Java 中 的 synchronized 与 Atomic</title>
      <link>https://emacsist.github.io/2017/07/04/java-%E4%B8%AD-%E7%9A%84-synchronized-%E4%B8%8E-atomic/</link>
      <pubDate>Tue, 04 Jul 2017 16:34:58 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/04/java-%E4%B8%AD-%E7%9A%84-synchronized-%E4%B8%8E-atomic/</guid>
      <description>// 代码1 public class Sample { private static int count = 0; synchronized public static void increment() { count++; } } // 代码2 public class Sample { private static AtomicInteger count = new AtomicInteger(0); public static void increment() { count.getAndIncrement(); } } 虽然它们都可以实现相同的功能，那它们的区别到底是</description>
    </item>
    
    <item>
      <title>JDK 之 ArrayList 和 LinkedList 源码阅读笔记</title>
      <link>https://emacsist.github.io/2017/07/04/jdk-%E4%B9%8B-arraylist-%E5%92%8C-linkedlist-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 04 Jul 2017 14:50:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/04/jdk-%E4%B9%8B-arraylist-%E5%92%8C-linkedlist-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>类声明 public class ArrayList&amp;lt;E&amp;gt; extends AbstractList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable public class LinkedList&amp;lt;E&amp;gt; extends AbstractSequentialList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, Deque&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable 其中 public abstract class AbstractSequentialList&amp;lt;E&amp;gt; extends AbstractList&amp;lt;E&amp;gt; 可以看到，它们的共同点是 都继承 AbstractList 类 都实现了 List 接口 都实现了 Cloneable 接口 都实现了 Serializable 接口 区</description>
    </item>
    
    <item>
      <title>JDK 之 ThreadLocal 源码阅读笔记</title>
      <link>https://emacsist.github.io/2017/07/04/jdk-%E4%B9%8B-threadlocal-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 04 Jul 2017 11:17:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/04/jdk-%E4%B9%8B-threadlocal-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>ThreadLocal 类声明 public class ThreadLocal&amp;lt;T&amp;gt; 可以看到，它只是单纯的一个泛型类，没有其他特别的修饰符。 看注释可以看到，它通常的使用方式是在类字段添加: private static final ThreadLocal... 属性 private final int threadLocalHashCode =</description>
    </item>
    
    <item>
      <title>JDK 之 Enum 源码阅读笔记</title>
      <link>https://emacsist.github.io/2017/07/03/jdk-%E4%B9%8B-enum-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 03 Jul 2017 15:10:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/03/jdk-%E4%B9%8B-enum-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>Enum 类声明 public abstract class Enum&amp;lt;E extends Enum&amp;lt;E&amp;gt;&amp;gt; implements Comparable&amp;lt;E&amp;gt;, Serializable 可以看到，它是一个抽象类，实现的 Comparable 和 Serializable 接口 Enum 类的属性 private final String name; 所代表的名称（即 enum 的名称,也即是枚举字段的变量的字面量</description>
    </item>
    
    <item>
      <title>JDK 之 Integer 源码阅读笔记</title>
      <link>https://emacsist.github.io/2017/07/03/jdk-%E4%B9%8B-integer-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 03 Jul 2017 11:37:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/03/jdk-%E4%B9%8B-integer-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>虽然这里只是以 Integer 为例，但是其他的 primitive 包装类，原理也是一样的，就不再多解释了。 Integer 类声明 public final class Integer extends Number implements Comparable&amp;lt;Integer&amp;gt; 其中, Number 类的修饰: public abstract class Number implements java.io.Serializable 通过源码可以</description>
    </item>
    
    <item>
      <title>JDK 之 String 源码阅读笔记</title>
      <link>https://emacsist.github.io/2017/07/01/jdk-%E4%B9%8B-string-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 01 Jul 2017 11:15:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/07/01/jdk-%E4%B9%8B-string-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>本文基于 JDK 1.8 ，所有代码都有 Mac 环境下， JDK 1.8 中测试 String 类的修饰 public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence 首先，它是一个 final 类，这表明：该类是不能被继承的。 Why is String class declared final in Java? 实现</description>
    </item>
    
    <item>
      <title>Java程序员的自我修养</title>
      <link>https://emacsist.github.io/2017/06/28/java%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</link>
      <pubDate>Wed, 28 Jun 2017 17:34:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/28/java%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</guid>
      <description>Java 内存模型及规范 ifeve-Java内存模型FAQ-中译版 The Java Memory Model The JSR-133 Cookbook for Compiler Writers JVM 架构 https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html 根据规范可知, 运行时的数据区域有 PC 寄存器(progra</description>
    </item>
    
    <item>
      <title>《Netty实战》读书笔记</title>
      <link>https://emacsist.github.io/2017/06/25/netty%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 25 Jun 2017 12:30:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/25/netty%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>Netty 核心组件 Channel : 传入或传出数据的载体 回调 : 一个被提供给另一个方法的方法引用 Future : 提供了另一种在完成时通知应用程序的方式. Netty 的出站I/O 操作都将返</description>
    </item>
    
    <item>
      <title>JVM字节码学习与理解</title>
      <link>https://emacsist.github.io/2017/06/19/jvm%E5%AD%97%E8%8A%82%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3/</link>
      <pubDate>Mon, 19 Jun 2017 14:19:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/19/jvm%E5%AD%97%E8%8A%82%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3/</guid>
      <description>aconst_null 压特殊的 null 对象引用入栈。 iconst_ 作用压整型数字0，1，2，3，4，5 入栈 注意 压入栈的指令还有： bipush 0; sipush 0; idc 0; 但这些指令相对于等同的 iconst_ 指令，效率更低</description>
    </item>
    
    <item>
      <title>关于StringBuilder中设置初始容量对性能的测试</title>
      <link>https://emacsist.github.io/2017/06/16/%E5%85%B3%E4%BA%8Estringbuilder%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%AE%B9%E9%87%8F%E5%AF%B9%E6%80%A7%E8%83%BD%E7%9A%84%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 16 Jun 2017 16:09:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/16/%E5%85%B3%E4%BA%8Estringbuilder%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%AE%B9%E9%87%8F%E5%AF%B9%E6%80%A7%E8%83%BD%E7%9A%84%E6%B5%8B%E8%AF%95/</guid>
      <description>被测试代码 package org.agoncal.sample.jmh; /** * Created by emacsist on 2017/6/16. */ public class StringAppend { public static String defaultBuilder(int len) { StringBuilder sb = new StringBuilder(); for (int i = 0; i &amp;lt; len; i++) { sb.append(i); } return sb.toString(); } public static String bufferBuilder(int len) { StringBuilder sb = new StringBuilder(len); for (int i = 0; i &amp;lt; len; i++) { sb.append(i); } return sb.toString();</description>
    </item>
    
    <item>
      <title>请不要再说Java中final方法比非final性能更好了</title>
      <link>https://emacsist.github.io/2017/06/16/%E8%AF%B7%E4%B8%8D%E8%A6%81%E5%86%8D%E8%AF%B4java%E4%B8%ADfinal%E6%96%B9%E6%B3%95%E6%AF%94%E9%9D%9Efinal%E6%80%A7%E8%83%BD%E6%9B%B4%E5%A5%BD%E4%BA%86/</link>
      <pubDate>Fri, 16 Jun 2017 12:07:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/16/%E8%AF%B7%E4%B8%8D%E8%A6%81%E5%86%8D%E8%AF%B4java%E4%B8%ADfinal%E6%96%B9%E6%B3%95%E6%AF%94%E9%9D%9Efinal%E6%80%A7%E8%83%BD%E6%9B%B4%E5%A5%BD%E4%BA%86/</guid>
      <description>无继承 有 static 修饰 static final // 生成随机数字和字母, public static final String getStringRandomFinal(int length) { String val = &amp;quot;&amp;quot;; Random random = new Random(); // 参数length，表示生成几位随机数 for (int i = 0; i &amp;lt; length; i++) { String charOrNum = random.nextInt(2) %</description>
    </item>
    
    <item>
      <title>Java中的基准测试JMH简单使用</title>
      <link>https://emacsist.github.io/2017/06/12/java%E4%B8%AD%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95jmh%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 12 Jun 2017 16:37:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/12/java%E4%B8%AD%E7%9A%84%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95jmh%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>使用 命令行 请参考官方网站: openjdk jmh Maven pom.xml &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.openjdk.jmh&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jmh-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.15&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.openjdk.jmh&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jmh-generator-annprocess&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.15&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 使用示例: import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder; import java.util.concurrent.TimeUnit; /** * Created by emacsist on 2017/6/12. */ @BenchmarkMode(Mode.Throughput) @OutputTimeUnit(TimeUnit.MICROSECONDS) @State(Scope.Thread) public class BenchmarkTest { @Benchmark public void testJSON(){ add(1, 3); } public static int add(int</description>
    </item>
    
    <item>
      <title>DSP系统中JSON解析性能对比Java 与 Golang</title>
      <link>https://emacsist.github.io/2017/06/12/dsp%E7%B3%BB%E7%BB%9F%E4%B8%ADjson%E8%A7%A3%E6%9E%90%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94java-%E4%B8%8E-golang/</link>
      <pubDate>Mon, 12 Jun 2017 16:21:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/12/dsp%E7%B3%BB%E7%BB%9F%E4%B8%ADjson%E8%A7%A3%E6%9E%90%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94java-%E4%B8%8E-golang/</guid>
      <description>Java中的性能 测试代码: ```bash package com.company.benchmark; import com.fasterxml.jackson.databind.JsonNode; import com.company.util.JsonUtil; import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder; import java.util.concurrent.TimeUnit; /** * Created by emacsist on 2017/6/12. */ @BenchmarkMode(Mode.SingleShotTime) @OutputTimeUnit(TimeUnit.NANOSECONDS) @State(Scope.Thread) public class BenchmarkJSON { @Benchmark public void testJSON(){ String json = &amp;quot;{\&amp;quot;id\&amp;quot;:\&amp;quot;1\&amp;quot;,\&amp;quot;user\&amp;quot;:{\&amp;quot;id\&amp;quot;:\&amp;quot;426b466fe00e698a2b718079afff962f\&amp;quot;},\&amp;quot;rule\&amp;quot;:[\&amp;quot;50284\&amp;quot;,\&amp;quot;56415\&amp;quot;,\&amp;quot;56416\&amp;quot;,\&amp;quot;56417\&amp;quot;,\&amp;quot;56418\&amp;quot;,\&amp;quot;56419\&amp;quot;,\&amp;quot;56420\&amp;quot;,\&amp;quot;56421\&amp;quot;,\&amp;quot;56422\&amp;quot;,\&amp;quot;56423\&amp;quot;,\&amp;quot;57034\&amp;quot;,\&amp;quot;57036\&amp;quot;,\&amp;quot;9078\&amp;quot;],\&amp;quot;imp\&amp;quot;:[{\&amp;quot;bidfloor\&amp;quot;:800,\&amp;quot;ext\&amp;quot;:{\&amp;quot;repeat\&amp;quot;:1},\&amp;quot;feed\&amp;quot;:{\&amp;quot;type\&amp;quot;:0},\&amp;quot;id\&amp;quot;:\&amp;quot;25263317556521\&amp;quot;,\&amp;quot;bidfloorcur\&amp;quot;:\&amp;quot;RMB\&amp;quot;,\&amp;quot;tagid\&amp;quot;:\&amp;quot;1000000002\&amp;quot;},{\&amp;quot;bidfloor\&amp;quot;:100000,\&amp;quot;ext\&amp;quot;:{\&amp;quot;repeat\&amp;quot;:1},\&amp;quot;feed\&amp;quot;:{\&amp;quot;type\&amp;quot;:0},\&amp;quot;id\&amp;quot;:\&amp;quot;25263317556522\&amp;quot;,\&amp;quot;bidfloorcur\&amp;quot;:\&amp;quot;RMB\&amp;quot;,\&amp;quot;tagid\&amp;quot;:\&amp;quot;1000000002\&amp;quot;}],\&amp;quot;app\&amp;quot;:{\&amp;quot;name\&amp;quot;:\&amp;quot;weibo\&amp;quot;,\&amp;quot;id\&amp;quot;:\&amp;quot;iamappidinwax\&amp;quot;},\&amp;quot;device\&amp;quot;:{\&amp;quot;geo\&amp;quot;:{},\&amp;quot;carrier\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;model\&amp;quot;:\&amp;quot;OPPO_OPPO A37t\&amp;quot;,\&amp;quot;ua\&amp;quot;:\&amp;quot;OPPO-OPPO A37t__weibo__6.11.1__android__android5.1\&amp;quot;,\&amp;quot;ip\&amp;quot;:\&amp;quot;113.227.98.236\&amp;quot;,\&amp;quot;ext\&amp;quot;:{},\&amp;quot;connectiontype\&amp;quot;:2,\&amp;quot;os\&amp;quot;:\&amp;quot;android\&amp;quot;,\&amp;quot;osv\&amp;quot;:\&amp;quot;5.1\&amp;quot;},\&amp;quot;dealid\&amp;quot;:\&amp;quot;47cd7e122ade3d12e312c5eb6e68bc6e\&amp;quot;,\&amp;quot;at\&amp;quot;:2}&amp;quot;; JsonNode node = JsonUtil.readTree(json); } public static void main(String[] args) throws RunnerException {</description>
    </item>
    
    <item>
      <title>https.protocols在Java中的使用</title>
      <link>https://emacsist.github.io/2017/03/02/https.protocols%E5%9C%A8java%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 02 Mar 2017 13:46:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/03/02/https.protocols%E5%9C%A8java%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>Caused by: java.io.EOFException: SSL peer shut down incorrectly 在服务器上，发现一个微博爬虫系统偶尔会报这种异常。Google 了下，在 Stackoverflow 上看到相关的回答。所以决定详细了解下这原理。 上面说，</description>
    </item>
    
    <item>
      <title>Spring Boot 多模块开发</title>
      <link>https://emacsist.github.io/2017/02/20/spring-boot-%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 20 Feb 2017 15:11:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/20/spring-boot-%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</guid>
      <description>本文假设项目名为 wxsdk，它有如下模块 wxsdk ├── bean ├── constant ├── dao ├── listener ├── service ├── utils ├── webapp ├── wx-plugin wxsdk 根目录下的 pom 文件如下 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;</description>
    </item>
    
    <item>
      <title>使用Spring session时 SessionListener 执行 2 次的分析</title>
      <link>https://emacsist.github.io/2017/02/14/%E4%BD%BF%E7%94%A8spring-session%E6%97%B6-sessionlistener-%E6%89%A7%E8%A1%8C-2-%E6%AC%A1%E7%9A%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 14 Feb 2017 16:56:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/14/%E4%BD%BF%E7%94%A8spring-session%E6%97%B6-sessionlistener-%E6%89%A7%E8%A1%8C-2-%E6%AC%A1%E7%9A%84%E5%88%86%E6%9E%90/</guid>
      <description>项目中使用 Spring-session 这个分布式 session 作为负载均衡的 session 中间件，以便统一 session 的管理。 然后我们自己添加了一个 HttpSessionListener, 但是发现它执行了 2 次，实在是太诡异了。（其实是太菜</description>
    </item>
    
    <item>
      <title>Java 一次启动失败分析案例</title>
      <link>https://emacsist.github.io/2017/02/09/java-%E4%B8%80%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Thu, 09 Feb 2017 11:32:22 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/09/java-%E4%B8%80%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/</guid>
      <description>今天，在部署外网的测试环境时，发现启动时报如下错误： Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c6d80000, 42991616, 0) failed; error=&#39;Cannot allocate memory&#39; (errno=12) # # There is insufficient memory for the Java Runtime Environment to continue. # Native memory allocation (malloc) failed to allocate 42991616 bytes for committing reserved memory. # An</description>
    </item>
    
    <item>
      <title>记录一次 MySQL 批量插入的优化</title>
      <link>https://emacsist.github.io/2017/01/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-mysql-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 11 Jan 2017 12:21:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/01/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-mysql-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>公司的DSP 项目,有个模块就是插入 RabbitMQ 里的 BID 的对象到 MySQL 然后再统计数据的业务. 但是, 发现这个 BID 批量插入的性能, 低得有点吓人. 平均 1K/s 的速度. 而这些</description>
    </item>
    
    <item>
      <title>Java中报java.lang.NoSuchMethodError: java.util.concurrent.ConcurrentHashMap.keySet()</title>
      <link>https://emacsist.github.io/2016/12/01/java%E4%B8%AD%E6%8A%A5java.lang.nosuchmethoderror-java.util.concurrent.concurrenthashmap.keyset/</link>
      <pubDate>Thu, 01 Dec 2016 19:06:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/12/01/java%E4%B8%AD%E6%8A%A5java.lang.nosuchmethoderror-java.util.concurrent.concurrenthashmap.keyset/</guid>
      <description>原因 公司某生产环境在Tomcat启动时，报如下错误: java.lang.NoSuchMethodError: java.util.concurrent.ConcurrentHashMap.keySet()Ljava/util/concurrent/ConcurrentHashMap$KeySetView; 然后 Google 了下，发现在Github上也有在讨论: gist.github.com 导致原因： 因为开发人员在本地使用的JD</description>
    </item>
    
    <item>
      <title>Java报 Exception in thread main java.lang.IllegalArgumentException: Comparison method violates its general contract</title>
      <link>https://emacsist.github.io/2016/11/21/java%E6%8A%A5-exception-in-thread-main-java.lang.illegalargumentexception-comparison-method-violates-its-general-contract/</link>
      <pubDate>Mon, 21 Nov 2016 16:26:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/11/21/java%E6%8A%A5-exception-in-thread-main-java.lang.illegalargumentexception-comparison-method-violates-its-general-contract/</guid>
      <description>问题 Nov 21, 2016 11:46:25 AM org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer invokeErrorHandler WARNING: Execution of Rabbit message listener failed, and no ErrorHandler has been set. org.springframework.amqp.rabbit.listener.ListenerExecutionFailedException: Listener method &#39;dequeue&#39; threw exception at org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter.invokeListenerMethod(MessageListenerAdapter.java:443) at org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter.onMessage(MessageListenerAdapter.java:344) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:546) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:472) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$001(SimpleMessageListenerContainer.java:58) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$1.invokeListener(SimpleMessageListenerContainer.java:107) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.invokeListener(SimpleMessageListenerContainer.java:608) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:454) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:471) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:455) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$300(SimpleMessageListenerContainer.java:58) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:548) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalArgumentException: Comparison method violates its general contract! at java.util.TimSort.mergeLo(TimSort.java:747) at java.util.TimSort.mergeAt(TimSort.java:483) at java.util.TimSort.mergeCollapse(TimSort.java:410) at</description>
    </item>
    
    <item>
      <title>logback启动停留在 Registering current configuration as safe fallback point</title>
      <link>https://emacsist.github.io/2016/07/28/logback%E5%90%AF%E5%8A%A8%E5%81%9C%E7%95%99%E5%9C%A8-registering-current-configuration-as-safe-fallback-point/</link>
      <pubDate>Thu, 28 Jul 2016 17:43:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/28/logback%E5%90%AF%E5%8A%A8%E5%81%9C%E7%95%99%E5%9C%A8-registering-current-configuration-as-safe-fallback-point/</guid>
      <description>问题 今天升级 Spring-data-redis(1.3.0 -&amp;gt; 1.6.4). Jedis(2.3.2 -&amp;gt; 2.7.3) 修改了Jar包的版本后,发现启动不了.启动信息一直停留在类似以下信息里: 17:00:05,421 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.weibosdk] to DEBUG 17:00:05,421 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to</description>
    </item>
    
    <item>
      <title>Mybatis代码片段</title>
      <link>https://emacsist.github.io/2016/07/21/mybatis%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</link>
      <pubDate>Thu, 21 Jul 2016 16:21:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/21/mybatis%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</guid>
      <description>批处理 &amp;lt;select id=&amp;quot;getAdsByGroupIds&amp;quot; resultMap=&amp;quot;adInfoWithGroupId&amp;quot;&amp;gt; SELECT ai.*, gam.group_id FROM group_ad_mapping AS gam LEFT JOIN ad_info AS ai ON gam.creative_id = ai.creative_id WHERE gam.group_id in &amp;lt;foreach collection=&amp;quot;list&amp;quot; item=&amp;quot;item&amp;quot; index=&amp;quot;index&amp;quot; separator=&amp;quot;,&amp;quot; open=&amp;quot;(&amp;quot; close=&amp;quot;)&amp;quot;&amp;gt; #{item} &amp;lt;/foreach&amp;gt; ORDER BY ai.create_at DESC &amp;lt;/select&amp;gt; 一对多 java类 public class SalesLead { private Long id; private Long clientId; private Integer userId; private Integer salesUserId; private Integer agentUserId; private Integer saleStatus =</description>
    </item>
    
    <item>
      <title>SpringMVC单元测试controller</title>
      <link>https://emacsist.github.io/2016/07/21/springmvc%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95controller/</link>
      <pubDate>Thu, 21 Jul 2016 11:34:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/21/springmvc%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95controller/</guid>
      <description>import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpServletRequest; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.test.context.web.WebAppConfiguration; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.MvcResult; import org.springframework.test.web.servlet.setup.MockMvcBuilders; import org.springframework.web.context.WebApplicationContext; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*; /** * Created by sky on 16-7-20. */ @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration @ContextConfiguration(&amp;quot;classpath:spring-servlet.xml&amp;quot;) public class TestMVC { @Autowired WebApplicationContext wac; @Autowired MockHttpSession session; @Autowired MockHttpServletRequest request; private MockMvc mockMvc; @Before public void setup() { this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(); }</description>
    </item>
    
    <item>
      <title>JVM性能排查神器 greys-anatomy</title>
      <link>https://emacsist.github.io/2016/07/15/jvm%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5%E7%A5%9E%E5%99%A8-greys-anatomy/</link>
      <pubDate>Fri, 15 Jul 2016 12:11:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/15/jvm%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5%E7%A5%9E%E5%99%A8-greys-anatomy/</guid>
      <description>这里只是记录下这个工具, 而不是使用手册, 因为Github greys-anatomy上已经有了非常详细的手册.</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习九之远程调试Tomcat自身</title>
      <link>https://emacsist.github.io/2016/07/07/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%9D%E4%B9%8B%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95tomcat%E8%87%AA%E8%BA%AB/</link>
      <pubDate>Thu, 07 Jul 2016 18:11:28 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/07/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%9D%E4%B9%8B%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95tomcat%E8%87%AA%E8%BA%AB/</guid>
      <description>如果我们想要在远程服务器上, 来调试Tomcat自身的话, 那应该如何做呢. 今天本想为Tomcat添加一个功能时, 发现配置一直没生效, 而且Tom</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习八之Valve组件</title>
      <link>https://emacsist.github.io/2016/07/06/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AB%E4%B9%8Bvalve%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 06 Jul 2016 18:09:09 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/06/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AB%E4%B9%8Bvalve%E7%BB%84%E4%BB%B6/</guid>
      <description>Tomcat内部Valve组件,与我们普通使用的Filter, Interceptor这些概念非常类似.只不过,Valve只是针对Tomcat</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习七之请求如何从Tomcat到我们的SpringMVC</title>
      <link>https://emacsist.github.io/2016/06/30/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%83%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E4%BB%8Etomcat%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84springmvc/</link>
      <pubDate>Thu, 30 Jun 2016 10:43:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/30/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%83%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E4%BB%8Etomcat%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84springmvc/</guid>
      <description>一次请求的调用栈 从上面的线程调用栈,可以看到一次请求的调用过程. 注意中间那些以Valve结尾的类,它是Tomcat的里的责任链的组件.每一个</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习六之加载webapps</title>
      <link>https://emacsist.github.io/2016/06/29/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AD%E4%B9%8B%E5%8A%A0%E8%BD%BDwebapps/</link>
      <pubDate>Wed, 29 Jun 2016 15:20:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/29/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AD%E4%B9%8B%E5%8A%A0%E8%BD%BDwebapps/</guid>
      <description>Tomcat中的层次 Catalina -&amp;gt; Server --- |---globalNamingResources |---namingContextListener |---多个Service --------------------| |---catalina.home |---Engine(每个Service最多一个) ---多个Container</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习五之Tomcat日志系统</title>
      <link>https://emacsist.github.io/2016/06/29/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%94%E4%B9%8Btomcat%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 29 Jun 2016 11:06:13 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/29/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%94%E4%B9%8Btomcat%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid>
      <description>juli 默认情况下，Tomcat使用自身的juli作为Tomcat内部的日志处理系统.它的源码，在Tomcat源码结构下的org.apache.j</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习四之Catalina类</title>
      <link>https://emacsist.github.io/2016/06/28/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%9B%9B%E4%B9%8Bcatalina%E7%B1%BB/</link>
      <pubDate>Tue, 28 Jun 2016 14:24:10 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/28/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%9B%9B%E4%B9%8Bcatalina%E7%B1%BB/</guid>
      <description>StringManager 每个包一个StringManager。这样子，对同一个包(以及同一个locale)来说，它只有一个实例的。实现原理: private static final Map&amp;lt;String, Map&amp;lt;Locale,StringManager&amp;gt;&amp;gt; managers = new Hashtable&amp;lt;&amp;gt;(); ke</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习三之SecurityClassLoad</title>
      <link>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%89%E4%B9%8Bsecurityclassload/</link>
      <pubDate>Mon, 27 Jun 2016 18:04:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%89%E4%B9%8Bsecurityclassload/</guid>
      <description>关于Java的 SecurityManager 默认情况下,JVM是不会启用SecurityManager的，想要开启，则需要在启动时指定-Djava.security.m</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习二之初始化classloader</title>
      <link>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%8C%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96classloader/</link>
      <pubDate>Mon, 27 Jun 2016 16:58:51 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%8C%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96classloader/</guid>
      <description>Main函数启动 源码org.apache.catalina.startup.Bootstrap这个是启动类，main函数就在这个类中. 第一件</description>
    </item>
    
    <item>
      <title>Tomcat 8 源码学习一之导入到IDEA</title>
      <link>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B9%8B%E5%AF%BC%E5%85%A5%E5%88%B0idea/</link>
      <pubDate>Mon, 27 Jun 2016 16:44:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/27/tomcat-8-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B9%8B%E5%AF%BC%E5%85%A5%E5%88%B0idea/</guid>
      <description>导入Tomcat源码 这里使用的Tomcat的版本为apache-tomcat-8.0.36，源码目录在/ihome/java/tomcat/</description>
    </item>
    
    <item>
      <title>使用SLF4J以及Spring中遇到的难以理解的问题</title>
      <link>https://emacsist.github.io/2016/06/20/%E4%BD%BF%E7%94%A8slf4j%E4%BB%A5%E5%8F%8Aspring%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E4%BB%A5%E7%90%86%E8%A7%A3%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 20 Jun 2016 11:10:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/20/%E4%BD%BF%E7%94%A8slf4j%E4%BB%A5%E5%8F%8Aspring%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E4%BB%A5%E7%90%86%E8%A7%A3%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>问题 问题1 Registering current configuration as safe fallback point 19:48:05,562 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration. 19:48:05,564 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@5f7db6c4 - Registering current configuration as safe fallback point 问题2 root of factory hierarchy SpringMVC启动时，就一直停留在这里 原因 以上这两个问题，</description>
    </item>
    
    <item>
      <title>关于Tomcat关闭时注意的问题</title>
      <link>https://emacsist.github.io/2016/06/17/%E5%85%B3%E4%BA%8Etomcat%E5%85%B3%E9%97%AD%E6%97%B6%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 17 Jun 2016 14:39:28 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/17/%E5%85%B3%E4%BA%8Etomcat%E5%85%B3%E9%97%AD%E6%97%B6%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>测试环境: Spring Boot MVC + RabbitMQ + Task + Tomcat Controller层 测试代码 @RequestMapping(&amp;quot;/world&amp;quot;) @ResponseBody public String hello() throws InterruptedException { System.out.println(&amp;quot;in controller&amp;quot;); for(int i=0; i&amp;lt;100000000; i++){ System.out.println(&amp;quot;in &amp;quot; + i + &amp;quot; hehe&amp;quot;); } System.out.println(&amp;quot;out controller&amp;quot;); return &amp;quot;OK.&amp;quot;; } 关闭方式： shutdown curl -X POST http://localhost:8080/shutdown 没有执行</description>
    </item>
    
    <item>
      <title>Java并发操作MySQL数据库的读写注意</title>
      <link>https://emacsist.github.io/2016/06/01/java%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%BB%E5%86%99%E6%B3%A8%E6%84%8F/</link>
      <pubDate>Wed, 01 Jun 2016 11:25:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/01/java%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%BB%E5%86%99%E6%B3%A8%E6%84%8F/</guid>
      <description>情景模拟： 线程1是一个task,然后分批select数据，然后可能会对这些select的结果进行更新 线程2是一个业务, 它也可能会对这些数据进</description>
    </item>
    
    <item>
      <title>Maven打包可运行Jar</title>
      <link>https://emacsist.github.io/2016/05/31/maven%E6%89%93%E5%8C%85%E5%8F%AF%E8%BF%90%E8%A1%8Cjar/</link>
      <pubDate>Tue, 31 May 2016 19:16:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/31/maven%E6%89%93%E5%8C%85%E5%8F%AF%E8%BF%90%E8%A1%8Cjar/</guid>
      <description>&amp;lt;plugins&amp;gt; &amp;lt;!-- 复制依赖的插件 --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-dependency-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;copy-dependencies&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;copy-dependencies&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;outputDirectory&amp;gt;${project.build.directory}/lib&amp;lt;/outputDirectory&amp;gt; &amp;lt;overWriteReleases&amp;gt;false&amp;lt;/overWriteReleases&amp;gt; &amp;lt;overWriteSnapshots&amp;gt;true&amp;lt;/overWriteSnapshots&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;archive&amp;gt; &amp;lt;manifest&amp;gt; &amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt; &amp;lt;classpathPrefix&amp;gt;lib/&amp;lt;/classpathPrefix&amp;gt; &amp;lt;mainClass&amp;gt;com.weibosdk.listener.boot.ListenerBootstrap&amp;lt;/mainClass&amp;gt; &amp;lt;/manifest&amp;gt; &amp;lt;/archive&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-shade-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;shade&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;createDependencyReducedPom&amp;gt;false&amp;lt;/createDependencyReducedPom&amp;gt; &amp;lt;transformers&amp;gt; &amp;lt;transformer implementation=&amp;quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&amp;quot;&amp;gt; &amp;lt;!-- Main函数所在类 --&amp;gt; &amp;lt;mainClass&amp;gt;com.weibosdk.listener.boot.ListenerBootstrap&amp;lt;/mainClass&amp;gt; &amp;lt;/transformer&amp;gt; &amp;lt;!-- S</description>
    </item>
    
    <item>
      <title>Java监控方法调用树以及方法性能</title>
      <link>https://emacsist.github.io/2016/05/23/java%E7%9B%91%E6%8E%A7%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%A0%91%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95%E6%80%A7%E8%83%BD/</link>
      <pubDate>Mon, 23 May 2016 15:57:18 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/23/java%E7%9B%91%E6%8E%A7%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%A0%91%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95%E6%80%A7%E8%83%BD/</guid>
      <description>JETM 下载 Download 使用 @Test public void hello() throws InterruptedException { BasicEtmConfigurator.configure(true); etmMonitor.start(); EtmPoint etmPoint = etmMonitor.createPoint(&amp;quot;SETest:hello&amp;quot;); System.out.println(&amp;quot;hello world&amp;quot;); Thread.currentThread().sleep(2 * 1000); nested(); nested(); sayf(); etmPoint.collect(); // visualize results etmMonitor.render(new SimpleTextRenderer()); etmMonitor.stop(); } private static void nested() throws InterruptedException { EtmPoint etmPoint = etmMonitor.createPoint(&amp;quot;SETest:nested&amp;quot;); System.out.println(&amp;quot;in nested&amp;quot;); Thread.currentThread().sleep(2*1000); etmPoint.collect(); } private static void sayf() throws InterruptedException { EtmPoint etmPoint = etmMonitor.createPoint(&amp;quot;SETest:sayf&amp;quot;); System.out.println(&amp;quot;in nested&amp;quot;); Thread.currentThread().sleep(2*1000); nested(); etmPoint.collect(); } 输出</description>
    </item>
    
    <item>
      <title>ZooKeeper之发布-订阅例子</title>
      <link>https://emacsist.github.io/2016/05/13/zookeeper%E4%B9%8B%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Fri, 13 May 2016 17:41:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/13/zookeeper%E4%B9%8B%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E4%BE%8B%E5%AD%90/</guid>
      <description>pubisher public static void main(String[] args) throws Exception { RetryPolicy retryPolicy = new RetryNTimes(3, 2 * 1000); CuratorFramework cf = CuratorFrameworkFactory.newClient(&amp;quot;127.0.0.1:2181&amp;quot;, retryPolicy); cf.start(); Stat stat = cf.checkExists().forPath(&amp;quot;/topic&amp;quot;); if (stat == null) { cf.create().forPath(&amp;quot;/topic&amp;quot;); } cf.setData().forPath(&amp;quot;/topic&amp;quot;, &amp;quot;hello new data&amp;quot;.getBytes()); cf.close(); } subscriber public static void main(String[] args) throws Exception { RetryPolicy retryPolicy = new RetryNTimes(3, 2 * 1000); CuratorFramework cf = CuratorFrameworkFactory.newClient(&amp;quot;127.0.0.1:2181&amp;quot;, retryPolicy); cf.getCuratorListenable().addListener(new CuratorListener() { @Override public void eventReceived(CuratorFramework client,</description>
    </item>
    
    <item>
      <title>ZooKeeper之分布式协调例子</title>
      <link>https://emacsist.github.io/2016/05/13/zookeeper%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Fri, 13 May 2016 15:29:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/13/zookeeper%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E4%BE%8B%E5%AD%90/</guid>
      <description>首先，启动ZooKeeper集群模式或独立模式. 创建三个程序（即三个不同的Java进程，注意，是进程，不是线程）来模拟分布式协调 POM 依赖 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;</description>
    </item>
    
    <item>
      <title>ZooKeeper服务器搭建</title>
      <link>https://emacsist.github.io/2016/05/12/zookeeper%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 12 May 2016 18:22:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/12/zookeeper%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</guid>
      <description>前提是要安装好Java环境 ^_^ 安装 Download 然后解压到安装目录即可.这里假设是安装在/ihome/java/zookeeper-3.4.8 启动模式 配置</description>
    </item>
    
    <item>
      <title>如果是我startup JavaWeb项目开发，我会这样子做</title>
      <link>https://emacsist.github.io/2016/04/29/%E5%A6%82%E6%9E%9C%E6%98%AF%E6%88%91startup-javaweb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%88%91%E4%BC%9A%E8%BF%99%E6%A0%B7%E5%AD%90%E5%81%9A/</link>
      <pubDate>Fri, 29 Apr 2016 14:13:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/04/29/%E5%A6%82%E6%9E%9C%E6%98%AF%E6%88%91startup-javaweb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%88%91%E4%BC%9A%E8%BF%99%E6%A0%B7%E5%AD%90%E5%81%9A/</guid>
      <description>Maven 模块化开发 按功能模块？ 如果按功能分模块的话，比较复杂，难免会有代码循环依赖的问题。 按分层模块？ 这个相对比较简单点。 然后还要区分不同的环境下</description>
    </item>
    
    <item>
      <title>Java技术手册学习笔记-线程生命周期</title>
      <link>https://emacsist.github.io/2016/02/19/java%E6%8A%80%E6%9C%AF%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Fri, 19 Feb 2016 23:06:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/19/java%E6%8A%80%E6%9C%AF%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>Java线程状态 NEW 已经创建线程,但还没在线程对象上调用 start() 方法。所有线程一开始都处于这个状态 RUNNABLE 线程正在运行,或者当操作系统调度线程时可以运行。</description>
    </item>
    
    <item>
      <title>[转]Java 中正确使用 hashCode 和 equals 方法</title>
      <link>https://emacsist.github.io/2016/02/16/%E8%BD%ACjava-%E4%B8%AD%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8-hashcode-%E5%92%8C-equals-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 16 Feb 2016 17:36:27 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/16/%E8%BD%ACjava-%E4%B8%AD%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8-hashcode-%E5%92%8C-equals-%E6%96%B9%E6%B3%95/</guid>
      <description>原文链接 在这篇文章中，我将告诉大家我对hashCode和equals方法的理解。我将讨论他们的默认实现，以及如何正确的重写他们。我也将使用A</description>
    </item>
    
    <item>
      <title>Java中关于数组转换成List的注意事项</title>
      <link>https://emacsist.github.io/2016/02/14/java%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%88%90list%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Sun, 14 Feb 2016 15:25:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/14/java%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%88%90list%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>问题代码 package org.emacsist; import java.util.Arrays; import java.util.List; /** * Created by sky on 16-2-14. */ public class TestHello { public static void main(String[] args) { List&amp;lt;String&amp;gt; arg = Arrays.asList(args); arg.add(&amp;quot;出现问题了.&amp;quot;); System.out.println(arg); } } 一运行，就报如</description>
    </item>
    
    <item>
      <title>Spring Boot 学习之基本概念及使用</title>
      <link>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 14 Feb 2016 12:11:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>官方建议的代码目录 com +- example +- myproject +- Application.java | +- domain | +- Customer.java | +- CustomerRepository.java | +- service | +- CustomerService.java | +- web +- CustomerController.java Application.java 典型的代码 package com.example.myproject; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } @ComponentScan</description>
    </item>
    
    <item>
      <title>Spring Boot 学习之Hello World（一）</title>
      <link>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8Bhello-world%E4%B8%80/</link>
      <pubDate>Sun, 14 Feb 2016 11:17:50 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/02/14/spring-boot-%E5%AD%A6%E4%B9%A0%E4%B9%8Bhello-world%E4%B8%80/</guid>
      <description>POM 文件 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myproject&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.0.BUILD-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;!-- Additional lines to be added here... --&amp;gt; &amp;lt;!-- (you don&#39;t need this if you are using a .RELEASE version) --&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/snapshot&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt;&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/milestone&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;pluginRepositories&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/snapshot&amp;lt;/url&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://repo.spring.io/milestone&amp;lt;/url&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;/pluginRepositories&amp;gt; &amp;lt;/project&amp;gt; HelloWorldSpringBoot.java package org.emacsist; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</description>
    </item>
    
    <item>
      <title>一次生产环境Java应用性能排查</title>
      <link>https://emacsist.github.io/2016/01/27/%E4%B8%80%E6%AC%A1%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83java%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Wed, 27 Jan 2016 15:04:20 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/27/%E4%B8%80%E6%AC%A1%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83java%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5/</guid>
      <description>问题 生产环境上，有客户反应某个页面，点击时非常慢 然后，有个测试同事，这个测试的账号给我登录，然后亲自重现排查下原因。发现，该页面，第一次加载</description>
    </item>
    
    <item>
      <title>Java常见应用的性能优化</title>
      <link>https://emacsist.github.io/2016/01/26/java%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 26 Jan 2016 17:05:37 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/26/java%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>总诀式 减少网络连接次数 减小网络传输数据 添加缓存 分布式 Redis 式 在同一线程的操作里，尽可能合并redis的操作(pipeline)（减少网络连接次数</description>
    </item>
    
    <item>
      <title>“[翻译]用Java实现自定义的线程池”</title>
      <link>https://emacsist.github.io/2016/01/25/%E7%BF%BB%E8%AF%91%E7%94%A8java%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Mon, 25 Jan 2016 15:07:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/25/%E7%BF%BB%E8%AF%91%E7%94%A8java%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>原文 让我们用Java来实现自定义的线程池. 让我们首先定义一个类，它拥有两个方法enqueue和dequeue. 这个类的dequeue方法将充</description>
    </item>
    
    <item>
      <title>Apache AB 简单压力测试</title>
      <link>https://emacsist.github.io/2016/01/20/apache-ab-%E7%AE%80%E5%8D%95%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 20 Jan 2016 19:17:55 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/20/apache-ab-%E7%AE%80%E5%8D%95%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</guid>
      <description>以下的测试使用环境为ubuntu 安装ab工具 sudo apt-get install apache2-utils 使用 直接写入到 requestBody ab -T &amp;quot;Content-Type: application/json&amp;quot; -p /tmp/ab.data.user -n 1000 -c 500 http://localhost:8080/hello/action.do GET ab -n 1000 -c 500 http://localhost:8080/hello/action.do POST ab -T &amp;quot;application/x-www-form-urlencoded&amp;quot; -p /tmp/ab.data.user -n 1000 -c 500 http://localhost:8080/hello/action.do ab.data</description>
    </item>
    
    <item>
      <title>Nginx SSL 结合Tomcat 重定向URL变成HTTP的问题</title>
      <link>https://emacsist.github.io/2016/01/19/nginx-ssl-%E7%BB%93%E5%90%88tomcat-%E9%87%8D%E5%AE%9A%E5%90%91url%E5%8F%98%E6%88%90http%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 19 Jan 2016 15:42:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/19/nginx-ssl-%E7%BB%93%E5%90%88tomcat-%E9%87%8D%E5%AE%9A%E5%90%91url%E5%8F%98%E6%88%90http%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>问题 由于要配置服务器(Nginx + Tomcat）的SSL的问题（Nginx同时监听HTTP和HTTPS)，但是，如果用户访问的是HTTPS协</description>
    </item>
    
    <item>
      <title>[翻译]Java -XX:&#43;PrintFlagsFinal命令行参数详解</title>
      <link>https://emacsist.github.io/2016/01/11/%E7%BF%BB%E8%AF%91java-xx-printflagsfinal%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 11 Jan 2016 20:49:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/11/%E7%BF%BB%E8%AF%91java-xx-printflagsfinal%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid>
      <description>原文出处 可能要翻墙&amp;hellip;你懂的&amp;hellip; 昨天在Google了一些与GC调优相关的资料后, 我无意中发现一些JVM标识是我从来没</description>
    </item>
    
    <item>
      <title>生产环境部署Tomcat配置</title>
      <link>https://emacsist.github.io/2016/01/11/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2tomcat%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 11 Jan 2016 18:24:56 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/11/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2tomcat%E9%85%8D%E7%BD%AE/</guid>
      <description>操作系统设置 limit ╭─sky@sky-linux ~ ╰─➤ ulimit -a -t: cpu time (seconds) unlimited -f: file size (blocks) unlimited -d: data seg size (kbytes) unlimited -s: stack size (kbytes) 8192 -c: core file size (blocks) 0 -m: resident set size (kbytes) unlimited -u: processes 63555 -n: file descriptors 1024 -l: locked-in-memory</description>
    </item>
    
    <item>
      <title>[转]SQL 中各种join</title>
      <link>https://emacsist.github.io/2016/01/07/%E8%BD%ACsql-%E4%B8%AD%E5%90%84%E7%A7%8Djoin/</link>
      <pubDate>Thu, 07 Jan 2016 17:56:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/07/%E8%BD%ACsql-%E4%B8%AD%E5%90%84%E7%A7%8Djoin/</guid>
      <description>一图胜千言 来源 stackoverflow.com</description>
    </item>
    
    <item>
      <title>Java Thread中的线程执行控制</title>
      <link>https://emacsist.github.io/2016/01/05/java-thread%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 05 Jan 2016 16:36:03 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/05/java-thread%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%8E%A7%E5%88%B6/</guid>
      <description>join是Thread对象里的方法.签名如下: public final void join() throws InterruptedException { join(0); } 它的作用是: 当某个Thread调用join方法时，其他线程，必须要等待这个线</description>
    </item>
    
    <item>
      <title>Spring AOP 学习</title>
      <link>https://emacsist.github.io/2016/01/05/spring-aop-%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 05 Jan 2016 11:37:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/05/spring-aop-%E5%AD%A6%E4%B9%A0/</guid>
      <description>AOP 面向切面编程.百度百科里的定义是：在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期</description>
    </item>
    
    <item>
      <title>Java使用Javassist修改class文件</title>
      <link>https://emacsist.github.io/2015/12/31/java%E4%BD%BF%E7%94%A8javassist%E4%BF%AE%E6%94%B9class%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 31 Dec 2015 19:52:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/31/java%E4%BD%BF%E7%94%A8javassist%E4%BF%AE%E6%94%B9class%E6%96%87%E4%BB%B6/</guid>
      <description>修改方法 package org.test; /** * Created by sky on 15-12-31. */ public class Bool { public static void main(String[] args) throws InterruptedException { new Bool().run(); } public void run() throws InterruptedException { Thread.sleep(1000 * 5); System.out.println(&amp;quot;default&amp;quot;); } } 为方法前后添加性能统计时间 package org.javassist.demo; import javassist.*; import java.io.IOException; /** * Created by sky on 15-12-31. */ public class</description>
    </item>
    
    <item>
      <title>Tomcat 基本概念</title>
      <link>https://emacsist.github.io/2015/12/28/tomcat-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 28 Dec 2015 17:35:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/28/tomcat-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>框架图 纯手工打造&amp;hellip; |----service1(最少要有一个service) |----service2 |------connector1(http) |---host1 |----service3 |------connector2(https) |---host2 Server ----|----service4--</description>
    </item>
    
    <item>
      <title>Spring 中文响应处理</title>
      <link>https://emacsist.github.io/2015/12/28/spring-%E4%B8%AD%E6%96%87%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 28 Dec 2015 14:19:18 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/28/spring-%E4%B8%AD%E6%96%87%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86/</guid>
      <description>为什么 CharacterEncodingFilter 没有生效 &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;CharacterEncodingFilter&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;utf-8&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;forceEncoding&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;filter-mapping&amp;gt; &amp;lt;filter-name&amp;gt;CharacterEncodingFilter&amp;lt;/filter-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/filter-mapping&amp;gt; 这个配置， 只有在 Controller 里，调用 HttpServletResponse 直接写数据时才会生效的 .如果是直接利用HttpServletRe</description>
    </item>
    
    <item>
      <title>Spring中添加@ControllerAdvice增强Controller</title>
      <link>https://emacsist.github.io/2015/12/28/spring%E4%B8%AD%E6%B7%BB%E5%8A%A0controlleradvice%E5%A2%9E%E5%BC%BAcontroller/</link>
      <pubDate>Mon, 28 Dec 2015 12:37:16 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/28/spring%E4%B8%AD%E6%B7%BB%E5%8A%A0controlleradvice%E5%A2%9E%E5%BC%BAcontroller/</guid>
      <description>@ControllerAdvice 注解，会应用到所有的Controller中的@RequestMapping注解的方法中. 配置 要注意，经自己测试，这个注解的类，要被 org.</description>
    </item>
    
    <item>
      <title>彻底了解Spring-中-RabbitMQ配置的concurrency-和-task-executor（异步)</title>
      <link>https://emacsist.github.io/2015/12/18/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor%E5%BC%82%E6%AD%A5/</link>
      <pubDate>Fri, 18 Dec 2015 14:05:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/18/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor%E5%BC%82%E6%AD%A5/</guid>
      <description>上一篇只是说了同步彻底了解Spring 中 RabbitMQ配置的concurrency 和 task-executor. 现在来了解异步的情况.（感谢同事聪哥的指引) 如果li</description>
    </item>
    
    <item>
      <title>Nginx负载均衡Tomcat切换注意事项</title>
      <link>https://emacsist.github.io/2015/12/17/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1tomcat%E5%88%87%E6%8D%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Thu, 17 Dec 2015 18:46:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/17/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1tomcat%E5%88%87%E6%8D%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>在生产环境使用nginx+tomcat做负载均衡。众所周知，tomcat的shutdown在生产环境是很慢的，如果这时候，不先修改nginx</description>
    </item>
    
    <item>
      <title>Java for-each 修改问题</title>
      <link>https://emacsist.github.io/2015/12/17/java-for-each-%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 17 Dec 2015 17:59:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/17/java-for-each-%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98/</guid>
      <description>问题 有一次在测试时，发现程序报如下类似错误: Exception in thread &amp;quot;main&amp;quot; java.util.ConcurrentModificationException at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901) at java.util.ArrayList$Itr.next(ArrayList.java:851) 原因 这是因为在使用for-each时，修改了for-each的对象(比如调用了</description>
    </item>
    
    <item>
      <title>彻底了解Spring 中 RabbitMQ配置的concurrency 和 task-executor</title>
      <link>https://emacsist.github.io/2015/12/17/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor/</link>
      <pubDate>Thu, 17 Dec 2015 12:12:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/17/%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3spring-%E4%B8%AD-rabbitmq%E9%85%8D%E7%BD%AE%E7%9A%84concurrency-%E5%92%8C-task-executor/</guid>
      <description>问题 在生产环境中，突然发现有个Tomcat报如下类似错误: Caused by: org.springframework.amqp.UncategorizedAmqpException: java.util.concurrent.TimeoutException: Timed out waiting for startup at org.springframework.amqp.rabbit.connection.RabbitUtils.convertRabbitAccessException(RabbitUtils.java:118) at org.springframework.amqp.rabbit.connection.RabbitAccessor.convertRabbitAccessException(RabbitAccessor.java:106) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:365) at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:167) ... 59 common frames omitted Caused by: java.util.concurrent.TimeoutException: Timed out waiting for startup at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.getStartupException(SimpleMessageListenerContainer.java:512) at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doStart(SimpleMessageListenerContainer.java:337) at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:363) ... 60 common frames omitted</description>
    </item>
    
    <item>
      <title>OkHttp 中注意事项</title>
      <link>https://emacsist.github.io/2015/12/15/okhttp-%E4%B8%AD%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Tue, 15 Dec 2015 10:44:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/15/okhttp-%E4%B8%AD%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>问题 在生产环境中，突然发现RabbitMQ中的某条队列的数据没有被消费掉，而是一直停留在那里，并到好几个小时了，消息一直在Unacknowl</description>
    </item>
    
    <item>
      <title>Spring 与 RabbitMQ 结合配置以及注意事项</title>
      <link>https://emacsist.github.io/2015/12/14/spring-%E4%B8%8E-rabbitmq-%E7%BB%93%E5%90%88%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 14 Dec 2015 18:27:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/14/spring-%E4%B8%8E-rabbitmq-%E7%BB%93%E5%90%88%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>主要是listener-container配置 &amp;lt;rabbit:listener-container connection-factory=&amp;quot;rabbitConnectionFactory&amp;quot; error-handler=&amp;quot;MessageErrorHandler&amp;quot; task-executor=&amp;quot;myExecutor&amp;quot; concurrency=&amp;quot;10&amp;quot;&amp;gt; &amp;lt;/rabbit:listener-container&amp;gt; 属性说明 task-executor 这个属性表示，在执行listener时，使用的线程行为。默认为Simpl</description>
    </item>
    
    <item>
      <title>tomcat 远程调试</title>
      <link>https://emacsist.github.io/2015/12/10/tomcat-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</link>
      <pubDate>Thu, 10 Dec 2015 13:30:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/10/tomcat-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</guid>
      <description>配置tomcat环境变量 cd $TOMCAT_HOME/bin/ 添加或编辑`setenv.sh` setenv.sh 文件内容 #!/bin/sh CATALINA_OPTS=&amp;quot;-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -XX:+PrintGCDetails -Xloggc:gc.log -XX:+DisableExplicitGC -Xdebug -Xrunjdwp:transport=dt_socket,address=8888,server=y,suspend=n&amp;quot; 参数说明 -Xdebug 表示开启debug address 调试监听的地址和端口。直接</description>
    </item>
    
    <item>
      <title>RabbitMQ中的基本概念</title>
      <link>https://emacsist.github.io/2015/12/06/rabbitmq%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 06 Dec 2015 19:46:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/06/rabbitmq%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>RabbitMQ的工作流程 ----------------------- virtual host ------------------------------ | -&amp;gt; queue | |publisher -&amp;gt; exchange -&amp;gt; [binding] -&amp;gt; queue -&amp;gt; consumer | | -&amp;gt; queue | ----------------------- virtual host ------------------------------ RabbitMQ是通过virtual host的概念来实行环境隔</description>
    </item>
    
    <item>
      <title>RabbitMQ 在Mac上的安装与使用</title>
      <link>https://emacsist.github.io/2015/12/05/rabbitmq-%E5%9C%A8mac%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 05 Dec 2015 12:34:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/05/rabbitmq-%E5%9C%A8mac%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>安装 brew update brew install rabbitmq 这样子安装的话, RabbitMQ的脚本是安装到/usr/local/sbin这个目录里的.并且不会自动添加到你的PATH里,所</description>
    </item>
    
    <item>
      <title>Tomcat控制脚本</title>
      <link>https://emacsist.github.io/2015/12/04/tomcat%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Fri, 04 Dec 2015 15:14:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/04/tomcat%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC/</guid>
      <description>因为经常需要部署Tomcat服务器，所以才有了这个脚本. #!/bin/bash ############################################################### # #author: Zhiyong Yang #date: 2015-12-4 #email: emacsist@qq.com # ############################################################### TOMCAT_HOME_DIR=&#39;/home/yang/Java/apache-tomcat-7.0 (copy).63&#39; function stop(){ if checkIsExist ; then &amp;quot;${TOMCAT_HOME_DIR}&amp;quot;/bin/shutdown.sh sleep 1 while checkIsExist ; do sleep 2 kill -0 $(getPID) done fi } function getPID(){ # replace the grep content</description>
    </item>
    
    <item>
      <title>Spring 中的 @Async 和 @Scheduled 理解</title>
      <link>https://emacsist.github.io/2015/12/04/spring-%E4%B8%AD%E7%9A%84-async-%E5%92%8C-scheduled-%E7%90%86%E8%A7%A3/</link>
      <pubDate>Fri, 04 Dec 2015 11:00:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/04/spring-%E4%B8%AD%E7%9A%84-async-%E5%92%8C-scheduled-%E7%90%86%E8%A7%A3/</guid>
      <description>@Async spring-test.xml文件 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xmlns:task=&amp;quot;http://www.springframework.org/schema/task&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd&amp;quot;&amp;gt; &amp;lt;task:annotation-driven scheduler=&amp;quot;myScheduler&amp;quot; executor=&amp;quot;myExecutor&amp;quot;/&amp;gt; &amp;lt;task:executor id=&amp;quot;myExecutor&amp;quot; pool-size=&amp;quot;20&amp;quot;/&amp;gt; &amp;lt;task:scheduler id=&amp;quot;myScheduler&amp;quot; pool-size=&amp;quot;5&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;hello&amp;quot; class=&amp;quot;hello.world.task.TestTask&amp;quot; /&amp;gt; &amp;lt;/beans&amp;gt; spring官网例子 import java.util.concurrent.Future; import org.springframework.scheduling.annotation.Async; import org.springframework.scheduling.annotation.AsyncResult; import org.springframework.stereotype.Service; import org.springframework.web.client.RestTemplate; @Service public class GitHubLookupService</description>
    </item>
    
    <item>
      <title>IDEA 和 Eclipse 调试多线程应用</title>
      <link>https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/</link>
      <pubDate>Thu, 03 Dec 2015 15:38:10 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/</guid>
      <description>起源 从Eclipse切换到IDEA后，在进行多线程调试的时候，发现它阻塞了其他所有的线程，但是在同事的Eclipse上进行调试的时候，却发现</description>
    </item>
    
    <item>
      <title>Spring Rabbit使用</title>
      <link>https://emacsist.github.io/2015/11/30/spring-rabbit%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 30 Nov 2015 18:36:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/30/spring-rabbit%E4%BD%BF%E7%94%A8/</guid>
      <description>Demo &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xmlns:task=&amp;quot;http://www.springframework.org/schema/task&amp;quot; xmlns:aop=&amp;quot;http://www.springframework.org/schema/aop&amp;quot; xmlns:rabbit=&amp;quot;http://www.springframework.org/schema/rabbit&amp;quot; xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot; xmlns:mvc=&amp;quot;http://www.springframework.org/schema/mvc&amp;quot; xsi:schemaLocation=&amp;quot; http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.1.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&amp;quot;&amp;gt; &amp;lt;bean id=&amp;quot;rabbitConnectionFactory&amp;quot; class=&amp;quot;org.springframework.amqp.rabbit.connection.CachingConnectionFactory&amp;quot;&amp;gt; &amp;lt;constructor-arg value=&amp;quot;10.0.0.11&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;guest&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;guest&amp;quot;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;quot;converter&amp;quot; class=&amp;quot;org.springframework.amqp.support.converter.JsonMessageConverter&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;defaultCharset&amp;quot; value=&amp;quot;UTF-8&amp;quot;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;rabbit:template id=&amp;quot;rabbitTemplate&amp;quot; connection-factory=&amp;quot;rabbitConnectionFactory&amp;quot; message-converter=&amp;quot;converter&amp;quot; /&amp;gt; &amp;lt;rabbit:admin connection-factory=&amp;quot;rabbitConnectionFactory&amp;quot;/&amp;gt; &amp;lt;rabbit:queue name=&amp;quot;ttt.ttt.tt.tt&amp;quot;/&amp;gt; &amp;lt;/beans&amp;gt; Java文件 package yourcompany; import com.yourcompany.pojo.ParamsPojo; import org.junit.Test;</description>
    </item>
    
    <item>
      <title>Spring Task 中集群带来的问题</title>
      <link>https://emacsist.github.io/2015/11/27/spring-task-%E4%B8%AD%E9%9B%86%E7%BE%A4%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 27 Nov 2015 10:59:11 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/27/spring-task-%E4%B8%AD%E9%9B%86%E7%BE%A4%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>问题 当多台Tomcat同时进行调度时，如果没有处理好并发的问题，就会出现本应只是执行一次的Task，执行了两次（比如修改DB）。 DB解决办法</description>
    </item>
    
    <item>
      <title>Spring里的Executor使用</title>
      <link>https://emacsist.github.io/2015/11/26/spring%E9%87%8C%E7%9A%84executor%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 26 Nov 2015 12:02:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/26/spring%E9%87%8C%E7%9A%84executor%E4%BD%BF%E7%94%A8/</guid>
      <description>在生产环境中，发现我们Tomcat的应用导致超高的CPU（170%)及负载(90+)[Intel&amp;reg; Xeon&amp;reg; CPU E31230 @ 3.20GHz 四核心，8线程]. 原因 经</description>
    </item>
    
    <item>
      <title>Spring Redis 使用</title>
      <link>https://emacsist.github.io/2015/11/23/spring-redis-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 23 Nov 2015 18:28:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/spring-redis-%E4%BD%BF%E7%94%A8/</guid>
      <description>Pipelining 共享一条connection，以减少因为网络连接导致的性能问题: List&amp;lt;Object&amp;gt; results = stringRedisTemplate.executePipelined( new RedisCallback&amp;lt;Object&amp;gt;() { public Object doInRedis(RedisConnection connection) throws DataAccessException { StringRedisConnection stringRedisConn = (StringRedisConnection)connection; for(int i=0; i&amp;lt; batchSize; i++) { stringRedisConn.rPop(&amp;quot;myqueue&amp;quot;); } return null; } }); transaction redis中</description>
    </item>
    
    <item>
      <title>找出Java最耗CPU或IO的线程</title>
      <link>https://emacsist.github.io/2015/11/23/%E6%89%BE%E5%87%BAjava%E6%9C%80%E8%80%97cpu%E6%88%96io%E7%9A%84%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 23 Nov 2015 12:33:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/%E6%89%BE%E5%87%BAjava%E6%9C%80%E8%80%97cpu%E6%88%96io%E7%9A%84%E7%BA%BF%E7%A8%8B/</guid>
      <description>查看某进程及某线程占用CPU的例子 jps: 列出java进程,找到pid. pidstat -p pid -u 1 3 -u -t: 查看pid的进程所有线程的cpu使用情况. jstack -l pid &amp;gt; /tmp/thread.txt: 导出指</description>
    </item>
    
    <item>
      <title>Spring MVC 里加载两次Bean的解决办法</title>
      <link>https://emacsist.github.io/2015/11/23/spring-mvc-%E9%87%8C%E5%8A%A0%E8%BD%BD%E4%B8%A4%E6%AC%A1bean%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Mon, 23 Nov 2015 11:31:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/spring-mvc-%E9%87%8C%E5%8A%A0%E8%BD%BD%E4%B8%A4%E6%AC%A1bean%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>SpringMVC 里上下文的概念 web.xml 里的配置 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; version=&amp;quot;2.5&amp;quot;&amp;gt; &amp;lt;display-name&amp;gt;uniweibov2&amp;lt;/display-name&amp;gt; &amp;lt;listener&amp;gt; &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt; &amp;lt;/listener&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath:spring.xml&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;mvc-dispatcher&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath:spring-servlet.xml&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;mvc-dispatcher&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;/web-app&amp;gt; 在SpringMVC里，有两种上下文。一种是：App</description>
    </item>
    
    <item>
      <title>Spring session 添加HttpSessionListener</title>
      <link>https://emacsist.github.io/2015/11/23/spring-session-%E6%B7%BB%E5%8A%A0httpsessionlistener/</link>
      <pubDate>Mon, 23 Nov 2015 10:44:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/23/spring-session-%E6%B7%BB%E5%8A%A0httpsessionlistener/</guid>
      <description>这时介绍的版本，是基于以下版本: &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.session&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-session&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.0.M1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 先上示例demo &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd&amp;quot;&amp;gt; &amp;lt;context:annotation-config /&amp;gt; &amp;lt;bean id=&amp;quot;v2redisConnectionFactory&amp;quot; class=&amp;quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&amp;quot; p:host-name=&amp;quot;${config.redis.host}&amp;quot; p:port=&amp;quot;${redis.port}&amp;quot; p:use-pool=&amp;quot;true&amp;quot; p:database=&amp;quot;${redis.database}&amp;quot; p:password=&amp;quot;${config.redis.password}&amp;quot; /&amp;gt; &amp;lt;bean id=&amp;quot;stringRedisSerializer&amp;quot; class=&amp;quot;org.springframework.data.redis.serializer.StringRedisSerializer&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;genericToStringSerializer&amp;quot; class=&amp;quot;org.springframework.data.redis.serializer.GenericToStringSerializer&amp;quot;&amp;gt; &amp;lt;constructor-arg type=&amp;quot;java.lang.Class&amp;quot; value=&amp;quot;java.lang.Object&amp;quot;&amp;gt;&amp;lt;/constructor-arg&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;quot;object&amp;quot; class=&amp;quot;java.lang.Object&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;v2redisTemplate&amp;quot; class=&amp;quot;org.springframework.data.redis.core.RedisTemplate&amp;quot; p:connection-factory-ref=&amp;quot;v2redisConnectionFactory&amp;quot; p:keySerializer-ref=&amp;quot;stringRedisSerializer&amp;quot;</description>
    </item>
    
    <item>
      <title>Spring Task 使用</title>
      <link>https://emacsist.github.io/2015/11/10/spring-task-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 10 Nov 2015 16:45:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/10/spring-task-%E4%BD%BF%E7%94%A8/</guid>
      <description>使用 &amp;lt;bean id=&amp;quot;updateRsstask&amp;quot; class=&amp;quot;xxxx.xxx.xx&amp;quot; /&amp;gt; &amp;lt;task:executor id=&amp;quot;myexecutor&amp;quot; pool-size=&amp;quot;10&amp;quot; /&amp;gt; &amp;lt;task:scheduler id=&amp;quot;myscheduler&amp;quot; pool-size=&amp;quot;10&amp;quot; /&amp;gt; &amp;lt;task:scheduled-tasks scheduler=&amp;quot;myscheduler&amp;quot;&amp;gt; &amp;lt;!-- 每隔一个小时更新rss --&amp;gt; &amp;lt;task:scheduled ref=&amp;quot;updateRssTask&amp;quot; method=&amp;quot;execute&amp;quot; cron=&amp;quot;0 0 * * * *&amp;quot; /&amp;gt; &amp;lt;/task:scheduled-tasks&amp;gt; 注意事项 &amp;lt;task:schedule-tasks scheduler=&amp;quot;myscheduler&amp;quot;&amp;gt; 这里的scheduler必须显式指定，否则它只会</description>
    </item>
    
    <item>
      <title>Jetty学习笔记</title>
      <link>https://emacsist.github.io/2015/11/09/jetty%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 09 Nov 2015 15:21:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/09/jetty%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>jetty.home 和 jetty.base 可以看作： ${jetty.home} 是jetty的安装目录 ${jetty.base} 是实例目录 Jetty常用命令 查看帮助 java -jar ${jetty.home}/start.jar --help 指定jetty.home和jetty.base java -jar /home/yang/Java/jetty-distribution-9.2.13.v20150730/start.jar \</description>
    </item>
    
    <item>
      <title>ubuntu下使用intellij</title>
      <link>https://emacsist.github.io/2015/11/02/ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8intellij/</link>
      <pubDate>Mon, 02 Nov 2015 14:41:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/11/02/ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8intellij/</guid>
      <description>去掉Alt键触发快捷命令 在右上角选择&amp;ndash;&amp;gt; System Settings &amp;gt; Keyboard &amp;gt; Shortcuts &amp;gt; Launchers 找到选项Key to show the HUD，然后按下Backspace键清空即可.</description>
    </item>
    
    <item>
      <title>单反学习</title>
      <link>https://emacsist.github.io/2015/10/27/%E5%8D%95%E5%8F%8D%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 27 Oct 2015 21:22:42 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/27/%E5%8D%95%E5%8F%8D%E5%AD%A6%E4%B9%A0/</guid>
      <description>单反 单镜头反光镜, 简称”单反” 单反, 是光学取景的,取景相对快. 微单, 是电子取景的, 取景相对慢. 微单, 推荐: 索尼, 富士. 佳能低中高端单反 高端单</description>
    </item>
    
    <item>
      <title>Findbugs 报 May expose internal representation by returning reference to mutable object</title>
      <link>https://emacsist.github.io/2015/10/27/findbugs-%E6%8A%A5-may-expose-internal-representation-by-returning-reference-to-mutable-object/</link>
      <pubDate>Tue, 27 Oct 2015 10:54:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/27/findbugs-%E6%8A%A5-may-expose-internal-representation-by-returning-reference-to-mutable-object/</guid>
      <description>运行完一个Findbugs时，发现它报了一个警告： CccFans.getRowCreateTime() may expose internal representation by returning CcFans.rowCreateTime()以及CcFans.setRowC</description>
    </item>
    
    <item>
      <title>Gradle学习笔记</title>
      <link>https://emacsist.github.io/2015/10/23/gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 23 Oct 2015 00:06:55 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/23/gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>gradle 设置代理 systemProp.http.proxyHost=代理服务器地址 systemProp.http.proxyPort=代理服务器端</description>
    </item>
    
    <item>
      <title>Maven 与 Spring 结合进行模块化开发实践</title>
      <link>https://emacsist.github.io/2015/10/16/maven-%E4%B8%8E-spring-%E7%BB%93%E5%90%88%E8%BF%9B%E8%A1%8C%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Fri, 16 Oct 2015 16:02:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/16/maven-%E4%B8%8E-spring-%E7%BB%93%E5%90%88%E8%BF%9B%E8%A1%8C%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</guid>
      <description>模块化的解决方案 OSGi 是一种模块化标准。是真正意义的上模块化，Eclipse 就是基于OSGi进行开发的。热插拔，每个模块都有自己的classLo</description>
    </item>
    
    <item>
      <title>Maven复习</title>
      <link>https://emacsist.github.io/2015/10/12/maven%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Mon, 12 Oct 2015 17:03:38 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/12/maven%E5%A4%8D%E4%B9%A0/</guid>
      <description>快速升级 利用软链接方式来进行升级 软链接目录：~/maven/current 代表当前要使用的版本 具体某个版本的maven: ~/maven/maven3.0 具体某个版本的ma</description>
    </item>
    
    <item>
      <title>&lt;Java RESTful Web Service&gt;学习笔记</title>
      <link>https://emacsist.github.io/2015/10/10/java-restful-web-service%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 10 Oct 2015 23:26:54 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/10/java-restful-web-service%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>在 Java 世界 中， 与 大 Web Service 相 对应 的 规范 是 JAX- WS。 在 大 Web Service 已经 成为 明日黄花 之后， Java 世界 急需 一套 新的 规范 来 取代 JAX- WS。 这套 新的 规范 就是 JAX- RS： Java 世界 开</description>
    </item>
    
    <item>
      <title>Jersey 2.x 搭建Web service</title>
      <link>https://emacsist.github.io/2015/10/09/jersey-2.x-%E6%90%AD%E5%BB%BAweb-service/</link>
      <pubDate>Fri, 09 Oct 2015 17:20:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/09/jersey-2.x-%E6%90%AD%E5%BB%BAweb-service/</guid>
      <description>假设创建的项目名为: hello Maven依赖 &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;snapshot-repository.java.net&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Java.net Snapshot Repository for Maven&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://maven.java.net/content/repositories/snapshots/&amp;lt;/url&amp;gt; &amp;lt;layout&amp;gt;default&amp;lt;/layout&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.22.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-common&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.22.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.containers&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-container-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.22.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; web.xml配置 &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;REST&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.glassfish.jersey.servlet.ServletContainer&amp;lt;/servlet-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;javax.ws.rs.Application&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;org.emacsist.App&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;REST&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; org.emacsist.App 内容</description>
    </item>
    
    <item>
      <title>Java是如何查找class的?</title>
      <link>https://emacsist.github.io/2015/09/14/java%E6%98%AF%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BEclass%E7%9A%84/</link>
      <pubDate>Mon, 14 Sep 2015 20:54:35 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/14/java%E6%98%AF%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BEclass%E7%9A%84/</guid>
      <description>Java中的三种类型class Bootstrap classes 这些是核心class,即Java平台最基础的class. 它放在 rt.jar(runtime),以及其他一些</description>
    </item>
    
    <item>
      <title>Apache Felix OSGi 使用非bundle jar包共享到其他所有bundle</title>
      <link>https://emacsist.github.io/2015/09/14/apache-felix-osgi-%E4%BD%BF%E7%94%A8%E9%9D%9Ebundle-jar%E5%8C%85%E5%85%B1%E4%BA%AB%E5%88%B0%E5%85%B6%E4%BB%96%E6%89%80%E6%9C%89bundle/</link>
      <pubDate>Mon, 14 Sep 2015 13:04:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/14/apache-felix-osgi-%E4%BD%BF%E7%94%A8%E9%9D%9Ebundle-jar%E5%8C%85%E5%85%B1%E4%BA%AB%E5%88%B0%E5%85%B6%E4%BB%96%E6%89%80%E6%9C%89bundle/</guid>
      <description>使用 org.osgi.framework.system.packages 参数 创建一个项目，假设使用了Google的Guava的bundle，但这个库并不是OSGi Bundle。但如果又想共享于其他bundl</description>
    </item>
    
    <item>
      <title>将非OSGi jar转换成OSGi的Bundle</title>
      <link>https://emacsist.github.io/2015/09/13/%E5%B0%86%E9%9D%9Eosgi-jar%E8%BD%AC%E6%8D%A2%E6%88%90osgi%E7%9A%84bundle/</link>
      <pubDate>Sun, 13 Sep 2015 16:47:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/13/%E5%B0%86%E9%9D%9Eosgi-jar%E8%BD%AC%E6%8D%A2%E6%88%90osgi%E7%9A%84bundle/</guid>
      <description>建立转换的project 测试环境: JDK 1.8, Eclipse 4.4.2 打开Eclipse, File-&amp;gt; New -&amp;gt; Project -&amp;gt; Plug-in Development -&amp;gt; Plug-in from Existing JAR Archives 然后选择你想要制作成bundle的jar包, 然后输入</description>
    </item>
    
    <item>
      <title>开发并打包一个OSGi的Bundle</title>
      <link>https://emacsist.github.io/2015/09/11/%E5%BC%80%E5%8F%91%E5%B9%B6%E6%89%93%E5%8C%85%E4%B8%80%E4%B8%AAosgi%E7%9A%84bundle/</link>
      <pubDate>Fri, 11 Sep 2015 16:11:55 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/11/%E5%BC%80%E5%8F%91%E5%B9%B6%E6%89%93%E5%8C%85%E4%B8%80%E4%B8%AAosgi%E7%9A%84bundle/</guid>
      <description>安装个Eclipse插件 EclipsePlugin 功能：将某个目录下的jar包，添加到buildpath 打包一个Bundle 这只是演示第三方jar包依赖的打包问题，</description>
    </item>
    
    <item>
      <title>[翻译]为什么我的Bundle抛出ClassNotFoundException或者NoClassDefFoundError?</title>
      <link>https://emacsist.github.io/2015/09/10/%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84bundle%E6%8A%9B%E5%87%BAclassnotfoundexception%E6%88%96%E8%80%85noclassdeffounderror/</link>
      <pubDate>Thu, 10 Sep 2015 20:59:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/10/%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84bundle%E6%8A%9B%E5%87%BAclassnotfoundexception%E6%88%96%E8%80%85noclassdeffounderror/</guid>
      <description>原文 对于OSGi的新用户有一个非常普遍的如下问题 我的Bundle抛出一个 NoClassDefFoundError 在 org.example.FooBar, 尽管FooBar是在classpath里,这是啥情况?? 在OS</description>
    </item>
    
    <item>
      <title>OSGi Bundle元数据描述说明</title>
      <link>https://emacsist.github.io/2015/09/10/osgi-bundle%E5%85%83%E6%95%B0%E6%8D%AE%E6%8F%8F%E8%BF%B0%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Thu, 10 Sep 2015 17:11:16 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/10/osgi-bundle%E5%85%83%E6%95%B0%E6%8D%AE%E6%8F%8F%E8%BF%B0%E8%AF%B4%E6%98%8E/</guid>
      <description>Bundle 预定义标记 描述元数据 Bundle的元数据信息定义在/META-INF/MANIFEST.MF文件之中，OSGi规范中明确要求实现框架必须能</description>
    </item>
    
    <item>
      <title>OSGi注意事项</title>
      <link>https://emacsist.github.io/2015/09/10/osgi%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Thu, 10 Sep 2015 16:38:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/10/osgi%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>关于导入的版本处理问题 Import-Package: org.osgi.framework;version=&amp;quot;1.8.0&amp;quot; 这个表示，只要是org.osgi.framework包的版本，&amp;gt;=1.8.0的都可以。 Import-Package: org.osgi.framework;version=&amp;quot;[1.8.0,1.8.9)&amp;quot; 这个表示，只要是o</description>
    </item>
    
    <item>
      <title>搭建Apache Felix OSGi运行环境及Bundle的生命周期例子</title>
      <link>https://emacsist.github.io/2015/09/10/%E6%90%AD%E5%BB%BAapache-felix-osgi%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%8F%8Abundle%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Thu, 10 Sep 2015 14:45:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/10/%E6%90%AD%E5%BB%BAapache-felix-osgi%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%8F%8Abundle%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BE%8B%E5%AD%90/</guid>
      <description>运行环境 配置好Java这些基础环境就忽略了。 下载Felix 假设下载到~/Downloads目录，然后解压 cd ~/Downloads tar -xvf org.apache.felix.main.distribution-5.2.0.tar.gz cd felix-framework-5.2.0 启动OSGi运行环境:</description>
    </item>
    
    <item>
      <title>OSGi之Web HelloWorld</title>
      <link>https://emacsist.github.io/2015/09/08/osgi%E4%B9%8Bweb-helloworld/</link>
      <pubDate>Tue, 08 Sep 2015 21:11:50 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/08/osgi%E4%B9%8Bweb-helloworld/</guid>
      <description>本文的测试环境使用的是: Mac + Eclipse 4.4.2 搭建基础环境 打开Eclipse,然后 Run -&amp;gt; Run Configurations -&amp;gt; OSGi Framework,添加一个新的项目.Name就自己喜欢全名</description>
    </item>
    
    <item>
      <title>Maven打包时带有旧版本的jar包问题</title>
      <link>https://emacsist.github.io/2015/09/08/maven%E6%89%93%E5%8C%85%E6%97%B6%E5%B8%A6%E6%9C%89%E6%97%A7%E7%89%88%E6%9C%AC%E7%9A%84jar%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 08 Sep 2015 10:53:11 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/09/08/maven%E6%89%93%E5%8C%85%E6%97%B6%E5%B8%A6%E6%9C%89%E6%97%A7%E7%89%88%E6%9C%AC%E7%9A%84jar%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>最近发现在修改pom.xl的jar包版本依赖时，每次进行package时，都会发现以前的版本的jar包遗留下来。 原因 这是因为我们公司有部分同</description>
    </item>
    
    <item>
      <title>部署代码到远程Tomcat</title>
      <link>https://emacsist.github.io/2015/08/31/%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%A8%8Btomcat/</link>
      <pubDate>Mon, 31 Aug 2015 16:24:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/31/%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%A8%8Btomcat/</guid>
      <description>直接上码: 将这个脚本，放到项目的根目录即可. #!/bin/bash # 使用方式： # 部署生产环境 # 完全部署: ./server.sh p # 只部署静态文件: ./server.sh p static # 只部署后端文件: ./server.sh p class # 部</description>
    </item>
    
    <item>
      <title>Tomcat报java.lang.ClassNotFoundException: 1catalina.org.apache.juli.FileHandler</title>
      <link>https://emacsist.github.io/2015/08/28/tomcat%E6%8A%A5java.lang.classnotfoundexception-1catalina.org.apache.juli.filehandler/</link>
      <pubDate>Fri, 28 Aug 2015 12:15:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/28/tomcat%E6%8A%A5java.lang.classnotfoundexception-1catalina.org.apache.juli.filehandler/</guid>
      <description>最近在生产环境部署Tomcat的时候，在启动的时候，在控制台报“java.lang.ClassNotFoundException: 1cata</description>
    </item>
    
    <item>
      <title>Eclipse遇到Unable to load the mojo错误</title>
      <link>https://emacsist.github.io/2015/08/06/eclipse%E9%81%87%E5%88%B0unable-to-load-the-mojo%E9%94%99%E8%AF%AF/</link>
      <pubDate>Thu, 06 Aug 2015 11:45:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/06/eclipse%E9%81%87%E5%88%B0unable-to-load-the-mojo%E9%94%99%E8%AF%AF/</guid>
      <description>Eclipse在进行 Maven更新时出现错误Unable to load the mojo 在 stackoverflow 上有人回答，也帮我解决了问题。 When I had this problem, it seemed to be a problem with my Maven install. Uninstalling the M2Eclipse plugin and deleting</description>
    </item>
    
    <item>
      <title>关于Java应用启动时报 could not find the document 错误的问题及解决</title>
      <link>https://emacsist.github.io/2015/07/30/%E5%85%B3%E4%BA%8Ejava%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5-could-not-find-the-document-%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Thu, 30 Jul 2015 14:56:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/30/%E5%85%B3%E4%BA%8Ejava%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5-could-not-find-the-document-%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</guid>
      <description>这两天发现到一个很奇怪的问题，就是应用有时候在启动的时候，会报 o.s.b.f.x.XmlBeanDefinitionReader.warning[2015-07-30 14:19:05] : Ignored XML validation warningorg.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document &#39;http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd&#39;, because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not &amp;lt;xsd:schema&amp;gt;. at</description>
    </item>
    
    <item>
      <title>Maven为不同环境打包war</title>
      <link>https://emacsist.github.io/2015/07/30/maven%E4%B8%BA%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85war/</link>
      <pubDate>Thu, 30 Jul 2015 11:17:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/30/maven%E4%B8%BA%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85war/</guid>
      <description>Maven为生产环境，测试环境（或者更多）的不同而使用不同的配置文件 首先，为项目准备好不同的环境存放的配置文件的目录比如 存放测试环境的配置文</description>
    </item>
    
    <item>
      <title>Java中的Comparator使用</title>
      <link>https://emacsist.github.io/2015/07/27/java%E4%B8%AD%E7%9A%84comparator%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 27 Jul 2015 14:11:22 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/27/java%E4%B8%AD%E7%9A%84comparator%E4%BD%BF%E7%94%A8/</guid>
      <description>Comparator 与 Comparable 比较器，一般用于排序的时候。即如果某个没有实现Comparable接口， 这时可以通过Comparator来实现类的外在排序器。 它与 Comparable 不</description>
    </item>
    
    <item>
      <title>Java 日志实践</title>
      <link>https://emacsist.github.io/2015/07/23/java-%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 23 Jul 2015 14:12:17 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/23/java-%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/</guid>
      <description>每个类一个Logger private static final Logger LOG = LoggerFactory.getLogger(Your.class); 日志级别 trace 最详细的日志级别信息 debug 调试级别的日志级别信息 info 一般的日志级别信息 warn 警告级别信息 error 错误级别信息 fatal</description>
    </item>
    
    <item>
      <title>Java Web 项目包建议设计</title>
      <link>https://emacsist.github.io/2015/07/21/java-web-%E9%A1%B9%E7%9B%AE%E5%8C%85%E5%BB%BA%E8%AE%AE%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 21 Jul 2015 17:51:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/21/java-web-%E9%A1%B9%E7%9B%AE%E5%8C%85%E5%BB%BA%E8%AE%AE%E8%AE%BE%E8%AE%A1/</guid>
      <description>以下这些都只是从工作中，思考出来的，只是在下自己的拙见。一个好的包设计， 可以让项目更加清晰具体。 com.company.dao.pojo 这里存放的是与数据库对应的表的POJO com.company.dao 这</description>
    </item>
    
    <item>
      <title>Spring中的事务回滚</title>
      <link>https://emacsist.github.io/2015/07/16/spring%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A/</link>
      <pubDate>Thu, 16 Jul 2015 15:25:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/16/spring%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A/</guid>
      <description>开启声明式事务 spring.xml里配置 &amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;org.apache.commons.dbcp.BasicDataSource&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;${jdbc.driverClassName}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${jdbc.url}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${jdbc.username}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${jdbc.password}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;maxActive&amp;quot;&amp;gt; &amp;lt;value&amp;gt;64&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;maxIdle&amp;quot;&amp;gt; &amp;lt;value&amp;gt;64&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;maxWait&amp;quot;&amp;gt; &amp;lt;value&amp;gt;0&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;validationQuery&amp;quot;&amp;gt; &amp;lt;value&amp;gt;select 1&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;testWhileIdle&amp;quot;&amp;gt; &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;minEvictableIdleTimeMillis&amp;quot;&amp;gt; &amp;lt;value&amp;gt;20000000&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;timeBetweenEvictionRunsMillis&amp;quot;&amp;gt; &amp;lt;value&amp;gt;3600000&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean</description>
    </item>
    
    <item>
      <title>Spring单元测试</title>
      <link>https://emacsist.github.io/2015/07/14/spring%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Tue, 14 Jul 2015 16:12:03 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/14/spring%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>资源文件 将所有的资源文件, 放到测试包及测试资源下(如果没有的话).以免麻烦, 统一放到 classpath 下. # 这放测试代码文件 src/test/java # 这放测试资源文件 src/test/resource 进行单元测</description>
    </item>
    
    <item>
      <title>使用Java监控工具出现 Can&#39;t attach to the process</title>
      <link>https://emacsist.github.io/2015/07/07/%E4%BD%BF%E7%94%A8java%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%87%BA%E7%8E%B0-cant-attach-to-the-process/</link>
      <pubDate>Tue, 07 Jul 2015 16:49:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/07/%E4%BD%BF%E7%94%A8java%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%87%BA%E7%8E%B0-cant-attach-to-the-process/</guid>
      <description>问题重现 ➜ jinfo -flags 3032 Attaching to process ID 3032, please wait... Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach to the process sun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach to the process at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$LinuxDebuggerLocalWorkerThread.execute(LinuxDebuggerLocal.java:163) at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach(LinuxDebuggerLocal.java:278) at sun.jvm.hotspot.HotSpotAgent.attachDebugger(HotSpotAgent.java:671) at sun.jvm.hotspot.HotSpotAgent.setupDebuggerLinux(HotSpotAgent.java:611) at sun.jvm.hotspot.HotSpotAgent.setupDebugger(HotSpotAgent.java:337) at sun.jvm.hotspot.HotSpotAgent.go(HotSpotAgent.java:304) at sun.jvm.hotspot.HotSpotAgent.attach(HotSpotAgent.java:140) at sun.jvm.hotspot.tools.Tool.start(Tool.java:185) at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118) at sun.jvm.hotspot.tools.JInfo.main(JInfo.java:138) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at sun.tools.jinfo.JInfo.runTool(JInfo.java:108) at sun.tools.jinfo.JInfo.main(JInfo.java:76) Caused by: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach</description>
    </item>
    
    <item>
      <title>Redis与Java使用经验</title>
      <link>https://emacsist.github.io/2015/07/06/redis%E4%B8%8Ejava%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Mon, 06 Jul 2015 16:07:44 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/06/redis%E4%B8%8Ejava%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</guid>
      <description>Redis 中的数据类型 String——字符串 Hash——字典 List——列表 Set——集合 Sorted Set——有序集合 String (简单的 K-V 类型) 适合场景: 简单的 K-V 键</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之分析堆</title>
      <link>https://emacsist.github.io/2015/06/27/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%86%E6%9E%90%E5%A0%86/</link>
      <pubDate>Sat, 27 Jun 2015 00:01:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/27/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%86%E6%9E%90%E5%A0%86/</guid>
      <description>常量池的位置 Java 6 及之前, 常量池放在永久区 Java 7 及以后, 字符串常量池放到了堆进行管理.(也就是说可以被垃圾收集器回收) Java 7 及以后, 可以通过虚拟机</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之性能监控工具</title>
      <link>https://emacsist.github.io/2015/06/26/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/26/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</guid>
      <description>top vmstat iostat pidstat 查看某进程及某线程占用CPU的例子 jps: 列出java进程,找到pid. pidstat -p pid -u 1 3 -u -t: 查看pid的进程所有线程的cpu使用情况. jstack -l pid &amp;gt;</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之垃圾收集器参数</title>
      <link>https://emacsist.github.io/2015/06/25/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 25 Jun 2015 23:10:35 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/25/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%8F%82%E6%95%B0/</guid>
      <description>串行回收器参数 -XX:+UseSerialGC: 在新生代和年老代使用串行收集器 -XX:SurvivorRatio: 设置eden和survivor区大小的比例 -XX:PretenureSizeThreshold: 设置大对象直接进入老年代的阈值.当对象的大小,超</description>
    </item>
    
    <item>
      <title>Jackson JSON 库使用例子</title>
      <link>https://emacsist.github.io/2015/06/25/jackson-json-%E5%BA%93%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Thu, 25 Jun 2015 12:11:59 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/25/jackson-json-%E5%BA%93%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</guid>
      <description>ObjectMapper 它是线程安全的，所以建议使用它时，作为单例使用： private static final ObjectMapper mapper = new ObjectMapper(); Quick Parsing String jsonString = &amp;quot;{\&amp;quot;k1\&amp;quot;:\&amp;quot;v1\&amp;quot;,\&amp;quot;k2\&amp;quot;:\&amp;quot;v2\&amp;quot;}&amp;quot;; ObjectMapper mapper = new ObjectMapper(); JsonNode actualObj = mapper.readTree(jsonString); assertNotNull(actualObj); Convert JSON to Java Map JsonFactory factory = new JsonFactory(); ObjectMapper mapper = new ObjectMapper(factory); File from = new File(&amp;quot;albumnList.txt&amp;quot;); TypeReference&amp;lt;HashMap&amp;lt;String,Object&amp;gt;&amp;gt;</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之回收算法</title>
      <link>https://emacsist.github.io/2015/06/24/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 24 Jun 2015 23:57:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/24/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</guid>
      <description>引用计数法 问题1: 无法处理循环引用的情况 问题2: 都要伴随着加减引用计数操作,对性能有一定的影响 名词解释 可达对象 通过根对象进行引用搜索, 最终可</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之常用Java虚拟机参数</title>
      <link>https://emacsist.github.io/2015/06/23/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%82%E6%95%B0/</link>
      <pubDate>Tue, 23 Jun 2015 00:11:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/23/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%82%E6%95%B0/</guid>
      <description>跟踪垃圾回收 -XX:+PrintGC 例子日志样本： [GC 4793K-&amp;gt;377K(15872K), 0.0006926 secs] 表示当前使用了4793K,GC后，使用量变为377K，最大可用为15872K -XX:+PrintGCDetails 格式： [名称:当前某区大小</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之函数调用</title>
      <link>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 22 Jun 2015 11:41:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      <description>出入Java栈 Java栈是一块线程私有的内存空间。它是一块先进后出的数据结构。Java栈中保存的主要内容为栈帧。每一次函数调用，都会有一个对</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之浮点数表示方式</title>
      <link>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%AE%E7%82%B9%E6%95%B0%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 22 Jun 2015 00:09:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%AE%E7%82%B9%E6%95%B0%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F/</guid>
      <description>IEEE 754 标准 Java虚拟机处理浮点数的标准是参考 IEEE 754 规范的。 参考文档 : IEEE 754 标示格式 符号位 | 阶码 | 尾数 ##32位 1 位 | 8 位 | 23位 ##64位 1 位 |</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之数值表示</title>
      <link>https://emacsist.github.io/2015/06/21/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA/</link>
      <pubDate>Sun, 21 Jun 2015 23:19:44 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/21/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA/</guid>
      <description>原码 在数值前直接加一符号位的表示法。 [+7]原= 0 0000111 B [-7]原= 1 0000111 B -127～+127 反码 负数的反码，符号位为“1”，数值部分按位取反。</description>
    </item>
    
    <item>
      <title>Java乱码解决方案</title>
      <link>https://emacsist.github.io/2014/12/29/java%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 29 Dec 2014 20:55:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/29/java%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>1.Tomcat配置： &amp;lt;Connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot; connectionTimeout=&amp;quot;20000&amp;quot; redirectPort=&amp;quot;8443&amp;quot; URIEncoding=&amp;quot;UTF-8&amp;quot; useBodyEncodingForURI=&amp;quot;true&amp;quot;/&amp;gt; 2.文件：必须设置统一编码 JSP：&amp;lt;%@ page language=&amp;quot;java&amp;quot; pageEncoding=&amp;quot;UTF-8&amp;quot;%&amp;gt; HTML：&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html;charset=utf-8&amp;quot;&amp;gt; ServletRequest: request.se</description>
    </item>
    
    <item>
      <title>[翻译]为什么在Java里不能将Integer强制转换成String</title>
      <link>https://emacsist.github.io/2014/12/22/%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8java%E9%87%8C%E4%B8%8D%E8%83%BD%E5%B0%86integer%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90string/</link>
      <pubDate>Mon, 22 Dec 2014 22:25:45 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/22/%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8java%E9%87%8C%E4%B8%8D%E8%83%BD%E5%B0%86integer%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90string/</guid>
      <description>为何Integer不能转换为String 原文 因为 String 和 Integer 不是在同一个对象阶层。 Object / \ / \ String Integer 当你尝试强制转换时，仅仅会在同一个对象阶层转换。比</description>
    </item>
    
    <item>
      <title>Java HashSet HashMap 原理</title>
      <link>https://emacsist.github.io/2014/12/11/java-hashset-hashmap-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 11 Dec 2014 10:57:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2014/12/11/java-hashset-hashmap-%E5%8E%9F%E7%90%86/</guid>
      <description>HashSet 看其源码java.util.HashSet，它的构造函数内部，是使用java.util.HashMap来实现的. 默认的容量大小，以及扩容因</description>
    </item>
    
  </channel>
</rss>