<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发 on emacsist</title>
    <link>https://emacsist.github.io/tags/%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 并发 on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 09 Oct 2019 15:49:01 +0800</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>&lt;Java并发编程之美&gt;笔记</title>
      <link>https://emacsist.github.io/2019/10/09/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 09 Oct 2019 15:49:01 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/10/09/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%E7%AC%94%E8%AE%B0/</guid>
      <description>线程回调 public static class CallTask implements Callable&amp;lt;String&amp;gt; { @Override public String call() throws Exception { return &amp;quot;hello world&amp;quot;; } } public void call() { FutureTask&amp;lt;String&amp;gt; futureTask = new FutureTask&amp;lt;&amp;gt;(new CallTask()); new Thread(futureTask).start(); try { String result = futureTask.get(); System.out.println(result); } catch (Exception e) { e.printStackTrace(); } } @Test public void testFutureTask() { call(); } Object 中的函数 wait 函数 / wait(timeout) 函数 调</description>
    </item>
    
  </channel>
</rss>