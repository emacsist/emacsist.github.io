<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on emacsist</title>
    <link>https://emacsist.github.io/tags/mysql/</link>
    <description>Recent content in mysql on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Jun 2019 14:46:53 +0800</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mysql 死锁</title>
      <link>https://emacsist.github.io/2019/06/12/mysql-%E6%AD%BB%E9%94%81/</link>
      <pubDate>Wed, 12 Jun 2019 14:46:53 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/06/12/mysql-%E6%AD%BB%E9%94%81/</guid>
      <description>官方文档 原文 可以通过以下技术来减少死锁的出现 在任何时候, 使用 SHOW ENGINE INNODB STATUS 命令来判断最近的死锁问题. 这可帮助你排查应用避免死锁. 如果担心频繁死锁预</description>
    </item>
    
    <item>
      <title>MySQL 删除大表中的大部分数据的方式</title>
      <link>https://emacsist.github.io/2017/02/09/mysql-%E5%88%A0%E9%99%A4%E5%A4%A7%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%A7%E9%83%A8%E5%88%86%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 09 Feb 2017 12:42:18 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/09/mysql-%E5%88%A0%E9%99%A4%E5%A4%A7%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%A7%E9%83%A8%E5%88%86%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>昨晚要删除一张原有 2 亿多条日志表的数据，只保留 今年 2017 及之后的数据，删除之前的，以释放磁盘空间，发现 delete from t where id &amp;lt; 2亿; 发现这样子删除实在是太慢</description>
    </item>
    
    <item>
      <title>记录一次 MySQL 批量插入的优化</title>
      <link>https://emacsist.github.io/2017/01/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-mysql-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 11 Jan 2017 12:21:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/01/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-mysql-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>公司的DSP 项目,有个模块就是插入 RabbitMQ 里的 BID 的对象到 MySQL 然后再统计数据的业务. 但是, 发现这个 BID 批量插入的性能, 低得有点吓人. 平均 1K/s 的速度. 而这些</description>
    </item>
    
    <item>
      <title>MySQL不重启添加slow log慢查询日志</title>
      <link>https://emacsist.github.io/2016/12/07/mysql%E4%B8%8D%E9%87%8D%E5%90%AF%E6%B7%BB%E5%8A%A0slow-log%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</link>
      <pubDate>Wed, 07 Dec 2016 19:12:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/12/07/mysql%E4%B8%8D%E9%87%8D%E5%90%AF%E6%B7%BB%E5%8A%A0slow-log%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</guid>
      <description>## 开启慢查询 mysql&amp;gt; set global slow_query_log = &#39;ON&#39;; Query OK, 0 rows affected (0.78 sec) ## 检查变量值 mysql&amp;gt; show global variables like &#39;%slow%&#39;; +---------------------------+------------------------------------------------------+ | Variable_name | Value | +---------------------------+------------------------------------------------------+ | log_slow_admin_statements | OFF | | log_slow_slave_statements | OFF | | slow_launch_time | 2 | | slow_query_log | ON | | slow_query_log_file | /home/username/mysql/data/db/logs/myql-slow.log | +---------------------------+------------------------------------------------------+ 5 rows in set (0.00 sec)</description>
    </item>
    
    <item>
      <title>MySQL中按条件count</title>
      <link>https://emacsist.github.io/2016/10/17/mysql%E4%B8%AD%E6%8C%89%E6%9D%A1%E4%BB%B6count/</link>
      <pubDate>Mon, 17 Oct 2016 11:51:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/17/mysql%E4%B8%AD%E6%8C%89%E6%9D%A1%E4%BB%B6count/</guid>
      <description>问题 产品中有个业务是定时发通知的，现有的逻辑是，只有通知数&amp;gt;0时，才会发通知，现在PM说要修改为无论有没有消息数，都要在定时的时间发送</description>
    </item>
    
    <item>
      <title>MySQL获取分组后的TopN条数据</title>
      <link>https://emacsist.github.io/2016/10/13/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E7%9A%84topn%E6%9D%A1%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 13 Oct 2016 15:30:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/13/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E7%9A%84topn%E6%9D%A1%E6%95%B0%E6%8D%AE/</guid>
      <description>表结构 mysql&amp;gt; desc dce_his_cs_m_jyhqsj; +---------+---------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +---------+---------------+------+-----+---------+----------------+ | QSJDATE | varchar(20) | YES | | NULL | | | QSJDDDD | varchar(8) | NO | PRI | NULL | | | QSJMMMM | varchar(4) | NO | PRI | NULL | | | QSJHYBH | varchar(10) | NO | PRI | NULL | | | QSJKHBH</description>
    </item>
    
    <item>
      <title>PostgreSQL9.6中使用mysql_fdw</title>
      <link>https://emacsist.github.io/2016/10/09/postgresql9.6%E4%B8%AD%E4%BD%BF%E7%94%A8mysql_fdw/</link>
      <pubDate>Sun, 09 Oct 2016 12:22:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/09/postgresql9.6%E4%B8%AD%E4%BD%BF%E7%94%A8mysql_fdw/</guid>
      <description>安装 mysql_fdw SELECT * from pg_available_extensions where name like &#39;%fdw%&#39;; name | default_version | installed_version | comment --------------+-----------------+-------------------+---------------------------------------------------- file_fdw | 1.0 | [null] | foreign-data wrapper for flat file access mysql_fdw | 1.0 | [null] | Foreign data wrapper for querying a MySQL server postgres_fdw | 1.0 | [null] | foreign-data wrapper for remote PostgreSQL servers (3 rows) Time: 1.742 ms 使用 CREATE EXTENSION mysql_fdw; 如果是</description>
    </item>
    
    <item>
      <title>MySQL中的analyze与optimize</title>
      <link>https://emacsist.github.io/2016/09/26/mysql%E4%B8%AD%E7%9A%84analyze%E4%B8%8Eoptimize/</link>
      <pubDate>Mon, 26 Sep 2016 15:31:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/26/mysql%E4%B8%AD%E7%9A%84analyze%E4%B8%8Eoptimize/</guid>
      <description>analyze 作用： &amp;gt; 分析表主要作用是分析并保存索引的分布. analyze-table MySQL document 语法: ANALYZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE tbl_name [, tbl_name] ... 使用ANALYZE TABLE分析表的过程中，数据库系统会对表加</description>
    </item>
    
    <item>
      <title>MySQL VS PostgreSQL 的alter table</title>
      <link>https://emacsist.github.io/2016/08/22/mysql-vs-postgresql-%E7%9A%84alter-table/</link>
      <pubDate>Mon, 22 Aug 2016 17:35:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/22/mysql-vs-postgresql-%E7%9A%84alter-table/</guid>
      <description>版本 PostgreSQL [local]:5432 sky@sky=# select version(); version ----------------------------------------------------------------------------------------------------------- PostgreSQL 9.6beta4 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4, 64-bit (1 row) Time: 0.407 ms [local]:5432 sky@sky=# MySQL mysql&amp;gt; select version(); +-------------------------------------+ | version() | +-------------------------------------+ | 5.7.12-1~exp1+deb.sury.org~trusty+1 | +-------------------------------------+ 1 row in set (0.00 sec) mysql&amp;gt; 测试表 PostgreSQL: [local]:5432 sky@sky=# \d wb_status; Table &amp;quot;public.wb_status&amp;quot; Column | Type | Modifiers ------------------------+-----------------------------+-------------------------------------------------------- id | integer | not null default</description>
    </item>
    
    <item>
      <title>批量操作中数据库死锁的解决方法</title>
      <link>https://emacsist.github.io/2016/08/08/%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 08 Aug 2016 15:56:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/08/%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>原因 在生产环境中, 发现数据库经常报死锁.排查问题后,发现是由于RabbitMQ监听器, 批量处理SQL: insert ... on duplicate key update ... 这类SQL引起. 解决 在添</description>
    </item>
    
    <item>
      <title>MySQL中USE INDEX 和 FORCE INDEX</title>
      <link>https://emacsist.github.io/2016/07/15/mysql%E4%B8%ADuse-index-%E5%92%8C-force-index/</link>
      <pubDate>Fri, 15 Jul 2016 11:40:37 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/15/mysql%E4%B8%ADuse-index-%E5%92%8C-force-index/</guid>
      <description>问题 在一次生产环境排查性能问题时, 发现有个请求在一些用户的数据量比较大的情况下, 最高耗时差不多要3s. 而且还是一个轮询的请求. 原因 在排查问题</description>
    </item>
    
    <item>
      <title>源码安装MySQL 5.6.X</title>
      <link>https://emacsist.github.io/2016/06/07/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql-5.6.x/</link>
      <pubDate>Tue, 07 Jun 2016 14:43:58 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/07/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql-5.6.x/</guid>
      <description>下载 [Download MySQL 5.6.31]() 假设解压后的路径在 /home/name/mysql/mysql-5.6.31-src.准备安装到目录/home/name/mysq</description>
    </item>
    
    <item>
      <title>Java并发操作MySQL数据库的读写注意</title>
      <link>https://emacsist.github.io/2016/06/01/java%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%BB%E5%86%99%E6%B3%A8%E6%84%8F/</link>
      <pubDate>Wed, 01 Jun 2016 11:25:53 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/06/01/java%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%BB%E5%86%99%E6%B3%A8%E6%84%8F/</guid>
      <description>情景模拟： 线程1是一个task,然后分批select数据，然后可能会对这些select的结果进行更新 线程2是一个业务, 它也可能会对这些数据进</description>
    </item>
    
    <item>
      <title>MySQL备份实践</title>
      <link>https://emacsist.github.io/2016/05/09/mysql%E5%A4%87%E4%BB%BD%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 09 May 2016 15:28:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/05/09/mysql%E5%A4%87%E4%BB%BD%E5%AE%9E%E8%B7%B5/</guid>
      <description>binlog 查看是否开启了binlog mysql&amp;gt; show variables like &#39;log_bin&#39;; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | log_bin | OFF | +---------------+-------+ 1 row in set (0.00 sec) mysql&amp;gt; 开启binlog 在配置文件my.cnf里添加以下内容，然后重启</description>
    </item>
    
    <item>
      <title>MySQL中数据丢失概念及解决办法</title>
      <link>https://emacsist.github.io/2016/04/29/mysql%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Fri, 29 Apr 2016 11:06:29 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/04/29/mysql%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>概念 即数据库告诉我这次事务成功了，但当我下次读取数据时，却发现数据不正确。这就是数据丢失. 原因 看个场景, redo log丢失造成的主从不一致： bin</description>
    </item>
    
    <item>
      <title>Percona的MySQL维护及监控工具使用</title>
      <link>https://emacsist.github.io/2016/04/25/percona%E7%9A%84mysql%E7%BB%B4%E6%8A%A4%E5%8F%8A%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 25 Apr 2016 18:24:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/04/25/percona%E7%9A%84mysql%E7%BB%B4%E6%8A%A4%E5%8F%8A%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>安装 Doc 使用 pt-mysql-summary pt-mysql-summary --host=127.0.0.1 --port=6606 --password=xxx 说明： 显示MySQL服务器的概况. pt-align 将输出的文本对齐. 例子: #echo -e &amp;quot;hello owrld\n Hello world&amp;quot; | pt-align hello owrld Hello world 如果没有pt-align，则输出如下</description>
    </item>
    
    <item>
      <title>MySQL 为生产环境在线添加字段</title>
      <link>https://emacsist.github.io/2016/04/11/mysql-%E4%B8%BA%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%9C%A8%E7%BA%BF%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5/</link>
      <pubDate>Mon, 11 Apr 2016 18:14:19 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/04/11/mysql-%E4%B8%BA%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%9C%A8%E7%BA%BF%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5/</guid>
      <description>create table new_table_name like old_table_name; alter table new_table_name add column new_column int not null default 0 comment &#39;your comment&#39;; insert into new_table_name (col1, col2, col3...) select (col1, col2, col3...) from old_table_name where id &amp;lt; xxxx; begin; insert into new_table_name (col1, col2, col3...) select (col1, col2, col3...) from old_table_name where id &amp;gt;= xxxx rename old_table_name to old_table_bak, new_table_name to old_table_name; commit;</description>
    </item>
    
    <item>
      <title>MySQL杂项资料收集</title>
      <link>https://emacsist.github.io/2016/03/08/mysql%E6%9D%82%E9%A1%B9%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</link>
      <pubDate>Tue, 08 Mar 2016 16:11:06 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/08/mysql%E6%9D%82%E9%A1%B9%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</guid>
      <description>关于 MySQL 5.6 ICP ICP（index condition pushdown） 参考资料: csdn-melody_mr 关于 字符串 与 整型对比 的查询与索引 查询中 number compare string： 如果有索引，那么就可以利</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之复制</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Sun, 06 Mar 2016 20:14:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A4%8D%E5%88%B6/</guid>
      <description>MySQL通过 3个线程来完成主从库间的数据复制：其中Binlog Dump线程跑在主库上， I/O线程和SQL线程跑在从库上。当在从库上启动复制</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之锁</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%94%81/</link>
      <pubDate>Sun, 06 Mar 2016 17:32:50 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%94%81/</guid>
      <description>锁类型 表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。 行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之优化</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 06 Mar 2016 15:53:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BC%98%E5%8C%96/</guid>
      <description>查看服务器SQL及连接状态 查看当前执行的各种SQL执行频率: 全局性: show global status like &#39;%Com_%&#39;; 当前会话: show status like &#39;%Com_%&#39;; 重点查看: Com_insert: insert次数 Com_select: select次</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之SQL模式</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8Bsql%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 06 Mar 2016 15:28:01 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8Bsql%E6%A8%A1%E5%BC%8F/</guid>
      <description>查看默认的SQL Mode mysql&amp;gt; select @@sql_mode; +-------------------------------------------------------------------------------------------------------------------------------------------+ | @@sql_mode | +-------------------------------------------------------------------------------------------------------------------------------------------+ | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION | +-------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.01 sec) 设置模式 SET [SESSION|GLOBAL] sql_mode=&amp;lsquo;modes&amp;rsquo;，其中SESSIO</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之事务控制和锁语句</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E5%92%8C%E9%94%81%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sun, 06 Mar 2016 15:13:09 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E5%92%8C%E9%94%81%E8%AF%AD%E5%8F%A5/</guid>
      <description>MySQL支持对MyISAM和MEMORY存储引擎的表进行表级锁定，对BDB存储引擎的表进行页级锁定，对InnoDB存储引擎的表进行行级锁定</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之索引设计</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sun, 06 Mar 2016 14:47:13 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1/</guid>
      <description>InnoDB表的限制 MySQL 5.7 InnoDB-restrictions MyISAM 表的限制 MySQL 5.7 MyISAM-Storage-Engine 索引注意 索引的限制是以字节为单位的, 而表中的varchar等这些是以字符为单位的. 索引原则 搜索的索</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之字符集处理</title>
      <link>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%9B%86%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 06 Mar 2016 12:59:13 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/06/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%9B%86%E5%A4%84%E7%90%86/</guid>
      <description>字符集 查看支持的字符集: show character set; 查看校对规则: show collation;, show collation like &#39;xxx&#39;, select * from infomation_schema.collations\G _ci: 大小写不敏感, _cs: 大小写敏感, _bin:二进制比较. 查看当前服务器的字符集:</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之存储引擎</title>
      <link>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sat, 05 Mar 2016 23:13:13 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>涉及的命令 查看表的默认引擎: show variables like &#39;table_type&#39;; 这个旧版本的用法,新的版本用法如下: mysql&amp;gt; show variables like &#39;%engine%&#39;; +----------------------------------+--------+ | Variable_name | Value | +----------------------------------+--------+ | default_storage_engine | InnoDB | | default_tmp_storage_engine | InnoDB | | disabled_storage_engines | | | internal_tmp_disk_storage_engine | InnoDB | +----------------------------------+--------+ 4 rows</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记之常用命令</title>
      <link>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 05 Mar 2016 21:02:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>帮助相关的 ? 要查看帮助的命令. 如 mysql&amp;gt; ? create database; Name: &#39;CREATE DATABASE&#39; Description: Syntax: CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name [create_specification] ... create_specification: [DEFAULT] CHARACTER SET [=] charset_name | [DEFAULT] COLLATE [=] collation_name CREATE DATABASE creates a database with the given name. To use this statement, you need the CREATE privilege for the database. CREATE SCHEMA is</description>
    </item>
    
    <item>
      <title>&lt;深入浅出MySQL&gt;读书笔记</title>
      <link>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 05 Mar 2016 19:20:30 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/03/05/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>mysql命令行使用 命令的结束符，用“;”或者“\g”结束 通过help;或者\h命令来显示帮助内容，通过\c命令来清除命令行buffer 实践</description>
    </item>
    
    <item>
      <title>MySQL获取分组后每组最大的数据</title>
      <link>https://emacsist.github.io/2016/01/07/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E6%AF%8F%E7%BB%84%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 07 Jan 2016 16:51:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/07/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E6%AF%8F%E7%BB%84%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE/</guid>
      <description>需求 获取分组后每组数据中，ID最大的数据 表数据 table: hhh id name 1 hello 2 hello1 3 hello2 4 hello 5 hello2 6 hello3 7 hello1 想要的结果 id name 4 hello 5 hello2 6 hello3 7 hello1 SQL 实现1 select * from hhh where id in ( SELECT substring_index(group_concat(id</description>
    </item>
    
    <item>
      <title>SQL 以另一张表的值来设置某表的值</title>
      <link>https://emacsist.github.io/2016/01/07/sql-%E4%BB%A5%E5%8F%A6%E4%B8%80%E5%BC%A0%E8%A1%A8%E7%9A%84%E5%80%BC%E6%9D%A5%E8%AE%BE%E7%BD%AE%E6%9F%90%E8%A1%A8%E7%9A%84%E5%80%BC/</link>
      <pubDate>Thu, 07 Jan 2016 15:36:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/07/sql-%E4%BB%A5%E5%8F%A6%E4%B8%80%E5%BC%A0%E8%A1%A8%E7%9A%84%E5%80%BC%E6%9D%A5%E8%AE%BE%E7%BD%AE%E6%9F%90%E8%A1%A8%E7%9A%84%E5%80%BC/</guid>
      <description>需求 表1 table: h1 id name 1 hello1 2 hello2 3 hello11 4 hello22 表2 table: h2 h1_id name 1 2 1 3 3 2 4 想要的结果 h1_id name 1 hello1 2 hello2 1 hello1 3 hello11 3 hello11 2 hello2 4 hello22 SQL MySQL UPDATE h2 INNER JOIN h1 on h1.id = h2.h1_id set h2.name = h1.name; PostgreSQL update h2 set name</description>
    </item>
    
    <item>
      <title>MySQL设置wait_timeout注意事项</title>
      <link>https://emacsist.github.io/2016/01/04/mysql%E8%AE%BE%E7%BD%AEwait_timeout%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 04 Jan 2016 10:59:58 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/04/mysql%E8%AE%BE%E7%BD%AEwait_timeout%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>wait_timeout 是服务器等待客户端多久没有活动时，就关闭连接的时间，单位是秒. 查看 -- global level mysql&amp;gt; show global variables like &#39;%timeout%&#39;; +-----------------------------+----------+ | Variable_name | Value | +-----------------------------+----------+ | connect_timeout | 10 | | delayed_insert_timeout | 300 | | innodb_flush_log_at_timeout | 1 | | innodb_lock_wait_timeout | 30 |</description>
    </item>
    
    <item>
      <title>MySQL 报 &#39;MySQL server has gone away&#39;</title>
      <link>https://emacsist.github.io/2015/12/28/mysql-%E6%8A%A5-mysql-server-has-gone-away/</link>
      <pubDate>Mon, 28 Dec 2015 11:05:03 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/28/mysql-%E6%8A%A5-mysql-server-has-gone-away/</guid>
      <description>问题 经常在终端里连接MySQL，它经常报如下问题: ERROR 2006 (HY000): MySQL server has gone away No connection. Trying to reconnect... 原因 MySQL服务器超时并且关闭了这次的连接.即相关的超时参数设</description>
    </item>
    
    <item>
      <title>MySQL与PostgreSQL的 SELECT FOR UPDATE</title>
      <link>https://emacsist.github.io/2015/12/24/mysql%E4%B8%8Epostgresql%E7%9A%84-select-for-update/</link>
      <pubDate>Thu, 24 Dec 2015 17:04:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/24/mysql%E4%B8%8Epostgresql%E7%9A%84-select-for-update/</guid>
      <description>MySQL的行级锁 MySQL 版本: mysql&amp;gt; select version(); +------------+ | version() | +------------+ | 5.6.17-log | +------------+ 1 row in set (0.00 sec) mysql&amp;gt; 创建测试表 CREATE TABLE `shortlink` ( `id` bigint(20) NOT NULL AUTO_INCREMENT , `long_url` varchar(6000) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL , `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP , `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP</description>
    </item>
    
    <item>
      <title>MySQL常用命令及操作</title>
      <link>https://emacsist.github.io/2015/10/30/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 30 Oct 2015 16:48:44 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/10/30/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E6%93%8D%E4%BD%9C/</guid>
      <description>查看当前活动线程 SELECT * FROM information_schema.processlist WHERE `INFO` LIKE &#39;SELECT %&#39;; INFO字段就是当前正在执行的命令. 创建唯一索引，并删除有违反唯一索引的数据 ALTER IGNORE TABLE keyword_status ADD UNIQUE INDEX ks_kid_mid (keyword_id, mid);</description>
    </item>
    
    <item>
      <title>MySQL 备份方案</title>
      <link>https://emacsist.github.io/2015/08/31/mysql-%E5%A4%87%E4%BB%BD%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 31 Aug 2015 17:20:24 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/31/mysql-%E5%A4%87%E4%BB%BD%E6%96%B9%E6%A1%88/</guid>
      <description>Percona XtraBackup 介绍 官方文档 它是一个MySQL的开源的热备工具，备份时不会锁数据库。当前最新版本为2.2，它可以备份MySQL 5.1, 5.5和5.6的Inno</description>
    </item>
    
    <item>
      <title>MySQL源码编译及使用单机多实例管理</title>
      <link>https://emacsist.github.io/2015/08/24/mysql%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 24 Aug 2015 15:07:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/24/mysql%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B%E7%AE%A1%E7%90%86/</guid>
      <description>本文的测试环境为 Ubuntu 14.04.2 LTS 64 bit + MySQL 5.6 下载源码并安装及初始化数据库 cd ~/Downloads wget -c http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-5.6.26.tar.gz tar -xvf mysql-5.6.26.tar.gz cd mysql-5.6.26 sudo groupadd mysql sudo useradd -r -g mysql mysql sudo apt-get install cmake cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql-5.6 -DMYSQL_USER=mysql sudo mkdir /usr/local/mysql-5.6 sudo make install sudo chown mysql:mysql -R /usr/local/mysql-5.6 sudo mkdir</description>
    </item>
    
    <item>
      <title>MySQL Explain 详解</title>
      <link>https://emacsist.github.io/2015/08/20/mysql-explain-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 20 Aug 2015 11:01:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/08/20/mysql-explain-%E8%AF%A6%E8%A7%A3/</guid>
      <description>用法 explain select xxx id 列 从ID列可以判断SQL的执行顺序：从大到小，如果ID相同，就从上到下执行。 如果行引用联合结果的其他行，那么它的值可能为NULL</description>
    </item>
    
    <item>
      <title>MySQL 备份脚本</title>
      <link>https://emacsist.github.io/2015/07/01/mysql-%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Wed, 01 Jul 2015 14:27:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/01/mysql-%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/</guid>
      <description>MySQL 备份 InnoDB 每天备份策略 cd /etc/cron.daily/ touch /etc/cron.daily/dbbackup-daily.sh chmod 755 /etc/cron.daily/dbbackup-daily.sh vi /etc/cron.daily/dbbackup-daily.sh 然后写入以下内容 #!/bin/bash dbs=( &amp;quot;db1&amp;quot; &amp;quot;db2&amp;quot; &amp;quot;db3&amp;quot; ) for db in &amp;quot;${dbs[@]}&amp;quot; do now=&amp;quot;$(date +&#39;%Y_%m_%d_%H_%M_%S&#39;)&amp;quot; filename=&amp;quot;${db}_backup_$now&amp;quot;.gz backupfolder=&amp;quot;/home/yang/dbbackup&amp;quot; fullpathbackupfile=&amp;quot;$backupfolder/$filename&amp;quot; logfile=&amp;quot;$backupfolder/&amp;quot;backup_log_&amp;quot;$(date +&#39;%Y_%m&#39;)&amp;quot;.txt echo &amp;quot;mysqldump ${db} started at $(date +&#39;%Y_%m_%d %H:%M:%S&#39;)&amp;quot; &amp;gt;&amp;gt; &amp;quot;$logfile&amp;quot; /home/uniweibo/mysql/mysql-5.6.17/bin/mysqldump -h127.0.0.1 --single-transaction -uroot -P6606 -pxxxxx ${db} | gzip &amp;gt; &amp;quot;$fullpathbackupfile&amp;quot; echo &amp;quot;mysqldump ${db} finished</description>
    </item>
    
  </channel>
</rss>