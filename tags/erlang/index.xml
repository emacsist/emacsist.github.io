<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>erlang on emacsist</title>
    <link>https://emacsist.github.io/tags/erlang/</link>
    <description>Recent content in erlang on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 May 2017 12:54:43 +0000</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/erlang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[翻译]How to Interpret the Erlang Crash Dumps</title>
      <link>https://emacsist.github.io/2017/05/13/%E7%BF%BB%E8%AF%91how-to-interpret-the-erlang-crash-dumps/</link>
      <pubDate>Sat, 13 May 2017 12:54:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/13/%E7%BF%BB%E8%AF%91how-to-interpret-the-erlang-crash-dumps/</guid>
      <description>原文 如何解释 Erlang Crash Dumps 本节介绍 Erlang 运行时系统在异常退出时生成的 erl_crash.dump 文件 注意： 在 Erlang/OTP R9C 中， Erlang crash dump 有大幅的改变。在本节中的信息不能直接应用到旧的 dumps 文件中。</description>
    </item>
    
    <item>
      <title>Erlang杂项</title>
      <link>https://emacsist.github.io/2017/05/10/erlang%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Wed, 10 May 2017 11:00:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/10/erlang%E6%9D%82%E9%A1%B9/</guid>
      <description>erlang 启动参数说明 + : 它是 emulator flag 它控制模拟器的行为(即虚拟机)。(emulator flag).可以通过 erlang:system_info(&amp;hellip;) 来获取。所有选项名有: system_info - : 这种参数是传递</description>
    </item>
    
    <item>
      <title>《Erlang程序设计》学习笔记</title>
      <link>https://emacsist.github.io/2017/05/07/erlang%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 07 May 2017 11:06:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/05/07/erlang%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>动态代码载入 每当调用 someModule:someFunction(&amp;hellip;) 时，调用的总是最新模块里的最新版函数，哪怕当代码在模块里运行时重新编译了该模块也是如此。 在任一时刻，Erlang允许一</description>
    </item>
    
    <item>
      <title>《Erlang/OTP 并发编程实战》读书笔记</title>
      <link>https://emacsist.github.io/2017/04/30/erlang/otp-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 30 Apr 2017 12:55:25 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/04/30/erlang/otp-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>第一章：Erlang/OTP 平台 Erlang 中，并发的基本单位是进程。每个进程代表一个持续的活动，它是某段程序代码的执行代理，与其他按各自的节奏执行自</description>
    </item>
    
  </channel>
</rss>