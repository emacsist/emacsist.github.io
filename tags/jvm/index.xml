<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jvm on emacsist</title>
    <link>https://emacsist.github.io/tags/jvm/</link>
    <description>Recent content in jvm on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 31 Jul 2019 16:28:07 +0800</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java内联inline相关资料</title>
      <link>https://emacsist.github.io/2019/07/31/java%E5%86%85%E8%81%94inline%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Wed, 31 Jul 2019 16:28:07 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/07/31/java%E5%86%85%E8%81%94inline%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description>JVM inline 相关的参数 # 获取所有 inline 匹配的参数 java -XX:+PrintFlagsFinal -version | grep -i &amp;quot;inline&amp;quot; # 如果生成的 native code 大小小于这个, 则 inline -XX:InlineSmallCode=2000 # 最大允许进行 inline 的 byte code 大小. 超过的话, 会提示 too big -XX:MaxInlineSize=35 # 经</description>
    </item>
    
    <item>
      <title>[翻译]The Unspoken   the Why of GC Ergonomics</title>
      <link>https://emacsist.github.io/2018/06/13/%E7%BF%BB%E8%AF%91the-unspoken-the-why-of-gc-ergonomics/</link>
      <pubDate>Wed, 13 Jun 2018 12:23:53 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/13/%E7%BF%BB%E8%AF%91the-unspoken-the-why-of-gc-ergonomics/</guid>
      <description>你有使用GC工效学(即:让GC自动调整), 使用带有 -XX:+UseAdaptiveSizePolicy 选项的 UseParallelGC 收集器? 该 GC 的工效学的杰出之处在于它试图增大或缩小堆以达到指定的目标. 你可以选择</description>
    </item>
    
    <item>
      <title>[翻译]The Unspoken Application Time</title>
      <link>https://emacsist.github.io/2018/06/13/%E7%BF%BB%E8%AF%91the-unspoken-application-time/</link>
      <pubDate>Wed, 13 Jun 2018 11:48:24 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/13/%E7%BF%BB%E8%AF%91the-unspoken-application-time/</guid>
      <description>原文 有时, 你会对你的应用程序会在GC之间执行执行多久感兴趣. 这可从GC日志中计算出来, 但一个方便的方式来查看这个信息是通过命令行选项 -XX:+PrintGCApplicationStoppedTime 以及 -XX:+PrintGCApplicationConcurrentTime</description>
    </item>
    
    <item>
      <title>[翻译]Oracle JDK 1.7.0_04 及之后可用的GC</title>
      <link>https://emacsist.github.io/2018/06/12/%E7%BF%BB%E8%AF%91oracle-jdk-1.7.0_04-%E5%8F%8A%E4%B9%8B%E5%90%8E%E5%8F%AF%E7%94%A8%E7%9A%84gc/</link>
      <pubDate>Tue, 12 Jun 2018 17:37:14 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/12/%E7%BF%BB%E8%AF%91oracle-jdk-1.7.0_04-%E5%8F%8A%E4%B9%8B%E5%90%8E%E5%8F%AF%E7%94%A8%E7%9A%84gc/</guid>
      <description>原文 Jack Shirazi 告诉你 Oracle Java 7 update 4 及更高版本可以使用哪些GC和GC的组合, 包括Java 8 和Java9 发布日期: June 2012, 更新日期: September 2015, 作者 Jack Shirazi 注意, 这已经更</description>
    </item>
    
    <item>
      <title>[翻译]GC 调优指南(简要翻译)</title>
      <link>https://emacsist.github.io/2018/06/08/%E7%BF%BB%E8%AF%91gc-%E8%B0%83%E4%BC%98%E6%8C%87%E5%8D%97%E7%AE%80%E8%A6%81%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Fri, 08 Jun 2018 11:35:10 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2018/06/08/%E7%BF%BB%E8%AF%91gc-%E8%B0%83%E4%BC%98%E6%8C%87%E5%8D%97%E7%AE%80%E8%A6%81%E7%BF%BB%E8%AF%91/</guid>
      <description>GC, heap 和 Runtime Compiler 的默认选项 服务器级的典型机器是被定义为以下的条件: 2 个或更多的物理CPU 2 GB或更多的物理内存 在一个服务器级的机器中, 默认的选项是</description>
    </item>
    
    <item>
      <title>Java 中假泛型导致的一个坑</title>
      <link>https://emacsist.github.io/2017/09/21/java-%E4%B8%AD%E5%81%87%E6%B3%9B%E5%9E%8B%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</link>
      <pubDate>Thu, 21 Sep 2017 17:22:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/09/21/java-%E4%B8%AD%E5%81%87%E6%B3%9B%E5%9E%8B%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</guid>
      <description>情景 公司里一位程序员，写了段代码: @Override public Set&amp;lt;Integer&amp;gt; getUserId() { Set&amp;lt;Integer&amp;gt; userIdSet; Object value = LocalCache.getValue(CacheConstants.USERID_KEY); if (value != null) { userIdSet = (Set&amp;lt;Integer&amp;gt;) value; } else { userIdSet = redisTemplate.opsForSet().members(CacheConstants.USERID_KEY); LocalCache.putValue(CacheConstants.USERID_KEY, userIdSet, 300); } return userIdSet; } 然后判断 Set&amp;lt;Integer&amp;gt; userIdSet = taskService.getUserId(); if (task != null &amp;amp;&amp;amp; userIdSet.contains(task.getUserId())) { //do somehting } else {</description>
    </item>
    
    <item>
      <title>JVM字节码学习与理解</title>
      <link>https://emacsist.github.io/2017/06/19/jvm%E5%AD%97%E8%8A%82%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3/</link>
      <pubDate>Mon, 19 Jun 2017 14:19:41 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/06/19/jvm%E5%AD%97%E8%8A%82%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3/</guid>
      <description>aconst_null 压特殊的 null 对象引用入栈。 iconst_ 作用压整型数字0，1，2，3，4，5 入栈 注意 压入栈的指令还有： bipush 0; sipush 0; idc 0; 但这些指令相对于等同的 iconst_ 指令，效率更低</description>
    </item>
    
    <item>
      <title>Java 一次启动失败分析案例</title>
      <link>https://emacsist.github.io/2017/02/09/java-%E4%B8%80%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Thu, 09 Feb 2017 11:32:22 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/09/java-%E4%B8%80%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/</guid>
      <description>今天，在部署外网的测试环境时，发现启动时报如下错误： Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c6d80000, 42991616, 0) failed; error=&#39;Cannot allocate memory&#39; (errno=12) # # There is insufficient memory for the Java Runtime Environment to continue. # Native memory allocation (malloc) failed to allocate 42991616 bytes for committing reserved memory. # An</description>
    </item>
    
    <item>
      <title>JVM性能排查神器 greys-anatomy</title>
      <link>https://emacsist.github.io/2016/07/15/jvm%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5%E7%A5%9E%E5%99%A8-greys-anatomy/</link>
      <pubDate>Fri, 15 Jul 2016 12:11:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/07/15/jvm%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5%E7%A5%9E%E5%99%A8-greys-anatomy/</guid>
      <description>这里只是记录下这个工具, 而不是使用手册, 因为Github greys-anatomy上已经有了非常详细的手册.</description>
    </item>
    
    <item>
      <title>使用Java监控工具出现 Can&#39;t attach to the process</title>
      <link>https://emacsist.github.io/2015/07/07/%E4%BD%BF%E7%94%A8java%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%87%BA%E7%8E%B0-cant-attach-to-the-process/</link>
      <pubDate>Tue, 07 Jul 2015 16:49:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/07/07/%E4%BD%BF%E7%94%A8java%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%87%BA%E7%8E%B0-cant-attach-to-the-process/</guid>
      <description>问题重现 ➜ jinfo -flags 3032 Attaching to process ID 3032, please wait... Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach to the process sun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach to the process at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$LinuxDebuggerLocalWorkerThread.execute(LinuxDebuggerLocal.java:163) at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach(LinuxDebuggerLocal.java:278) at sun.jvm.hotspot.HotSpotAgent.attachDebugger(HotSpotAgent.java:671) at sun.jvm.hotspot.HotSpotAgent.setupDebuggerLinux(HotSpotAgent.java:611) at sun.jvm.hotspot.HotSpotAgent.setupDebugger(HotSpotAgent.java:337) at sun.jvm.hotspot.HotSpotAgent.go(HotSpotAgent.java:304) at sun.jvm.hotspot.HotSpotAgent.attach(HotSpotAgent.java:140) at sun.jvm.hotspot.tools.Tool.start(Tool.java:185) at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118) at sun.jvm.hotspot.tools.JInfo.main(JInfo.java:138) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at sun.tools.jinfo.JInfo.runTool(JInfo.java:108) at sun.tools.jinfo.JInfo.main(JInfo.java:76) Caused by: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之分析堆</title>
      <link>https://emacsist.github.io/2015/06/27/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%86%E6%9E%90%E5%A0%86/</link>
      <pubDate>Sat, 27 Jun 2015 00:01:26 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/27/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%86%E6%9E%90%E5%A0%86/</guid>
      <description>常量池的位置 Java 6 及之前, 常量池放在永久区 Java 7 及以后, 字符串常量池放到了堆进行管理.(也就是说可以被垃圾收集器回收) Java 7 及以后, 可以通过虚拟机</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之性能监控工具</title>
      <link>https://emacsist.github.io/2015/06/26/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:49 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/26/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</guid>
      <description>top vmstat iostat pidstat 查看某进程及某线程占用CPU的例子 jps: 列出java进程,找到pid. pidstat -p pid -u 1 3 -u -t: 查看pid的进程所有线程的cpu使用情况. jstack -l pid &amp;gt;</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之垃圾收集器参数</title>
      <link>https://emacsist.github.io/2015/06/25/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 25 Jun 2015 23:10:35 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/25/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%8F%82%E6%95%B0/</guid>
      <description>串行回收器参数 -XX:+UseSerialGC: 在新生代和年老代使用串行收集器 -XX:SurvivorRatio: 设置eden和survivor区大小的比例 -XX:PretenureSizeThreshold: 设置大对象直接进入老年代的阈值.当对象的大小,超</description>
    </item>
    
    <item>
      <title>&lt;实战Java虚拟机&gt;学习笔记之回收算法</title>
      <link>https://emacsist.github.io/2015/06/24/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 24 Jun 2015 23:57:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/24/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</guid>
      <description>引用计数法 问题1: 无法处理循环引用的情况 问题2: 都要伴随着加减引用计数操作,对性能有一定的影响 名词解释 可达对象 通过根对象进行引用搜索, 最终可</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之常用Java虚拟机参数</title>
      <link>https://emacsist.github.io/2015/06/23/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%82%E6%95%B0/</link>
      <pubDate>Tue, 23 Jun 2015 00:11:04 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/23/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%82%E6%95%B0/</guid>
      <description>跟踪垃圾回收 -XX:+PrintGC 例子日志样本： [GC 4793K-&amp;gt;377K(15872K), 0.0006926 secs] 表示当前使用了4793K,GC后，使用量变为377K，最大可用为15872K -XX:+PrintGCDetails 格式： [名称:当前某区大小</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之函数调用</title>
      <link>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 22 Jun 2015 11:41:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      <description>出入Java栈 Java栈是一块线程私有的内存空间。它是一块先进后出的数据结构。Java栈中保存的主要内容为栈帧。每一次函数调用，都会有一个对</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之浮点数表示方式</title>
      <link>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%AE%E7%82%B9%E6%95%B0%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 22 Jun 2015 00:09:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/22/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%AE%E7%82%B9%E6%95%B0%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F/</guid>
      <description>IEEE 754 标准 Java虚拟机处理浮点数的标准是参考 IEEE 754 规范的。 参考文档 : IEEE 754 标示格式 符号位 | 阶码 | 尾数 ##32位 1 位 | 8 位 | 23位 ##64位 1 位 |</description>
    </item>
    
    <item>
      <title>《实战Java虚拟机》学习笔记之数值表示</title>
      <link>https://emacsist.github.io/2015/06/21/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA/</link>
      <pubDate>Sun, 21 Jun 2015 23:19:44 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/06/21/%E5%AE%9E%E6%88%98java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA/</guid>
      <description>原码 在数值前直接加一符号位的表示法。 [+7]原= 0 0000111 B [-7]原= 1 0000111 B -127～+127 反码 负数的反码，符号位为“1”，数值部分按位取反。</description>
    </item>
    
  </channel>
</rss>