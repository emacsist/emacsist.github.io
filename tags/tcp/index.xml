<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tcp on emacsist</title>
    <link>https://emacsist.github.io/tags/tcp/</link>
    <description>Recent content in tcp on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Jul 2019 12:54:21 +0800</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/tags/tcp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux网络相关参数</title>
      <link>https://emacsist.github.io/2019/07/13/linux%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</link>
      <pubDate>Sat, 13 Jul 2019 12:54:21 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/07/13/linux%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</guid>
      <description>SACK net.ipv4.tcp_dsack = 1 net.ipv4.tcp_sack = 1 window/buffer # socket 读写缓冲区相关配置. 这个是所有协议中 每个 socket 的默认以及最大大小. 单位字节. # 注意, 只有 default 值可以被覆盖, max 的值是硬性的. net.core.rmem_default =</description>
    </item>
    
    <item>
      <title>&lt;TCP IP协议&gt;笔记</title>
      <link>https://emacsist.github.io/2019/07/11/tcp-ip%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 11 Jul 2019 17:26:17 +0800</pubDate>
      
      <guid>https://emacsist.github.io/2019/07/11/tcp-ip%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0/</guid>
      <description>概念 协议族 一系列相关的协议的集合 体系结构或参考模型 指定一个协议族中的各种协议之间的相互关系并划分需要完成的任务的设计 面向连接 对于虚电路抽象和</description>
    </item>
    
    <item>
      <title>Netty资料收集与整理</title>
      <link>https://emacsist.github.io/2018/04/24/netty%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 24 Apr 2018 15:57:32 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/24/netty%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</guid>
      <description>ChannelInitializer 它每次在 Channel 初始化时都会进行调用.一般会在这里, 初始化相应的编码器和解码器以及相应的 Handler. 例如 @Override protected void initChannel(final Channel ch) { ChannelPipeline p = ch.pipeline(); p.addLast(new HttpRequestDecoder()); p.addLast(new HttpResponseEncoder()); p.addLast(new HelloHandler()); } 为了调试, 我这</description>
    </item>
    
    <item>
      <title>Socket参数资料收集与整理</title>
      <link>https://emacsist.github.io/2018/04/24/socket%E5%8F%82%E6%95%B0%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 24 Apr 2018 09:51:15 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2018/04/24/socket%E5%8F%82%E6%95%B0%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</guid>
      <description>最近在看 &amp;lt;Unix 网络编程&amp;gt; 这本书, 发现好多关于网络编程的细节参数, 所以这里做个整理和总结. socket 状态转换图 TCP 标志位解释 维基百科 Flags (9 bits) (aka Control bits) . Contains 9</description>
    </item>
    
    <item>
      <title>RabbitMQ 出队发送邮件注意事项</title>
      <link>https://emacsist.github.io/2017/02/22/rabbitmq-%E5%87%BA%E9%98%9F%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Wed, 22 Feb 2017 14:21:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2017/02/22/rabbitmq-%E5%87%BA%E9%98%9F%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>线上一个发送邮件的系统，通过 RabbitMQ 出队发送系统中的邮件时，发现虽然 consumer 连接在那里，但是日志中却没有任何输出相关的成功或失败或抛出异常的信息。 这种情</description>
    </item>
    
    <item>
      <title>Http 协议中的Range请求头例子</title>
      <link>https://emacsist.github.io/2015/12/29/http-%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84range%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Tue, 29 Dec 2015 17:11:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/29/http-%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84range%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BE%8B%E5%AD%90/</guid>
      <description>HTTP 请求头 Range 请求资源的部分内容(不包括响应头的大小), 单位是byte,即字节,从0开始. 如果服务器能够正常响应的话，服务器会返回206 Partial Con</description>
    </item>
    
  </channel>
</rss>